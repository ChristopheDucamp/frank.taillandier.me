<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="http://frank.taillandier.me/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.3.0">Jekyll</generator><link href="http://frank.taillandier.me/feed.xml" rel="self" type="application/atom+xml" /><link href="http://frank.taillandier.me/" rel="alternate" type="text/html" /><updated>2016-10-24T23:18:36+02:00</updated><id>http://frank.taillandier.me//</id><title type="html">Frank Taillandier</title><subtitle>Consultant web</subtitle><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><entry><title type="html">Ne passons pas à côté des choses simples</title><link href="http://frank.taillandier.me/2016/10/02/ne-passons-pas-a-cote-des-choses-simples/" rel="alternate" type="text/html" title="Ne passons pas à côté des choses simples" /><published>2016-10-02T00:00:00+02:00</published><updated>2016-10-02T00:00:00+02:00</updated><id>http://frank.taillandier.me/2016/10/02/ne-passons-pas-a-cote-des-choses-simples</id><content type="html" xml:base="http://frank.taillandier.me/2016/10/02/ne-passons-pas-a-cote-des-choses-simples/">&lt;p&gt;Ce texte est destiné à servir de support pour les &lt;a href=&quot;/presentations/ne-passons-pas-a-cote-des-choses-simples/&quot;&gt;slides de présentation&lt;/a&gt; de la mini-conférence donnée à &lt;a href=&quot;http://www.paris-web.fr/2016/&quot;&gt;Paris Web 2016&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Il était difficile de couvrir en 15 minutes un sujet aussi vaste que les processus modernes de développement et de déploiement, ainsi que tout l’écosystème actuel à disposition pour servir des sites beaucoup plus performants et sécurisés.&lt;/p&gt;

&lt;p&gt;Avec &lt;a href=&quot;http://bertrandkeller.info/&quot;&gt;Bertrand&lt;/a&gt;, nous voulions surtout partager nos retours d’expérience et le plaisir retrouvé que nous avions à apprendre et à concevoir itérativement des sites de qualité où le contenu est roi. Donner envie aux développeurs front de reprendre la main sur leur code tout en proposant une expérience optimale aux utilisateurs.&lt;/p&gt;

&lt;p&gt;C’était la mission impossible que nous nous étions fixés en proposant une &lt;a href=&quot;https://www.paris-web.fr/2016/conferences/ne-passons-pas-a-cote-des-choses-simples.php&quot;&gt;mini-conférence à Paris Web 2016&lt;/a&gt;. La bonne blague. Donc pour ne pas rester sur la frustration de n’avoir pas pu traiter ce sujet plus en détail, voyant bien que @m4dz agitait frénétiquement le carton indiquant la fin du temps qui nous était imparti, je vous propose de revenir rapidement si vous le voulez bien sur les problèmes récurrents que nous pouvons rencontrer aujourd’hui en production et comment en utilisant des process adaptés, ils peuvent aisément être résolus.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;p&gt;Il arrive bien souvent qu’en cas de pic de trafic, un site web ne réponde plus car le serveur ne tient pas la charge à cause d’accès concurrents trop importants à la base de données. Il est également courant d’être exposé à des failles de sécurité quand on ne met pas à jour rapidement son logiciel de gestion de contenu par exemple. Dès que vous faites le choix d’utiliser une stack comme LAMP (Linux, Apache, MySQL, PHP), vous choisissez également de vous engager à assurer ou à déléguer la maintenance serveur à un prestataire.&lt;/p&gt;

&lt;p&gt;Dans le même temps, cela fait déjà &lt;a href=&quot;https://www.paris-web.fr/2008/-samedi-15-novembre-technique-.html#hcalendar-Paris-Web_2008-15_novembre_2008-atelier-performance_client&quot;&gt;au moins huit ans&lt;/a&gt; que l’on sait que le temps de chargement d’un site web est un facteur crucial en terme d’utilisabilité, de retention et de taux de conversion. C’est encore plus vrai de nos jours maintenant que le mobile est devenu le périphérique d’accès principal à Internet. Ce n’est pas &lt;a href=&quot;https://www.paris-web.fr/2016/conferences/www-world-wide-web-not-wealthy-westerners-web.php&quot;&gt;Bruce Lawson&lt;/a&gt; qui me contredira.&lt;/p&gt;

&lt;p&gt;Les sites qui se contentent d’afficher des contenus, que ce soit des articles de blog, des présentations de produit, des documentations en ligne peuvent depuis déjà une dizaine d’année utiliser des &lt;a href=&quot;/2016/03/08/les-gestionnaires-de-contenu-statique/&quot;&gt;générateurs de site statique&lt;/a&gt; et les faire héberger sur des CDN afin de limiter les temps de latence du réseau.&lt;/p&gt;

&lt;p&gt;Avec ces générateurs, plutôt que d’être enfermées dans des bases de données, les données sont stockées sous forme de fichiers texte dans des formats lisibles et facilement éditables. &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;Markdown&lt;/a&gt; est le format qu’on rencontre le plus souvent pour stocker les textes et pour des données structurées on fera appel à &lt;a href=&quot;http://json.org/json-fr.html&quot;&gt;JSON&lt;/a&gt; ou &lt;a href=&quot;http://www.yaml.org/spec/1.2/spec.html#Preview&quot;&gt;YAML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Les générateurs vont nous permettre de concevoir des modèles de pages pour y insérer nos contenus et nos données. Nous obtiendrons en sortie un site, composé de pages web au format HTML, de CSS et de JavaScript si besoin. Une fois notre site généré, il ne reste plus qu’à le déposer sur un serveur HTTP.&lt;/p&gt;

&lt;p&gt;On revient à une communication simple entre un navigateur et un serveur HTTP, qui va pouvoir facilement mettre en cache les contenus, puisque ce sont les mêmes qui sont servis à tout le monde, ce qui entraîne automatiquement un gain de performance drastique. Si vous avez mis en place HTTPS c’est encore mieux - merci &lt;a href=&quot;https://letsencrypt.org/&quot;&gt;Let’s Encrypt&lt;/a&gt; - vous pourrez y ajouter un &lt;em&gt;service worker&lt;/em&gt; pour faire du &lt;em&gt;offline-first&lt;/em&gt; et transformer votre site en &lt;a href=&quot;/2016/06/28/que-sont-les-progressive-web-apps/&quot;&gt;Progressive Wep App&lt;/a&gt;. &lt;a href=&quot;https://www.paris-web.fr/2016/conferences/progressive-web-apps-le-futur-du-web-arrive.php&quot;&gt;Hubert Sablonnière&lt;/a&gt; vous en parlera bien mieux que moi, mais là il est parti au ski avec ses amis.&lt;/p&gt;

&lt;p&gt;Dans ce scénario donc, la génération des pages est complètement distincte de l’hébergement. En séparant ces deux problématiques, on évite tous les problèmes mentionnés précédemment. Au final, nous obtenons un site web beaucoup plus performant, même en cas de fort trafic, d’autant plus facilement reproductible s’il est hébergé sur un réseau de publication de contenu (CDN). On évite par la même occasion des frais coûteux de maintenance et le risque d’intrusion ou celui de voir son site défiguré.&lt;/p&gt;

&lt;p&gt;Ce mode de fonctionnement présente donc de sacrés avantages pour des frais minimes. C’est pour cette raison que des sociétés comme Mailchimp l’ont adopté&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; depuis plusieurs années, que ce soit pour présenter leur offre, fournir de la documentation à leurs clients ou aux développeurs.&lt;/p&gt;

&lt;p&gt;Si ce workflow de développement et de déploiement est optimal, qu’en est-il de celui des contributeurs, ceux qui doivent ajouter et mettre à jour les contenus ? Ils sont maintenant habitués à des interfaces utilisateurs de saisie, qui leur permettent d’exécuter ces tâches de manière intuitive.&lt;/p&gt;

&lt;p&gt;Si les générateurs de site statique sont performants, c’est que ce sont pour la plupart des outils en ligne de commande, facilement exécutables dans n’importe quel environnement. Pour palier à ce manque, il existe néanmoins des solutions et elles sont logiquement de plus en plus nombreuses depuis quelques années, puisque la popularité de ce qu’on appelle désormais le &lt;em&gt;statique&lt;/em&gt; est grandissante.&lt;/p&gt;

&lt;p&gt;La première solution est de passer par un &lt;a href=&quot;https://css-tricks.com/what-is-a-headless-cms/&quot;&gt;Headless CMS&lt;/a&gt; chargé de s’occuper uniquement de la manipulation des contenus, mais pas de leur affichage côté client. Encore une fois on partage les responsabilités, chacun son rôle. Des services comme &lt;a href=&quot;https://www.contentful.com&quot;&gt;Contenful&lt;/a&gt; ou &lt;a href=&quot;https://prismic.io/&quot;&gt;Prismic&lt;/a&gt; fournissent aux développeurs des APIs qui permettent ensuite de récupérer vos contenus. Des &lt;em&gt;headless CMS&lt;/em&gt;, on devrait en voir de plus en plus maintenant que les frameworks JS comme React s’occupent des vues côté front. Drupal a même publié un &lt;a href=&quot;https://github.com/davidhwang/horseman#a-manifesto&quot;&gt;manifeste&lt;/a&gt; où il est écrit qu’ils veulent rester le backend de prédilection de ces frameworks côté client, qui sont le futur du web.&lt;/p&gt;

&lt;p&gt;La deuxième solution est de passer par un service en ligne qui se connectera à votre dépôt de code et vous servira d’interface d’édition de vos contenus. Il en existe plusieurs&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, je ne vais pas tous les énumérer.&lt;/p&gt;

&lt;p&gt;Ce qu’il est important de retenir, c’est que cela permet à des personnes qui n’ont aucune idée de ce qui se trame dessous, de pouvoir continuer à avoir une expérience utilisateur d’édition de contenus, similaire à celle qu’ils connaissent déjà dans des CMS comme Wordpress ou Drupal. Les interfaces sont même pour le moment plus simples à prendre en main, car elles proposent moins d’options, donc moins de charge cognitive.&lt;/p&gt;

&lt;p&gt;Il n’y a pas que dans les entreprises de logiciels, où les rédacteurs sont bien accompagnés par les équipes de développeurs, que ce genre de workflow est mis en place.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://blogs.getty.edu/iris/an-editors-view-of-digital-publishing/&quot;&gt;Certains éditeurs ont franchi le pas&lt;/a&gt; avec succès, car l’expérience d’écriture avec Markdown, l’apport du versionnement pour les relectures et les corrections de manuscrits alliés à la possibilité de générer facilement différents formats de fichiers pour les livres électroniques en font un &lt;a href=&quot;/2016/08/28/traitement-de-texte-multicanal/#un-processus-de-publication-moderne&quot;&gt;workflow de travail&lt;/a&gt; idéal pour l’édition et la publication.&lt;/p&gt;

&lt;p&gt;Ces processus de travail, les développeurs les connaissent de mieux en mieux, d’abord avec l’avènement de &lt;a href=&quot;https://git-scm.com/book/fr/v2&quot;&gt;Git&lt;/a&gt;, crée il y a maintenant dix ans et la popularité grandissante de plates-formes de développement collaboratif comme GitHub, GitLab ou Bitbucket basées sur le versionnement de fichiers.&lt;/p&gt;

&lt;p&gt;Parallèlement à ces évolutions, nous avons pu assisté également à la mise à disposition d’APIs, toujours plus nombreuses et plus riches. Elles facilitent la réutilisation de données, en les rendant accessibles via des requêtes HTTP. Il est aujourd’hui trivial de récupérer du JSON avec ES2015 comme nous l’avons vu le lendemain en atelier. Promis.&lt;/p&gt;

&lt;p&gt;Afin d’illustrer tout cela, comme nous étions à Paris Web, j’ai choisi de présenter une preuve de concept ingénieuse, développée par &lt;a href=&quot;http://www.pixelastic.com/&quot;&gt;Tim Carry&lt;/a&gt;, évangéliste chez Algolia, qui propose une API de recherche très performante pour vos documents. Tim a ensuite utilisé &lt;a href=&quot;http://brunch.io/&quot;&gt;Brunch&lt;/a&gt; pour générer ce qu’on appelle dans notre jargon une &lt;em&gt;single page app&lt;/em&gt;, une page dont le côté dynamique est entièrement assuré par JavaScript dans le navigateur. C’est plutôt cool le développement web en 2016.&lt;/p&gt;

&lt;p&gt;Tim a décidé de faire un cadeau à Paris Web en proposant un moteur de recherche qui permet d’accéder à touts les supports de conférences des éditions passées. Tim a donc commencé par récupérer les données des 11 éditions de Paris Web au format JSON pour pouvoir ensuite les indexer à l’aide d’Algolia. Ajoutez une pincée de JavaScript et quelques gouttes de CSS, et vous obtenez une application web tout ce qu’il y a de plus dynamique et très performante. &lt;a href=&quot;https://pixelastic.github.io/parisweb/&quot;&gt;Jugez-en par vous-même&lt;/a&gt;. C’est instantané ou presque, de l’ordre de la milliseconde.&lt;/p&gt;

&lt;p&gt;Pas de backend, des données versionnées et stockées dans un format standard, une API de qualité, un générateur pour assembler le tout, on pousse tout ça gratuitement sur Github Pages et hop le tour est joué.&lt;/p&gt;

&lt;p&gt;Afin de mieux décrire ce genre de procédé, Matthias Billman le fondateur de Netlify, une plateforme d’hébergement et de déploiement automatisé de sites &lt;em&gt;statiques&lt;/em&gt; a proposé le terme de &lt;a href=&quot;http://jamstack.org/fr/&quot;&gt;JAMStack&lt;/a&gt; lors d’une &lt;em&gt;Smashing Conf&lt;/em&gt; à San Francisco. JAM pour &lt;strong&gt;JavaScript, APIs and Markup&lt;/strong&gt;. Cet acronyme liste une partie des ingrédients de la recette qui permettent de générer des sites performants et sécurisés. Peu importe le nom qu’on lui donne, l’important c’est le résultat, ça booste. Alors est-ce si compliqué que cela ?&lt;/p&gt;

&lt;p&gt;Si l’on regarde la définition du mot &lt;strong&gt;simple&lt;/strong&gt; dans le Larousse, on peut y lire :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Simple : qui est constitué d’un &lt;strong&gt;petit nombre d’éléments qui s’organisent de manière claire&lt;/strong&gt;, par opposition à complexe.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Cela décrit assez bien le processus de conception des applications web d’aujourd’hui. Chaque élément de la chaîne a une responsabilité et un périmètre bien défini et chacun fait ce qu’il a à faire. Nous sommes en opposition avec une application monolithique complexe, qui cumule toutes les responsabilités.&lt;/p&gt;

&lt;p&gt;Vous avez donc compris que ces sites ne sont donc pas forcément si &lt;em&gt;statiques&lt;/em&gt; que ça. Forcément, le web a beaucoup évolué depuis les premières page HTML que nous mettions en ligne avec un logiciel FTP, les navigateurs sont devenus très performants, &lt;a href=&quot;https://www.paris-web.fr/2016/conferences/nodejs-partout.php&quot;&gt;JavaScript est désormais partout&lt;/a&gt;, comme se tue à le répéter Christophe Porteneuve depuis plusieurs années déjà. Le versionnement des projets facilite grandement la collaboration et l’automatisation les processus de déploiement. Nous avons pu le constater lors de &lt;a href=&quot;https://www.paris-web.fr/2016/conferences/le-deploiement-manuel-non-merci-jessaie-darreter.php&quot;&gt;la présentation de David Sferuzza&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Même si on ne développe pas de &lt;em&gt;Single Page App&lt;/em&gt; comme Tim, l’adoption d’un workflow similaire pour la génération de sites de contenus est une aubaine pour les développeurs et designers web. Ils ont la possibilité de se concentrer uniquement sur leur domaine de prédilection. C’est également un très bon terrain de jeu et d’expérimentation pour s’amuser à utiliser des APIs, récupérer des fichiers JSON, moduler des données comme bon nous semble à l’aide du sucre syntaxique qu’offre YAML et utiliser le langage de &lt;em&gt;templating&lt;/em&gt; de son choix pour façonner son code à la manière d’un artisan.&lt;/p&gt;

&lt;p&gt;Avoir le choix dans les outils, surtout quand ils sont aussi nombreux, c’est toujours un dilemme, mais en ce qui concerne les générateurs, le choix sera de toute façon influencé par votre expérience passée, l’écosystème que vous maîtrisez le mieux.&lt;/p&gt;

&lt;p&gt;Ne vous inquiétez on trouve des générateurs dans tous les langages : en Ruby, en JS, en Go, en Python et même en PHP - &lt;a href=&quot;https://twitter.com/briceatwork/status/781770722846703616&quot;&gt;désolé Brice&lt;/a&gt;. Vous avez aussi pas mal de choix au niveau du système de &lt;em&gt;templating&lt;/em&gt;, le mieux est encore d’aller trouver votre bonheur sur &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;StaticGen&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Vous pouvez commencer par identifier un &lt;em&gt;content-driven&lt;/em&gt; projet comme un blog ou un site produit ou institutionnel. Vous pouvez aussi décider d’utiliser des générateurs dès la phase de prototypage comme le fait &lt;a href=&quot;http://bertrandkeller.info/&quot;&gt;Bertrand&lt;/a&gt;. Il est important de ne laisser personne à la traine, de prendre le temps de former les designer web à comprendre la logique puis à utiliser des interfaces graphiques pour Git comme &lt;a href=&quot;https://www.gitkraken.com/&quot;&gt;GitKraken&lt;/a&gt; — qui a eu la très bonne idée d’ajouter un bouton &lt;em&gt;annuler&lt;/em&gt;. Un petit CTRL-Z et c’est reparti. Quand on a le droit à l’erreur, ça fait toujours moins peur.&lt;/p&gt;

&lt;p&gt;Ce qui compte avant tout c’est de &lt;strong&gt;retrouver du plaisir et de la sérénité&lt;/strong&gt;. Dans son livre &lt;em&gt;&lt;a href=&quot;https://www.amazon.fr/vérité-sur-qui-nous-motive/dp/208137952X/&quot;&gt;La vérité sur ce qui nous motive&lt;/a&gt;&lt;/em&gt;, Daniel Pink décrypte les trois éléments clés de la motivation : &lt;strong&gt;l’autonomie&lt;/strong&gt;, &lt;strong&gt;l’envie de progresser&lt;/strong&gt; dans son domaine pour devenir bon, de maîtriser son art et enfin la finalité et &lt;strong&gt;le sens de notre action&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Ce workflow &lt;strong&gt;simple&lt;/strong&gt;, n’est pas synonyme de &lt;em&gt;facile&lt;/em&gt; et rassemble ces trois composantes. C’est surement pour cela qu’il est devenu celui de nombreux projets open-source, notamment de documentation ou de présentation de produit. Si le logiciel open-source montre toujours la voie, il ne faut pas très longtemps pour que les équipes les plus chevronnées emboitent le pas.&lt;/p&gt;

&lt;p&gt;Les services innovation de l’État français utilisent par exemple ces outils sur des projets comme &lt;a href=&quot;https://beta.gouv.fr/&quot;&gt;https://beta.gouv.fr/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;De plus en plus d’agences privilégient aussi ces process pour leurs clients, notamment pour des sites soumis à de forts trafics.&lt;/p&gt;

&lt;p&gt;C’est par exemple le cas pour le site de campagne d’&lt;a href=&quot;https://www.hillaryclinton.com/&quot;&gt;Hillary Clinton&lt;/a&gt;, le site de l’ICIJ à l’origine des &lt;a href=&quot;https://panamapapers.icij.org/&quot;&gt;Panama Papers&lt;/a&gt;. En France, mis à part des blogs, je ne sais pas si beaucoup d’agences l’utilisent pour des projets aussi importants.&lt;/p&gt;

&lt;p&gt;Quand Christophe Porteneuve m’a dit qu’il lançait &lt;a href=&quot;http://beta.delicious-insights.com/&quot;&gt;le nouveau site de sa société&lt;/a&gt;, je n’ai pas été étonné qu’il ait utilisé &lt;a href=&quot;https://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt;, un générateur de site statique en Ruby. Même chose pour &lt;a href=&quot;http://www.cedexis.com/&quot;&gt;Cedexis&lt;/a&gt;, dont la performance est le cœur de métier et qui utilise aussi Middleman pour son site.&lt;/p&gt;

&lt;p&gt;Certains générateurs comme Gatsby ou Phenomic utilisent nodeJS et React pour embarquer des composants dynamiques dans les pages, c’est une manière hybride de concilier les contenus statiques et le développment d’application web.&lt;/p&gt;

&lt;p&gt;Il semblerait donc que ce soit pour le moment cantonné à quelques experts - j’adorerai qu’on me prouve le contraire - mais je ne doute pas que la France rattrape ses fameux cinq ans de retard très bientôt.&lt;/p&gt;

&lt;p&gt;Les &lt;a href=&quot;/presentations/ne-passons-pas-a-cote-des-choses-simples/&quot;&gt;exemples dans les slides de la conférence&lt;/a&gt; mentionnent des sites très bien conçus comme celui de l’agence &lt;a href=&quot;http://www.instrument.com/&quot;&gt;Instrument&lt;/a&gt;, qui a notamment été commissionnée pour la conception &lt;a href=&quot;https://design.google.com/&quot;&gt;https://design.google.com/&lt;/a&gt;. Il me semble que c’est Nanoc qui a été utilisé sur ce projet.&lt;/p&gt;

&lt;p&gt;Brad Frost est développeur front et utilise lui aussi &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; pour générer la documentation de son projet &lt;a href=&quot;http://patternlab.io/&quot;&gt;PatternLab&lt;/a&gt;. Les intégrateurs, UX designers et autres développeurs front devraient donc s’intéresser selon moi de plus près à ces outils. Non seulement, car ils savent suffisamment s’éffacer pour vous laisser travailler la matière première des technos web, mais parce qu’ils sont aujourd’hui la meilleure réponse à un web plus performant. Pourquoi veut-on aller si vite ? Ça c’est une autre question.&lt;/p&gt;

&lt;p&gt;Enfin voilà, &lt;a href=&quot;http://bertrandkeller.info/2016/10/04/ne-passons-pas-cote-choses-simples&quot;&gt;le message que nous souhaitions faire passer avec Bertrand&lt;/a&gt;, c’est que même si l’écosystème n’est peut-être pas encore aussi riche que celui des CMS dont la conception correspond à l’état du web de la fin des années 90, il y a surement des projets sur lesquels vous allez avant tout vouloir vous concentrer sur la stratégie éditoriale, l’expérience utilisateur et la performance. Cette &lt;em&gt;stack&lt;/em&gt;, ce &lt;em&gt;workflow&lt;/em&gt; c’est la garantie de plus d’autonomie, de maîtrise et de sérénité de gagné. Je fais le pari que dans quelques années, ces solutions seront plus matures et plus répandues, ce n’est jamais gagné un pari vers le retour à la simplicité, mais a-t-on vraiment encore le choix ?&lt;/p&gt;

&lt;p&gt;Si vous ne devez retenir qu’une chose de tout ça, c’est qu’en adoptant une démarche centrée utilisateur, vous pouvez vous faire plaisir, être créatif et faire de beaux projets. Sachez être pertinent le cas échéant : &lt;em&gt;Keep It Static Stupid&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pour les équipes, tout l’enjeu est de collaborer étroitement avec vos clients, vos collègues à l’appropriation collective du process que vous aurez mis en place, cela n’est pas forcément évident selon le contexte, ça demande de casser ces satanés silos, hérité du Fordisme. Vive les équipes multi-disciplinaires auto-organisées, ça marche dans les &lt;a href=&quot;https://www.paris-web.fr/2016/conferences/quand-les-militaires-se-prennent-au-jeu-du-design-sprint.php&quot;&gt;Design Sprint chez les militaires&lt;/a&gt;, il n’y a pas de raison que ça ne marche pas pour votre équipe.&lt;/p&gt;

&lt;p&gt;Je vous laisse méditer cette citation du penseur de la technique, &lt;a href=&quot;https://fr.wikipedia.org/wiki/Jacques_Ellul&quot;&gt;Jacques Ellul&lt;/a&gt;  :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;La spécialisation doit-elle se payer par une parcellisation absurde où la connaissance se disloque en mille savoirs clos ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Un grand merci à Bertrand Keller pour m’avoir incité à travailler sur cette conférence, la prise de parole en public est un exercice auquel je me prête peu, enfin sur scène, mais l’expérience s’est à priori révélée positive, si j’en crois les quelques retours que j’ai eu. On ne s’improvise pas acteur, ça a du se voir, mais nous avons essayé de proposer un format aussi vivant que possible.&lt;/p&gt;

&lt;p&gt;Le fait qu’il y ait eu d’autres conférences sur l’importance de l’accès aux données, sur les nouvelles APIs qui permettent de mieux gérer le cache navigateur, le déploiement continu, des ateliers JS et Git, fait que notre sujet s’insérait vraiment bien au milieu du programme.&lt;/p&gt;

&lt;p&gt;Je ne suis pas architecte logiciel, je ne prétend pas tout savoir sur ces sujets, simplement j’observe, j’expérimente et je tâche de comprendre comment améliorer nos façons de travailler.&lt;/p&gt;

&lt;p&gt;J’aurais adoré pouvoir échanger avec des gens comme &lt;a href=&quot;https://twitter.com/bastnic&quot;&gt;Bastien Jaillot&lt;/a&gt; sur ce type de sujet avant de préparer cette intervention, j’espère que nous en aurons l’occasion. En tout cas si vous êtes architecte logiciel et que vous souhaite partager votre vision, lâchez-vous. Pour le moment, j’ai l’impression qu’on se dirige vers un meilleur découplage des responsabilités, mais sans pour autant non plus tout passer en microservices ou en architecture &lt;a href=&quot;http://martinfowler.com/bliki/Serverless.html&quot;&gt;serverless&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ce qui bien avec le Web, c’est qu’on ne sait jamais trop comment ça va évoluer, c’est en perpétuel mouvement et le mouvement c’est la vie.&lt;/p&gt;

&lt;p&gt;Un immense bravo à toute l’équipe de Paris-Web qui accomplit un travail phénoménal chaque année, C’était un sans-faute pour moi niveau organisation, comme d’habitude.&lt;/p&gt;

&lt;p&gt;Je profite de l’occasion pour vous donner rendez-vous à &lt;a href=&quot;https://sudweb.fr/&quot;&gt;Sud Web&lt;/a&gt; :sunny: en mai prochain, dont le site est bien entendu propulsé en &lt;em&gt;statique&lt;/em&gt; :rocket:&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;L’équipe de développeurs de Mailchimp a partagé son &lt;a href=&quot;http://devs.mailchimp.com/blog/how-we-built-the-mailchimp-content-style-guide/&quot;&gt;retour d’expérience&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Certains services comme &lt;a href=&quot;https://www.siteleaf.com/&quot;&gt;Siteleaf&lt;/a&gt; ou &lt;a href=&quot;http://cloudcannon.com/&quot;&gt;CloudCannon&lt;/a&gt; ne supportent que &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry.io&lt;/a&gt; supporte aussi &lt;a href=&quot;https://www.gohugo.io/&quot;&gt;Hugo&lt;/a&gt;, d’autres comme &lt;a href=&quot;https://www.datocms.com/&quot;&gt;DatoCMS&lt;/a&gt; sont plus agnostiques. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">Ce texte est destiné à servir de support pour les slides de présentation de la mini-conférence donnée à Paris Web 2016.

Il était difficile de couvrir en 15 minutes un sujet aussi vaste que les processus modernes de développement et de déploiement, ainsi que tout l’écosystème actuel à disposition pour servir des sites beaucoup plus performants et sécurisés.

Avec Bertrand, nous voulions surtout partager nos retours d’expérience et le plaisir retrouvé que nous avions à apprendre et à concevoir itérativement des sites de qualité où le contenu est roi. Donner envie aux développeurs front de reprendre la main sur leur code tout en proposant une expérience optimale aux utilisateurs.

C’était la mission impossible que nous nous étions fixés en proposant une mini-conférence à Paris Web 2016. La bonne blague. Donc pour ne pas rester sur la frustration de n’avoir pas pu traiter ce sujet plus en détail, voyant bien que @m4dz agitait frénétiquement le carton indiquant la fin du temps qui nous était imparti, je vous propose de revenir rapidement si vous le voulez bien sur les problèmes récurrents que nous pouvons rencontrer aujourd’hui en production et comment en utilisant des process adaptés, ils peuvent aisément être résolus.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://frank.taillandier.me/assets/img/presentations/ne-passons-pas-a-cote-des-choses-simples/galets.png" /></entry><entry><title type="html">10 façons de rendre un produit excellent</title><link href="http://frank.taillandier.me/2016/08/30/dix-facons-de-rendre-un-produit-excellent/" rel="alternate" type="text/html" title="10 façons de rendre un produit excellent" /><published>2016-08-30T00:00:00+02:00</published><updated>2016-08-30T00:00:00+02:00</updated><id>http://frank.taillandier.me/2016/08/30/dix-facons-de-rendre-un-produit-excellent</id><content type="html" xml:base="http://frank.taillandier.me/2016/08/30/dix-facons-de-rendre-un-produit-excellent/">&lt;p&gt;Quand vous baignez dans l’open-source, vous finissez par vous imprégner d’une certaine culture. Pas seulement celle de collaborer et de travailler en toute transparence à la vue de tous, mais aussi celle de savoir collaborer efficacement en toute autonomie dans l’optique de livrer le meilleur produit. De cette émulation naît la qualité et l’innovation. On retrouve ces valeurs et cette culture dans les start-ups qui ont développé leurs produits à partir de l’open-source et qui en sont par la suite devenus des acteurs majeurs comme c’est le cas de Google (Angular), de Facebook (React) ou de GitHub (&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;). Quels sont donc les secrets pour développer un bon produit ? C’est ce que partage avec nous @benbalter, contributeur open-source invétéré et en charge de GitHub Pages, le service d’hébergement gratuit de sites web de GitHub.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;Traduction de l’article &lt;a href=&quot;http://ben.balter.com/2016/08/22/ten-ways-to-make-a-product-great/&quot;&gt;10 ways to make a product great&lt;/a&gt; publié le 22 août 2016&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;J’ai passé une partie de mon temps libre pendant ces trois dernières années à jouer avec le code de &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub Pages&lt;/a&gt; et depuis janvier dernier j’ai accepté de gérer GitHub Pages à temps complet. Apparemment je faisais depuis un moment déjà ce que certains appellent de la gestion de produit — même si je n’appelais pas cela ainsi à l’époque — et lorsque j’ai commencé à exercer mon premier rôle formel de chef de produit, j’ai réalisé qu’il y avait tout un tas de leçons que j’avais apprises au cours des dix dernières années que j’avais passé à créer des logiciels et qui m’ont fondamentalement enseigné ce que je pense être la meilleure façon de développer des produits, qu’ils soient propriétaires, publics ou open-source.&lt;/p&gt;

&lt;h2 id=&quot;masquez-la-complexit-aux-utilisateurs&quot;&gt;1. Masquez la complexité aux utilisateurs&lt;/h2&gt;

&lt;p&gt;L’internet est un environnement compliqué et la plupart des sites web ne font rien pour y remédier. Avant toute chose, les produits devraient aspirer à se préoccuper de l’utilisateur. Votre boulot en tant que créateur c’est de concevoir des choses simples au sein d’un système autrement plus complexe, de s’appuyer sur la technologie pour réduire la charge cognitive nécessaire pour accomplir les tâches quelconques que votre utilisateur essaie de mener à bien et pour laquelle votre produit se met en travers du chemin. À chaque fois que vous masquez un contenu via un effet &lt;em&gt;toggle&lt;/em&gt;, que vous ajoutez un menu déroulant ou une zone de saisie, vous imposez de la complexité aux gens et vous leur demandez une nouvelle décision, qu’ils n’auraient pas à prendre s’ils n’utilisaient pas votre produit. Un logiciel devrait être difficile à concevoir et facile à utiliser. Pas l’inverse.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : Quand la compilation d’un site GitHub Pages échoue, nous avons accès à toutes sortes d’informations pour faire un diagnostic : les permissions de l’utilisateur qui a fait la demande, la version de chaque dépendance logicielle que nous utilisons, quand est-ce que le processus de compilation s’est précisément arrêté, les journaux de déboggage de l’erreur, la liste est longue. Plutôt que d’afficher la sortie brute de la compilation à l’utilisateur et lui demander de comprendre ce qui s’est passé, nous détectons la cause sous-jacente, si nous le pouvons, et lui affichons un message d’erreur court et détaillé avec des liens vers la documentation correspondante.&lt;/p&gt;

&lt;h2 id=&quot;ajoutez-des-fonctionnalits-que-80-des-gens-utiliseront&quot;&gt;2. Ajoutez des fonctionnalités que 80% des gens utiliseront&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://ben.balter.com/2016/03/08/optimizing-for-power-users-and-edge-cases/&quot;&gt;C’est facile (et amusant) d’optimiser pour les utilisateurs avancés et de résoudre des cas limites&lt;/a&gt;. Le vrai défi, pour tout produit, réside dans le fait d’arriver véritablement à proposer une expérience facile d’accès pour 80% des gens. Pour un geek, c’est toujours plus marrant de développer la dernière fonctionnalité top-moumoutte qui va permettre à l’application d’interagir avec le dernier outil en vogue sur Hacker News. En tant que chargé de la maintenance du projet, c’est toujours plus gratifiant de mettre du code en ligne que de fermer un ticket taggué en &lt;code class=&quot;highlighter-rouge&quot;&gt;wontfix&lt;/code&gt;. Dans le même temps les utilisateurs experts les plus investis dans votre produit sont ceux qui se feront le plus entendre. Ajouter un paramètre c’est facile. Planquer ce paramètre dans les profondeurs d’un onglet “Paramètres avancés” est encore plus simple. Ne cédez pas à la tentation de vouloir faire ressembler toujours un peu plus votre produit à une cabine de pilotage.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : GitHub supportait à l’origine cinq interpréteurs de Markdown, chacun avec ses propres singularités. Les donnés ont montré que &lt;a href=&quot;https://github.com/blog/2136-a-look-behind-our-decision-to-standardize-on-a-single-markdown-engine-for-github-pages&quot;&gt;97% des utilisateurs utilisaient l’interpréteur par défaut&lt;/a&gt;. Supprimer les quatre autres moteurs de rendu nous a permis de faciliter l’expérience utilisateur et de développer des fonctionnalités plus impactantes, plutôt que de maintenir une compatibilité ascendante.&lt;/p&gt;

&lt;h2 id=&quot;buvez-votre-propre-champagne&quot;&gt;3. &lt;em&gt;Buvez votre propre champagne&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Il existe des exemples de bons produits qui n’ont pas été utilisés quotidiennement par les équipes qui les ont développés. Et d’abord, pourquoi voudriez-vous soumettre vos utilisateurs à une expérience que vous n’estimez pas suffisante pour satisfaire vos propres besoins (ou que vous ne connaissez pas assez bien car vous n’avez pas rencontré le problème vous-mêmes) ? Mangeriez-vous dans un restaurant dans lequel le chef ne veut pas manger ou dont il n’a pas goûté la nourriture ? Quand vous utilisez un produit tous les jours, chaque défaut, chaque fonctionnalité manquante, chaque recoin bancal de votre application devient une forme passive d’auto-flagellation, du moins jusqu’à ce que vous ne les corrigiez. Sans parler du fait que cela vous permet de tester une fonctionnalité à l’état brut, avant de la soumettre aux utilisateurs. Goûtez à votre propre tambouille, comme on dit souvent ou “buvez votre propre champagne” comme je préfère dire, cela vous procure un sentiment d’empathie inégalable envers les utilisateurs, un niveau de compréhension que vous ne fournira jamais aucun groupe de discussion ou d’étude de marché.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : Chez GitHub, non seulement beaucoup d’employés de GitHub utilisent GitHub Pages pour héberger leur propre site ou leur blog, mais nous encourageons les autres équipes à utiliser GitHub Pages aussi souvent qu’elles le peuvent. Les utilisateurs bénéficient indubitablement des meilleurs tests sur divers cas de figures. Nous avons ajouté le plugin &lt;a href=&quot;https://github.com/jekyll/jekyll-seo-tag&quot;&gt;Jekyll SEO Tag&lt;/a&gt; depuis un petit moment déjà. Le plugin insère automatiquement des métadonnées pour que les moteurs de recherches puissent mieux indexer votre site. Quand nous l’avons autorisé pour GitHub Pages, nous ne l’avons pas annoncé. Au lieu de ça, nous l’avons d’abord utilisé en interne pour des sites GitHub comme  &lt;code class=&quot;highlighter-rouge&quot;&gt;desktop.github.com&lt;/code&gt;, pour voir s’il était performant, puis nous l’avons ajouté à la gem&lt;sup id=&quot;fnref:Gem&quot;&gt;&lt;a href=&quot;#fn:Gem&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; GitHub Pages pour que les utilisateurs téméraires puissent expérimenter avec, avant de finalement communiquer publiquement dessus.&lt;/p&gt;

&lt;h2 id=&quot;optimisez-pour-le-cas-dutilisation-idal-pas-le-cas-le-plus-courant&quot;&gt;4. Optimisez pour le cas d’utilisation idéal, pas le cas le plus courant&lt;/h2&gt;

&lt;p&gt;Si un utilisateur peut faire quelque chose avec votre produit, il le fera. Cela crée beaucoup d’usages inattendus et de demandes de nouvelles fonctionnalités auxquelles vous n’aviez pas pensé. Indépendamment de la façon dont est vraiment utilisé, guidez les utilisateurs dans la bonne direction. Encouragez les à faire ce que vous voulez qu’ils fassent. Cela se traduira par proposer des fonctionnalités qui prennent en charge votre cas idéal, pas le plus courant, celui utilisé par la majorité de vos utilisateurs, ou ceux qui se manifestent le plus.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : GitHub Pages est utilisé pour différentes choses, pour des applications de statut automatisé mais aussi des boulangeries locales. C’est prévu pour être utilisé par des personnes, des organisations et des projets. Au lieu d’investir dans des scénarios d’usage non liés à GitHub, nous avons simplifié la publication de métadonnées sur votre activité sur GitHub, comme la liste des projets open-source les plus populaires de vos organisations, même si ce scénario d’usage n’était pas populaire lors de l’introduction de la fonctionnalité.&lt;/p&gt;

&lt;h2 id=&quot;laissez-les-utilisateurs-faire-les-changements&quot;&gt;5. Laissez les utilisateurs faire les changements&lt;/h2&gt;

&lt;p&gt;Une fois que vous avez ajouté une fonctionnalité, vous avez passé un contrat implicite à vie avec l’utilisateur, un contrat qui vous demande de prendre en charge cette fonctionnalité pour toujours. Parfois les choses doivent changer. Vous voulez revoir le design. Ce n’est plus la direction dans laquelle vous souhaitez vous engager. C’est trop dur à prendre en charge. Seule une infime partie de vos utilisateurs l’utilisent. Quelqu’en soit la raison, ne cédez pas à la tentation de couper l’herbe sous le pied de vos utilisateurs. Expliquez &lt;em&gt;pourquoi&lt;/em&gt; vous faites ce changement, avertissez-les au préalable, indiquez leur comment se mettre à jour et laissez-les faire les corrections, plutôt que de les faire à leur place (et par la même de risquer une violation du contrat du produit)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : Dans le cas de GitHub Pages, nous voyons souvent se produire ce genre de situation lors mises à jour de dépendances majeures, surtout quand elles impliquent des changements inévitablement non rétro-compatibles. Quand un utilisateur fait un changement qui casse son site, c’est frustrant, mais il peut toujours le corriger à son rythme (et comprendre par là même l’origine du problème). Quand des changements généralisés cassent le même site en douce, c’est juste frustrant.&lt;/p&gt;

&lt;h2 id=&quot;fournissez-toujours-un-exemple&quot;&gt;6. Fournissez toujours un exemple&lt;/h2&gt;

&lt;p&gt;Je ne me rappelle plus la dernière fois que j’ai lu un guide utilisateur, qu’il concerne un objet, un logiciel ou autre chose. Il serait vain de croire que votre utilisateur a lu votre documentation, surtout si elle n’a pas évoluée depuis qu’il a commencé à utiliser votre produit il y a six mois, un an ou cinq ans déjà. Préférez plutôt fournir un bouton bien visible pour l’inciter à aller consulter la documentation, à chaque fois que vous communiquez avec vos utilisateurs, que ce soit via une aide pour utiliser une case à cocher dans les paramètres, un message d’erreur ou un article de blog annonçant une nouvelle fonctionnalité. Quand vous ne le faites pas, vous conduisez vos utilisateurs dans une impasse, qui aura pour effet de générer de la frustration et l’ouverture en dernier recours d’un nouveau ticket de support ou d’une demande d’aide. Pour chaque interaction, indiquez toujours la prochaine étape à l’utilisateur sous la forme d’une URL.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : Chaque fois que vous recevez une notification d’échec de compilation ou un avertissement de la part de GitHub, nous avons des tests d’intégration continue en place pour nous assurer non seulement que le lien pointe vers la documentation adéquate (et donc vers les corrections à appliquer) mais aussi que ce lien est toujours valide. En plus de cela, la plupart des interfaces de GitHub Pages ont des liens implicites ou explicites vers la documentation adéquate quand nous repérons une erreur.&lt;/p&gt;

&lt;h2 id=&quot;soyez-aussi-lger-que-possible&quot;&gt;7. Soyez aussi léger que possible&lt;/h2&gt;

&lt;p&gt;S’il y a une solution plus simple et que vous ne l’utilisez pas, vous êtes en train de faire des choses trop compliquées. Jetez un œil aux outils existants (pensez open-source), services (pensez APIs RESTful) et aux pratiques (pensez normes communes) avant de créer la votre. Des applications plus simples, moins complexes, avec moins de parties changeantes, sont plus faciles à faire évoluer, plus facile à maintenir et ont potentiellement moins de points de défaillance. Sans parler du fait que commencer avec une solution légère vous permet de vous reposer sur l’expérience des autres et de valider individuellement tout nouvelle hypothèse très tôt. Vous évitez ainsi un trop gros investissement technique où il sera très difficile de corriger le tir ou dont le coût sera prohibitif. Dit autrement, ne réinventez pas des parties de la roue, sauf si vous n’avez pas d’autre choix. Concentrez-vous sur l’ajout de valeur, qui est a priori censé être votre cœur de métier.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : Pendant ses six premières années d’existence, GitHub Pages était un simple script shell d’une centaine de lignes et les sites générés étaient servis par deux serveurs Nginx standards. Ça a marché pour près d’un million de sites, mais au fur et à mesure que les choses ont évolué, nous avons fini par devoir ajouter plus de complexité, mais cette complexité n’était pas nécessaire au départ et était minimale une fois qu’elle l’était devenue.&lt;/p&gt;

&lt;h2 id=&quot;itrez-itrez-itrez&quot;&gt;8. Itérez, Itérez, Itérez&lt;/h2&gt;

&lt;p&gt;Si vous n’avez pas honte de la première version de votre produit, c’est que vous l’avez lancé &lt;a href=&quot;http://www.businessinsider.com/the-iterate-fast-and-release-often-philosophy-of-entrepreneurship-2009-11#ixzz2U7lGAS2A&quot;&gt;trop tard&lt;/a&gt;. Pas besoin que ce soit parfait ou complet. Ça ne devrait pas l’être pour tout dire. Publiez tôt, publiez souvent. Pour reprendre une phrase célèbre chez les techos, ne laissez pas le mieux être l’ennemi du bien (ou de l’apprentissage par la validation). Livrez ce que vous pouvez, commencez petit et montez en puissance jusqu’à la destination de votre choix. Si vous pouvez livrer une petite itération faites-le. Si vous pouvez livrer à un ensemble plus restreint de parties prenantes en interne, encore mieux. Observez comment les clients perçoivent les choses et adaptez-vous en conséquence. Soyez transparents, répondez aux attentes. Laissez évoluer votre vision. Quand c’est possible, vous devriez sortir publiquement une version 0.1, pas 1.0.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : Le support d’HTTPS pour GitHub Pages est une des fonctionnalités les plus demandées. Supporter HTTPS pour plus d’un million de sites n’est pas une mission d’ingénierie insignifiante, cela demande des changements à plusieurs niveaux dans l’infrastructure technique. Bien que nous prévoyons éventuellement de supporter HTTPS pour les noms de domaines personnalisés, nous avons livré les changements de manière progressive sur le réseau, le répartiteur de charge, l’application et les différents routeurs pour supporter HTTPS pour les sites en &lt;code class=&quot;highlighter-rouge&quot;&gt;github.io&lt;/code&gt; (en gardant le support de domaine personnalisé en tête) puis validé que ces changements fonctionnaient comme prévus, en espérant nous baser sur ces livraisons pour avancer.&lt;/p&gt;

&lt;h2 id=&quot;poussez-la-logique-jusquau-bout&quot;&gt;9. Poussez la logique jusqu’au bout&lt;/h2&gt;

&lt;p&gt;Quand on travaille dans le domaine de la technologie, les processus lourds et centralisés reposant sur des personnes sont rarement adaptés. Lorsque vous concevez des systèmes, éviter les points individuels de défaillance, que ce soit en ligne ou hors-ligne, qui servent le plus souvent d’inhibiteurs. Au contraire automatisez (ou éliminez) tout ce que vous pouvez. En d’autres termes, ne forcez pas un être humain à faire ce qu’un ordinateur peur faire à sa place, ou comme j’aime à le répéter, “éliminez tous les humains”. Quand l’automatisation n’est pas possible, décentralisez l’autorité et responsabilisez les communautés pour qu’elles puissent devenir autonomes  en déléguant les décisions au maximum. Ayez confiance dans les gens. Plutôt que de créer une équipe entière à la gestion d’un process ou d’une tâche, encouragez les écosystèmes techniques, légaux et culturels. Et plus que tout, avec les ordinateurs et les gens, n’ajoutez pas de &lt;a href=&quot;https://en.wikipedia.org/wiki/Lock_(computer_science)&quot;&gt;verrous opérationnels&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Exemple&lt;/em&gt; : Si vous voulez configure un domaine personnalisé avec GitHub Pages, vous devez configurer les paramètres DNS de votre domaine, une tâche potentiellement complexe et déconcertante. Pendant les sept premières années d’existence de GitHub Pages, si votre domaine était mal configuré, vous deviez envoyer un mail au support de GitHub, qui à son tour, devait souvent demander de l’aide à l’équipe de GitHub Pages. Nous avons préféré automatiser les diagnostics que nous faisions habituellement, en créant la &lt;a href=&quot;https://github.com/github/pages-health-check&quot;&gt;Gem GitHub Pages Health Check&lt;/a&gt;, dévoilant ces vérifications directement aux utilisateurs (sans qu’ils aient à contacter le support) et pour l’équipe de support sous la forme de ChatOps et de ce que vous appelons des &lt;em&gt;stafftools&lt;/em&gt; (sans avoir à contacter l’équipe de GitHub Pages). Cela permet une (auto-)résolution plus rapide des mauvaises configurations de DNS et aujourd’hui cet outil est open-source, ce qui signifie que les utilisateurs peuvent améliorer la détection de divers cas limites.&lt;/p&gt;

&lt;h2 id=&quot;partagez-autant-que-possible&quot;&gt;10. Partagez autant que possible&lt;/h2&gt;

&lt;p&gt;Les obstacles à la libre circulation de l’information créent des frictions, réduisent l’effervescence d’idées et le plus souvent en restreignant notre propre capacité à communiquer, vous finissez par vous tirer une balle dans le pied. C’est vrai en interne comme en externe. Quand c’est possible, partagez l’information autant que vous pouvez. Soyez ouverts par défaut. Cela signifie que vous devriez privilégier les standards ouverts, les formats ouverts et les systèmes ouverts aux solutions sur mesure, personnalisés ou uniques. Pour faciliter cela, préférez les normes sociales et culturelles aux contraintes techniques. Capturez et exposez le process de toute ce que vous faites. Ne le verrouillez pas à moins que vous n’ayez pas d’autre choix. Mieux encore, encouragez les autres à contribuer.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Example&lt;/em&gt; : Nous avions une implémentation interne pour le recueil de métadonnées d’un site GitHub Pages. Résultat, les utilisateurs ne pouvaient pas bénéficier de cette expérience localement quand ils prévisualisaient leur site, malgré le fait qu’il n’y avait rien de propriétaire à notre approche. Nous avons crée un plugin open-source pour répliquer cette expérience et nous avons fini par utiliser exclusivement cette implémentation. Résultat, l’environnement de développement local des utilisateurs se rapproche au plus près de celui de leur site en ligne et les anomalies sont détectées plus vite et corrigées lorsqu’elles sont découvertes.&lt;/p&gt;

&lt;p&gt;GitHub Pages est loin d’être parfait, mais j’ai beaucoup appris en passant les trois dernières années à hacker un même produit (une éternité en années techniques) et davantage en hackant un projet open-source et des projets gouvernementaux auparavant. Ce sont les leçons que j’ai tirées de ce qui marche et, plus important, de ce qui ne marche pas. Cela m’a appris ce que je pense être le meilleur moyen de développer des produits, mais je suis sur qu’il y a encore beaucoup, beaucoup plus à apprendre. Quelles sont les règles qui dictent comment vous abordez un produit (ou comme je le pensais auparavant, un projet open-source) ?&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:Gem&quot;&gt;
      &lt;p&gt;nom donné aux paquets logiciels dans l’écosystème du langage Ruby &lt;a href=&quot;#fnref:Gem&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">Quand vous baignez dans l’open-source, vous finissez par vous imprégner d’une certaine culture. Pas seulement celle de collaborer et de travailler en toute transparence à la vue de tous, mais aussi celle de savoir collaborer efficacement en toute autonomie dans l’optique de livrer le meilleur produit. De cette émulation naît la qualité et l’innovation. On retrouve ces valeurs et cette culture dans les start-ups qui ont développé leurs produits à partir de l’open-source et qui en sont par la suite devenus des acteurs majeurs comme c’est le cas de Google (Angular), de Facebook (React) ou de GitHub (Jekyll). Quels sont donc les secrets pour développer un bon produit ? C’est ce que partage avec nous @benbalter, contributeur open-source invétéré et en charge de GitHub Pages, le service d’hébergement gratuit de sites web de GitHub.</summary></entry><entry><title type="html">Traitement de texte multicanal</title><link href="http://frank.taillandier.me/2016/08/28/traitement-de-texte-multicanal/" rel="alternate" type="text/html" title="Traitement de texte multicanal" /><published>2016-08-28T00:00:00+02:00</published><updated>2016-08-28T00:00:00+02:00</updated><id>http://frank.taillandier.me/2016/08/28/traitement-de-texte-multicanal</id><content type="html" xml:base="http://frank.taillandier.me/2016/08/28/traitement-de-texte-multicanal/">&lt;p&gt;Comme je l’expliquais dans &lt;a href=&quot;/2016/03/08/les-gestionnaires-de-contenu-statique/&quot;&gt;la mouvance statique&lt;/a&gt;, il est important de bien choisir le format de fichier dans lesquels nous allons stocker nos écrits. C’est souvent  la solution la plus simple qui est aussi la plus efficace : du texte brut mise en forme à l’aide d’une syntaxe elle aussi en texte brut. Markdown est de ce fait un format de fichier de plus en plus populaire car il assure une pérennité et une compatibilité à nos documents, tout en préservant une mise en forme au format texte. Markdown est le format par défaut des contenus dans la plupart des générateurs de site statique et il devrait devenir aussi le format par défaut dans lequel vous rédigez vos notes, vos rapports, vos articles de blog ou vos livres.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;p&gt;Il existe de nombreux éditeurs de Markdown, j’utilise personnellement selon le contexte l’éditeur &lt;a href=&quot;https://atom.io/&quot;&gt;Atom&lt;/a&gt; et &lt;a href=&quot;https://github.com/zhuochun/md-writer&quot;&gt;quelques&lt;/a&gt; &lt;a href=&quot;https://github.com/lloeki/linter-markdownlint&quot;&gt;plugins&lt;/a&gt; ou &lt;a href=&quot;https://ia.net/writer&quot;&gt;iA Writer&lt;/a&gt; pour m’y aider.&lt;/p&gt;

&lt;p&gt;Les concepteurs d’iA Writer ont rédigé un essai sur l’importance d’utiliser des formats texte comme Markdown. Markdown n’est pas le seul, il y en a d’autres comme reStructuredText, Textile ou Asciidoc mais la popularité de Markdown est grandissante depuis quelques années.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/img/2016/08/tendance-markdown.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Tendance des recherches du terme Markdown dans Google&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Aussi ai-je pensé que la lecture instructive de cet essai, qui revient sur les enjeux et les problématiques auxquels nous sommes tous confrontés quand il s’agit de migrer des contenus textuels devrait vous intéresser.&lt;/p&gt;

&lt;p&gt;J’espère que ce texte vous donnera envie de tester et d’adopter Markdown, de trouver les outils d’édition qui vous conviennent le mieux et surtout que vos écrits ne dépendront plus de formats qui les emprisonnent.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;traduction-de-lessai-multichannel-text-processinghttpsianetknow-howmultichannel-text-processing-paru-chez-information-architectshttpsianet&quot;&gt;Traduction de l’essai &lt;a href=&quot;https://ia.net/know-how/multichannel-text-processing&quot;&gt;Multichannel Text Processing&lt;/a&gt; paru chez &lt;a href=&quot;https://ia.net/&quot;&gt;Information Architects&lt;/a&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Du bon vieux temps des traitements de texte, le texte prenait vie entre MS Word et une imprimante. Aujourd’hui, le texte est écrit et édité sur différents appareils et applications, puis envoyé par mail, imprimé, copié, collé, annoté, publié, indexé dans des flux RSS, partagé et re-partagé à l’aide de tout un tas d’outils et de plateformes. Les formats de fichiers propriétaires rigides sont voués à l’échec dans ce nouvel environnement frénétique. Le texte brut s’en sort mieux, mais il n’offre pas les possibilités de mise en forme du texte enrichi. Markdown pourrait bien être notre remède miracle. Si seulement, il avait l’air un peu plus attractif !&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;le-texte-enrichi&quot;&gt;1. Le texte enrichi&lt;/h3&gt;

&lt;p&gt;Le texte enrichi comme MS Word ou le format &lt;code class=&quot;highlighter-rouge&quot;&gt;.rtf&lt;/code&gt; sont devenus populaires en faisant la promesse du WYSIWYG (What You See Is What You Get). Nous pouvons utiliser le gras, l’italique, différentes polices ou mises en forme et nous voyons immédiatement le résultat sur notre écran ! Lors de son apparition ce fut une véritable révolution comparé aux encombrants éditeurs qui affichaient des fenêtres de formatage de code ou à ceux qui ne proposaient pas de mise en forme du tout. Cependant, il y a quelques inconvénients.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://ia.net/content/4-know-how/20160610-multichannel-text-processing/plain-text-vs-rich-text-plain-text.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Comparaison des deux formats de fichier&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Au format texte brut, le texte &lt;em&gt;est&lt;/em&gt; la source. Avec le texte enrichi, ce que nous voyons est une simulation. Ce que nous voyons peut nous plaire, mais sous la surface, notre traitement de texte génère en secret un texte encodé bien plus complexe. Vous pouvez visiter ce monde enfoui en créant un document Pages ou Word, tapez “Bonjour monde” et sauvegardez, puis changez l’extension de fichier en &lt;code class=&quot;highlighter-rouge&quot;&gt;.zip&lt;/code&gt; et décompressez l’archive. Bienvenue en 1979 !&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://ia.net/content/4-know-how/20160610-multichannel-text-processing/hello-world.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Contenu d'un fichier Word&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Si vous êtes assez téméraires pour aller inspecter le contenu du dossier généré, vous allez peut-être commencer à vous demander si vous avez tapé “Bonjour monde” ou “Bonjour l’enfer” :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ia.net/content/4-know-how/20160610-multichannel-text-processing/hello-hell.png&quot; alt=&quot;fenêtres montrant du code source de fichiers texte au format XML&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Les formats personnalisés sont plus lourds que les formats en texte brut. Le souci majeur de ces formats personnalisés est que la relation entre le code source et le texte — entre ce que nous voyons et ce que nous ne voyons pas — est fantasque. Voici ce que vous obtenez vraiment quand vous travaillez avec ces formats en 2016 :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Des bugs et des problèmes d’ergonomie&lt;/strong&gt; Comment sortir d’une liste ou supprimer une indentation ? Comment supprimer un lien ? Comment supprimer cette mise en gras, cet espacement de ligne ou cette taille de titre ? Et comment diable placer deux images côte à côte ? Parfois on ne sait plus très bien si nous sommes face à une anomalie ou une erreur d’ergonomie du logiciel.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Spaghettis de copier-coller&lt;/strong&gt; Le principal souci avec les formats personnalisés dans un environnement de publication multicanal est qu’ils empêchent le copier-coller. Nous copions un simple paragraphe à partir d’un fichier PDF et quand on le colle dans notre email, le texte en français se transforme en Western spaghetti italien dramatique avec tout un tas d’espaces et de retours à la ligne. Et cela ne concerne pas que le PDF. Avec le texte formaté nous ne savons jamais ce que nous obtiendrons lorsque nous allons coller notre texte.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Compatibilité&lt;/strong&gt; Bien que le &lt;code class=&quot;highlighter-rouge&quot;&gt;.rtf&lt;/code&gt; soit un format assez établi et que la plupart des traitements de texte lisent les &lt;code class=&quot;highlighter-rouge&quot;&gt;.docx&lt;/code&gt;, des  applications diverses interpréteront ces formats différemment. Vous ne pouvez pas ajouter de texte au format RTF ou Docx de manière fiable dans votre CMS. Et n’imaginez même pas pouvoir aller et venir à votre aise d’un CMS à un document Word.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Versions&lt;/strong&gt; Exporter se fait peut être &lt;em&gt;en un clic&lt;/em&gt;, mais décliner votre texte en plusieurs versions complique votre processus de travail. Les retours ou les propositions de modification ne peuvent pas être incorporés facilement dans un fichier principal. Gérer ces versions devient rapidement un cauchemar.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Accessibilité&lt;/strong&gt; Le format texte enrichi ne vous permet pas de toucher à la source de votre document. Peut-être que le texte est dans un dossier qui prétend être un fichier ou caché quelque part “à l’abri de l’utilisateur”, enfoui dans les profondeurs de dossiers de code spaghetti ou chiffré dans le Fort Know d’une base de données secrète.&lt;/p&gt;

&lt;p&gt;Bien entendu, en tant qu’homme d’affaires vous aimez les chaînes dorées des formats personnalisés. En tant que personne qui écrit du texte en 2016, en utilisant différents appareils, applications, plateformes et formats, vous ne les aimez pas du tout. Après tout, qui sait quel sera notre ressenti vis à vis des &lt;code class=&quot;highlighter-rouge&quot;&gt;.docx&lt;/code&gt; dans 10 ans ? Et dans 30 ans ?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Même si les logiciels de traitement de texte modernes peuvent faire des trucs super — comme ajouter des graphiques, des tableaux et des images, en appliquant des styles sophistiqués —  il y a une chose qu’ils ne savent pas faire : garantir que les mots que j’écris aujourd’hui seront encore lisibles dans dix ans. C’est une des raisons pour lesquelles je préfère travailler en texte brut : c’est éternel. Mes petits-enfants pourront lire un fichier texte que j’ai écrit aujourd’hui, longtemps après que quelqu’un se souvienne ce que diable est un fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;.dotx&lt;/code&gt; &lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Dans l’environnement de texte multicanal d’aujourd’hui le format de fichier texte enrichi crée plus de barrières qu’à l’époque où les choses étaient plus simples. Le fait de devoir installer une certaine version d’une application sur une certaine version d’un système d’exploitation pour ouvrir un fichier est une vaste fumisterie. Pour pouvoir être partagé entre différentes applications et plateformes, le texte lui-même doit être libéré des carcans d’une application, d’une plateforme ou d’un appareil.&lt;/p&gt;

&lt;h2 id=&quot;le-texte-brut&quot;&gt;2. Le texte brut&lt;/h2&gt;

&lt;p&gt;Le seul format de fichier qui fonctionne partout comme prévu, c’est pas de format du tout, en d’autres termes : du texte brut. Et c’est de tout ce dont nous avons besoin pour écrire nos premiers brouillons.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Le texte brut désigne des mots séparés par des espaces, des phrases séparées par des points, des paragraphes séparés en général par une seul retour à la ligne. Si vous travaillez dans l’édition ou même dans l’édition en ligne, c’est souvent tout ce dont vous avez besoin.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Le texte brut est simple. Il vous aide à vous concentrer ce que vous voulez dire.&lt;/p&gt;

&lt;p&gt;Le texte brut est gratuit. TextPad, TextEdit, Vim, votre téléphone cellulaire, l’application AOL Mail 1997 de votre oncle… pas besoin de sortir le porte-monnaie.&lt;/p&gt;

&lt;p&gt;Le texte brut est léger.&lt;/p&gt;

&lt;p&gt;Le texte brut s’écoule comme de l’eau. Mais contrairement à l’eau, il n’étanche pas toutes les soifs. Que ce soit pour l’impression, un article de blog, un PDF, un email ou même un fax, à un moment ou à un autre, le texte va devoir prendre forme sur un médium approprié pour être lu. Comme nos mots prennent forme à l’intérieur d’un medium, ils exigent une structure visuelle. Les documents d’entreprise ont besoin d’en-têtes, de pieds de page et de pages de couverture. Certains textes ne prennent vie que lorsque ils sont illustrés et enrichis avec des photos, des vidéos ou des tableaux. Nous voulons des liens quand nous écrivons en ligne. Nous avons besoin de notes de bas de page dans un livre blanc.&lt;/p&gt;

&lt;p&gt;La transition du texte brut au texte formaté est généralement brusque et irréversible. Vous écrivez dans TextEdit ou Notepad, mais une fois que vous vous passez en RTF, docx ou HTML il n’y a plus de retour en arrière possible. Mais le texte veut naturellement et lentement se transformer à partir de simples mots en de la prose formatée . C’est là que Markdown entre en scène.&lt;/p&gt;

&lt;h2 id=&quot;markdown&quot;&gt;3. Markdown&lt;/h2&gt;

&lt;p&gt;Les langages de balisage, comme Markdown, MediaWiki ou LaTeX, vous permettent de structurer vos mots sans construire un royaume invisible sous le text brut. Hélas…&lt;/p&gt;

&lt;h3 id=&quot;markdown-a-craint-&quot;&gt;3.1 Markdown ça craint !&lt;/h3&gt;

&lt;p&gt;Vous avez peut être essayé d’écrire du Markdown ou de modifier une entrée dans Wikipédia et vous avez détesté ça, parce que vous vous demandiez “Mais pourquoi devrais-je apprendre une nouvelle ‘syntaxe’ pour formater du texte quand j’ai un outil qui fait ça en appuyant sur un bouton et qui me montre exactement ce que j’obtiendrais ?”&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; Et vous avez raison :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Baliser du texte peut vous éviter des problèmes de copier-coller mais le Markdown brut a toujours l’air compliqué,&lt;/li&gt;
  &lt;li&gt;Bien que Markdown soit plus simple que le HTML, vous devez toujours vous souvenir de la syntaxe et rechercher à chaque fois comment ajouter un lien vous sort de votre flux,&lt;/li&gt;
  &lt;li&gt;Balisage, Markdown, MultiMachin… ces formats ont leur propres problèmes de compatibilité.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Markdown n’est pas la solution parfaite pour tous les types de rédacteurs ou toutes les formes et les étapes d’écriture. Mais si vous tout faîtes vous-même, de la prise de notes à la publication, c’est la solution la plus efficace à ce jour. Si votre éditeur vous impose des outils de rédaction, Markdown est une option moins évidente. Mais encore une fois, la possibilité de pouvoir partager plus simplement qu’avec les formats de fichier traditionnels rend la collaboration considérablement plus fluide…&lt;/p&gt;

&lt;h3 id=&quot;un-plaidoyer-pour-markdown&quot;&gt;3.2 Un plaidoyer pour Markdown&lt;/h3&gt;

&lt;p&gt;Considérations esthétiques mises à part, Markdown est imbattable quand vous n’avez besoin que de &lt;strong&gt;mise en gras&lt;/strong&gt; ou d’&lt;em&gt;italique&lt;/em&gt;. Taper #, ## ou ### pour les différents niveaux de titre peut paraître un peu bizarre au début. Mais une fois appris, taper des dièses est plus simple et plus rapide que de retirer les mains de votre clavier, repérer le pointeur de la souris, sélectionner un morceau de texte et cliquer sur le menu déroulant WYSIWYG des styles pour choisir le bon niveau de titre. Et contrairement à ses satanés formats de styles, les dièses se comportent toujours comment ils le devraient.&lt;/p&gt;

&lt;p&gt;Si vous connaissez ces trois choses, *, ** et #, vous en savez assez sur Markdown pour vous lancer. Et plus vous serez à l’aise avec Markdown, moins il y aura de friction dans votre procédé global d’écriture. Voyons ensemble quelques défis plus difficiles :&lt;/p&gt;

&lt;h4 id=&quot;les-liens&quot;&gt;Les liens&lt;/h4&gt;

&lt;p&gt;Les liens Markdown peuvent complètement ruiner l’aspect de votre texte. C’est utile de voir les liens dans le texte et pouvoir se passer de clics droits et de fenêtres intrusives, mais si vous utilisez beaucoup trop de liens dans un texte, c’est affreux. Une manière de contourner le problème est d’utiliser le format des liens de références. Un autre pourrait être de masquer les liens dans l’éditeur, mais cela reviendrait à reproduire les problèmes du texte enrichi.&lt;/p&gt;

&lt;h4 id=&quot;le-multimedia&quot;&gt;Le multimedia&lt;/h4&gt;

&lt;p&gt;Avoir plus de libertés avec les images dans le texte est cool. Si vous voulez un logiciel qui permet de parfaitement mettre en page les images, utilisez InDesign, ou faites-le dans votre CMS. N’essayez pas avec Word et n’allez pas croire que votre éditeur de Markdown fera tout aussi bien qu’il vous aide à trouver vos mots. Oui, vous pouvez utiliser Markdown dans InDesign.&lt;sup id=&quot;fnref:6&quot;&gt;&lt;a href=&quot;#fn:6&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h4 id=&quot;les-tableaux&quot;&gt;Les tableaux&lt;/h4&gt;

&lt;p&gt;Les tableaux en texte brut ont mauvaise réputation. S’ils sont complexes, c’est vrai qu’ils ont l’air affreux. Mais pour quelques lignes et colonnes ils marchent bien : contrairement à Word, vous voyez exactement ce qui se passe. (Si vous faites des tableaux avancés Word est votre ennemi, utilisez toujours un tableur comme Excel ou Numbers). Ils sont pénibles à créer, mais avec un peu de magie…&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/160875330&quot; width=&quot;720&quot; height=&quot;405&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h4 id=&quot;automatisation&quot;&gt;Automatisation&lt;/h4&gt;

&lt;p&gt;Avec le format MultiMarkdown&lt;sup id=&quot;fnref:7&quot;&gt;&lt;a href=&quot;#fn:7&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; (une version améliorée de Markdown) vous pouvez créer des tables des matières automatiquement et à l’aide des variables de métadonnées vous pouvez même créer des modèles de lettres. Okay, ça a l’air hardcore. Et &lt;em&gt;c’est&lt;/em&gt; hardcore. Mais vous devriez &lt;a href=&quot;http://vimeo.com/158324329&quot;&gt;essayer&lt;/a&gt;. Vous n’avez pas besoin d’être un hacker ninja rockstar pour comprendre les bases. Et une fois que vous comprenez les bases, cela devient plus facile de &lt;a href=&quot;https://vimeo.com/158311378&quot;&gt;générer une table des matières en MultiMarkdown&lt;/a&gt; que dans MS Word.&lt;/p&gt;

&lt;h4 id=&quot;notes-de-bas-de-page&quot;&gt;Notes de bas de page&lt;/h4&gt;

&lt;p&gt;MultiMarkdown gère aussi les notes de bas de page. La syntaxe est un petit peu lourdingue comme pour les liens mais c’est aussi abscond dans les éditeurs de texte enrichi. Avec &lt;a href=&quot;https://vimeo.com/158933545&quot;&gt;un éditeur de Markdown qui propose un fonction aperçu&lt;/a&gt; vous pouvez apprendre la syntaxe tout en &lt;del&gt;écrivant&lt;/del&gt; cliquant.&lt;/p&gt;

&lt;p&gt;Plus vous maîtriserez Markdown, plus vous passerez rapidement et facilement du texte brut au texte formaté. C’est là où Markdown excelle : en comblant le fossé entre le texte brut et le texte enrichi, il vous permet de constamment modeler le texte — de la première note prise au hasard jusqu’à la publication multicanale.&lt;/p&gt;

&lt;h4 id=&quot;rendu-en-temps-rel&quot;&gt;Rendu en temps réel&lt;/h4&gt;

&lt;p&gt;Il existe différentes manières d’améliorer le rendu de Markdown, comme en en masquant certaines parties, mais si vous générez le rendu du Markdown dans le texte, WYSIWYG, vous réintroduisez tous les problèmes qui rendent les éditeurs de texte enrichi obsolètes et vous en ajoutez de nouveaux. Si vous essayez de faire tout ce que sait faire Word avec Markdown, vous allez créer un nouveau Word avec un langage qui n’est pas fait pour le WYSIWYG. C’est pour cette raison qu’iA Writer ne masque aucun caractère Markdown.&lt;/p&gt;

&lt;h2 id=&quot;un-processus-de-publication-moderne&quot;&gt;4. Un processus de publication moderne&lt;/h2&gt;

&lt;p&gt;Nous pouvons imaginer que les différentes étapes d’un procédé d’écriture comme étant composées de phases distinctes que nous pouvons contrôler et classer par ordre chronologique. En réalité, nous prenons des notes en amont de l’écriture et nous continuons d’assembler des matériaux jusqu’à la publication. L’édition commence avec le premier brouillon et — pas seulement dans les médias numériques — se poursuit bien après la publication.&lt;sup id=&quot;fnref:8&quot;&gt;&lt;a href=&quot;#fn:8&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;Distinguer les étapes d’un procédé créatif est nécessaire mais les processus de travail agiles ne ressemblent pas à une cascade : ils se chevauchent, interagissent, s’influencent mutuellement et notre écriture et nos outils de publication devraient nous permettre d’aller et venir comme nous le souhaitons.&lt;sup id=&quot;fnref:9&quot;&gt;&lt;a href=&quot;#fn:9&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt; L’écriture est espiègle par nature.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://ia.net/content/4-know-how/20160610-multichannel-text-processing/workflow-note-draft-edit-publish.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Écrire en étant concentré ne veut pas dire écrire avec des œillères, cela signifie que votre attention est principalement dirigée sur un seul aspect du procédé global. Il peut être même utile d’aller et venir consciemment entre deux étapes voisines. Markdown vous permet de ne pas vous soucier de ces transitions.&lt;/p&gt;

&lt;h2 id=&quot;crire-et-prvisualiser&quot;&gt;4.1 Écrire et prévisualiser&lt;/h2&gt;

&lt;p&gt;Aller et venir entre les différentes étapes d’un procédé est nécessaire et rafraîchissant. Si vous aimez travaillez dans un éditeur WYSIWYG ou imprimer votre texte de temps en temps, ou regarder l’aperçu sur votre blog avant de publier, vous savez déjà que : un formatage défini nous aide à nous mettre à la place du lecteur du texte. Voir notre texte imprimé change la perception que nous avons de lui. Vous obtenez le même effet quand vous sortez du Markdown pour aller regarder l’aperçu du rendu de votre texte en HTML.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://ia.net/content/4-know-how/20160610-multichannel-text-processing/markdown-with-preview-plain-text.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Écrire et prévisualiser&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;L’effet n’est peut être pas aussi frappant que le passage de l’écran au papier, mais il laisse entrevoir la forme du texte à venir. Avec le sentiment de la façon dont un lecteur verra votre texte, vous pouvez revenir à votre texte avec des yeux neufs. C’est plus rapide car cela évite l’exercice chronophage de devoir retaper les corrections manuscrites.&lt;/p&gt;

&lt;p&gt;Le passage conscient entre le texte brut et le texte formaté vous laisse imaginer comment le texte sera lu par une personne externe.&lt;/p&gt;

&lt;h3 id=&quot;modifier-et-publier&quot;&gt;4.2 Modifier et publier&lt;/h3&gt;

&lt;p&gt;Le même changement de perspective se produit quand vous passez de la vue back-end de votre texte à la vue front-end — après avoir migré le contenu dans votre CMS.&lt;/p&gt;

&lt;p&gt;Si vous écrivez déjà vos textes en Markdown, assurez vous que vos outils de publication vous permettent d’éditer le texte brut sans perdre toute la mise en forme. Vous n’avez pas besoin de passer à un CMS basé sur des fichiers Markdown. Si vous utilisez Wordpress, vous pouvez utiliser un plugin Markdown pour l’éditeur. Ça aide si les applications que vous utilisez permettent la publication sur différentes plateformes tout de go. C’est pour cela qu’&lt;a href=&quot;https://ia.net/writer&quot;&gt;iA Writer&lt;/a&gt; vous permet de publier directement sur Wordpress et Medium :&lt;/p&gt;

&lt;iframe src=&quot;https://player.vimeo.com/video/164238502&quot; width=&quot;720&quot; height=&quot;405&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Publier directement depuis votre application d’écriture est cool. Mais l’important c’est de pouvoir copier-coller votre texte ici et là sans perdre votre  travail. À moins que vous ne soyez un génie du procédé de travail, vous aurez toujours besoin d’ajouter quelques touches finales dans Indesign, Wordpress ou Pages. À quoi bon utiliser un outil de publication qui ne vous laisse pas faire les choses qu’un traitement de texte ne sait pas faire ?&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Nous utilisons différents appareils pour prendre des notes, différentes applications pour créer des brouillons et faire des modifications, nous envoyons du texte à d’autres personnes et nous utilisons différentes plateformes pour mettre en forme et publier nos textes. Le procédé de production et la forme finale de notre texte sont plus difficiles à anticiper. Nous avons besoin de quelque chose de mieux que les formats de texte traditionnels, qui nous enferment dans un cadre format/application/plateforme/appareil défini, pour faire face à la réalité complexe d’aujourd’hui pour ce qui est de la mise en forme et de la publication.&lt;/p&gt;

&lt;p&gt;De par son universalité et sa simplicité, le texte brut nous emmène plus loin que tout autre type de format. Et pourtant, les éditeurs de texte brut ne sont pas fait pour visualiser la structure du texte, optimiser des mises en page complexes, batailler avec des détails typographiques ou lier entre eux des corps de texte. Ils sont géniaux pour vous aider à trouver les bons mots, mais ont du mal lorsque le texte devient plus long. Un procédé d’écriture contemporain doit nous permettre d’aller et venir librement entre le text brut et le texte mis en forme, grâce à des processus de travail automatisés ou du copier-coller.&lt;/p&gt;

&lt;p&gt;Pour le moment les langages de balisage légers comme Markdown sont les seuls à permettre cela. Markdown peut avoir l’air un peu brouillon et oui, tout un tas d’améliorations sont possibles et nécessaires. Malgré ces lacunes, il résout des problèmes méthodiques complexes, là où la séparation entre le texte brut et le texte mis en forme échoue. Cela nous permet de pouvoir utiliser notre texte et le fichier qui le contient partout, indépendamment de l’appareil, de la plateforme ou de l’application. Le moment où vous passez du texte à la mise en forme, du conditionnement au contenu, du corps de texte à la mise en page, doit être une phase où vous pouvez aller et venir à votre guise. Markdown rend cela possible.&lt;/p&gt;

&lt;p&gt;Si vous vous voulez des mises en forme plus complexes comme les liens, les images, les notes de bas de page et une table des matières, utilisez l’interface ou les raccourcis clavier. Pour améliorer vos compétences en Markdown avec la syntaxe plus avancée, faites vous aider par un éditeur qui propose un aperçu en temps réel. Cela vous donne aussi un aperçu de la mise en forme très tôt et vous permet d’utiliser un balisage plus complexe car vous pouvez identifier rapidement n’importe quelle erreur.&lt;/p&gt;

&lt;p&gt;L’automatisation entre un service en ligne, une application de prise de notes, un éditeur de texte et un environnement de publication est cool, mais pas essentiel. Ce qui est fondamental, c’est la capacité de pouvoir  copier-coller votre texte à loisir sans perdre de mise en forme ou d’information. Seul le format texte brut garantie cela. Configurez vos plateformes de publication pour interpréter le Markdown, de manière à pouvoir vous balader librement entre l’écriture, la modification et la publication. Il y a plusieurs manières et plusieurs applications pour y parvenir. Et c’est précisément l’idée. Le texte brut est léger et gratuit et doit le rester. Évitez les applications qui veulent vous enchaîner.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://ia.net/content/4-know-how/20160610-multichannel-text-processing/appleiigsandimagewriterii.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Pourquoi 1979? “Le 29 novembre 1979, le terme ‘Microsoft’ était prononcé pour la première fois par Bill Gates” (Source &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_Microsoft&quot;&gt;Wikipedia, L’histoire de Microsoft&lt;/a&gt;). Mais ce n’est pas tout : “c’est clairement une date de création bidon – ça devrait surprendre les spécialistes du support que les mécréants puissent modifier l’heure MAC des fichiers sur le système de fichier après qu’ils aient été crées avec des outils librement accessibles conçus pour cette tâche. La chose intéressante ici c’est que cette date est 1 jour avant la plus vieille date avec laquelle on peut faire une recherche dans l’interface de recherche graphique de Windows. Essayez de taper sur F3 ou allez dans Démarrer –&amp;gt; Rechercher — vous ne pouvez pas spécifier de date antérieure au 1/1/1980 lorsque vous effectuez des recherches… il vous faudrait à nouveau faire votre recherche depuis une commande shell pour trouver des fichiers crées à cette date.” (Tiré de &lt;a href=&quot;https://blogs.technet.microsoft.com/robert_hensing/2005/01/10/miscreant-hiding-techniques-would-the-real-explorer-exe-please-stand-up-and-the-relevance-of-1979-when-doing-searches/&quot;&gt;Techniques de dissimulation de mécréant: est-ce que le vrai explorer.exe pourrait se lever s’il vous plait ? Et la pertinence de 1979 lorsqu’on effectue des recherches…&lt;/a&gt;) &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.macworld.com/article/1161549/forget_fancy_formatting_why_plain_text_is_best.html&quot;&gt;Pourquoi le texte brut est ce qu’il y a de mieux&lt;/a&gt; par David Sparks &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://dooling.com/index.php/2012/12/20/plain-text-for-authors-writers/&quot;&gt;Des mots, des mots, des mots&lt;/a&gt; par Richard Dooling &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://prolost.com/blog/2012/7/16/gradually-falling-in-love-with-plain-text.html&quot;&gt;Tomber petit à petit amoureux de Markdown&lt;/a&gt;, par Stu Maschwitz &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:6&quot;&gt;
      &lt;p&gt;En voici un parmi d’autres &lt;a href=&quot;http://www.jongware.com/markdownid.html&quot;&gt;markdownID: plugins d’import de Markdown pour InDesign&lt;/a&gt;. Il y a des gens assez fous pour avoir trouvé un moyen de passer de Word à Indesign. &lt;a href=&quot;http://rhythmus.be/md2indd/&quot;&gt;De Word à Markdown à InDesign : une composition entièrement automatisée&lt;/a&gt;. &lt;a href=&quot;#fnref:6&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:7&quot;&gt;
      &lt;p&gt;“MultiMarkdown est un sur-ensemble de la syntaxe Markdown, crée à l’origine par John Gruber. Il ajoute de multiples fonctionnalités à la syntaxe (tableaux, notes de bas de page et citations pour n’en citer que quelques unes) en plus des différents formats de sortie listés ci-dessus (Markdown ne génère que du HTML). De plus, il intégre une typographie ‘intelligente’ pour différentes langues (de vrais guillemets droits — et gauche — par exemple).” &lt;a href=&quot;http://fletcherpenney.net/multimarkdown/&quot;&gt;MultiMarkdown par Fletcher Penney&lt;/a&gt;. &lt;a href=&quot;#fnref:7&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:8&quot;&gt;
      &lt;p&gt;Quand nous prenons des notes, nous avons des flashs sur le futur titre avant même de penser à ce que vous voulons dire. Nous repensons inévitablement ce que nous voulons dire quand nous le retranscrivons. Nous devons faire en général des recherches supplémentaires lors des modifications et parfois nous mettons mettons en page notre texte. La mise en page peut révéler des insuffisances invisibles dans le texte. Les limitations du medium vont nous obligé à couper, réécrire ou ajouter du texte pour s’adapter à la forme : cela a un effet sain sur le style d’écriture, puisque cela nous obligé à réfléchir à ce que nous voulons vraiment dire. &lt;a href=&quot;#fnref:8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:9&quot;&gt;
      &lt;p&gt;Une des nombreuses erreurs que nous avons faites au cours de la construction de notre propre éditeur de Markdown a été de nous éprendre de l’idée qu’un processus d’écriture pouvait ou devait être séparé en plusieurs étapes et que ces étapes pouvaient être codées dans l’extension de fichier. Cette méthode fonctionne pour quelques auteurs très disciplinés mais les retours que nous avons eu sur cette configuration étaient clairs. iA Writer 3 est toujours compatible avec le précédent workflow, mais nous et la plupart de nos auteurs sont contents d’être passé à autre chose. &lt;a href=&quot;#fnref:9&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">Comme je l’expliquais dans la mouvance statique, il est important de bien choisir le format de fichier dans lesquels nous allons stocker nos écrits. C’est souvent  la solution la plus simple qui est aussi la plus efficace : du texte brut mise en forme à l’aide d’une syntaxe elle aussi en texte brut. Markdown est de ce fait un format de fichier de plus en plus populaire car il assure une pérennité et une compatibilité à nos documents, tout en préservant une mise en forme au format texte. Markdown est le format par défaut des contenus dans la plupart des générateurs de site statique et il devrait devenir aussi le format par défaut dans lequel vous rédigez vos notes, vos rapports, vos articles de blog ou vos livres.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://ia.net/content/4-know-how/20160610-multichannel-text-processing/full-multichannel-text-processing.png" /></entry><entry><title type="html">L’argumentaire commercial pour les Progressive Web Apps</title><link href="http://frank.taillandier.me/2016/08/09/argumentaire-commercial-pour-les-progressive-web-apps/" rel="alternate" type="text/html" title="L’argumentaire commercial pour les Progressive Web Apps" /><published>2016-08-09T00:00:00+02:00</published><updated>2016-08-09T00:00:00+02:00</updated><id>http://frank.taillandier.me/2016/08/09/argumentaire-commercial-pour-les-progressive-web-apps</id><content type="html" xml:base="http://frank.taillandier.me/2016/08/09/argumentaire-commercial-pour-les-progressive-web-apps/">&lt;p&gt;Vous savez peut-être &lt;a href=&quot;/2016/06/28/que-sont-les-progressive-web-apps/&quot;&gt;ce que sont les applications web progressives&lt;/a&gt;, mais outre les diverses techniques mises en œuvre pour délivrer une meilleure expérience utilisateur aux personnes qui consultent votre site web sur mobile, c’est également un enjeu commercial de taille qui va bouleverser le secteur dans &lt;del&gt;les années&lt;/del&gt; les mois qui viennent. Et même si vous doutez à juste titre de la maturité de ces technologies, vous verrez à la lecture de cet article qu’il ne faudra pas trop tarder à améliorer votre site web si vous voulez rester dans la course. Le coût est minime si votre site est déjà responsive.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;p&gt;&lt;em&gt;(Ceci est une traduction de &lt;a href=&quot;https://cloudfour.com/thinks/the-business-case-for-progressive-web-apps/&quot;&gt;l’article de Jason Grigsby&lt;/a&gt; paru sur le blog de Cloudfour.)&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;que-sont-les-progressive-web-apps-&quot;&gt;Que sont les Progressive Web Apps ?&lt;/h2&gt;

&lt;p&gt;Les Progressive Web Apps désignent un ensemble de fonctionnalités qui étaient présentes jusqu’ici seulement sur les applications natives&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Ces fonctionnalités comprennent&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;des temps de chargement extrêmement rapides,&lt;/li&gt;
  &lt;li&gt;la possibilité d’utiliser les applications en mode déconnecté (sans connexion Internet),&lt;/li&gt;
  &lt;li&gt;les notifications Push,&lt;/li&gt;
  &lt;li&gt;l’installation sur l’écran d’accueil.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maintenant que ces fonctionnalités sont disponibles en utilisant les technologies web, les fabricants de navigateurs comme Google, Opera, Firefox et Microsoft incitent les entreprises à adopter les Progressive Web Apps.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2016/07/planning-1.jpg&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Photo de &lt;a href=&quot;https://www.pexels.com/photo/creative-smartphone-desk-notebook-97987/&quot;&gt;Markus Spiske&lt;/a&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;quelles-motivations-derrire-les-progressive-web-apps-&quot;&gt;Quelles motivations derrière les Progressive Web Apps ?&lt;/h2&gt;

&lt;p&gt;Les fabricants de navigateurs ne veulent pas faire la promotion des Progressive Web Apps simplement parce que ce sont les technologies les plus récentes et les plus géniales. Ils veulent les promouvoir car les Progressive Web Apps représentent les meilleures pratiques pour développer des sites web et des applications.&lt;/p&gt;

&lt;p&gt;La plus grande motivation actuelle est que les navigateurs &lt;a href=&quot;https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android?hl=en#criteria-faq&quot;&gt;demanderont aux visiteurs&lt;/a&gt; d’&lt;a href=&quot;https://dev.opera.com/blog/web-app-install-banners/&quot;&gt;installer votre Progressive Web App&lt;/a&gt; lors de leur deuxième visite&lt;sup id=&quot;fnref:3&quot;&gt;&lt;a href=&quot;#fn:3&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;. Ce critère &lt;a href=&quot;https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android?hl=en#criteria-faq&quot;&gt;changera&lt;/a&gt; dans le futur quand les navigateurs comprendront mieux quand les gens installent des Progressive Web Apps.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2016/07/add-to-home-screen.gif&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;GIF animée de la bannière d'installation sur l'écran d'accueil dans Chrome tirée de &lt;a href=&quot;https://developers.google.com/web/updates/2015/03/increasing-engagement-with-app-install-banners-in-chrome-for-android?hl=en#criteria-faq&quot;&gt;Google Developers&lt;/a&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Et ce n’est que le début. Microsoft est en train de voir comment &lt;a href=&quot;https://blogs.windows.com/msedgedev/2016/07/08/the-progress-of-web-apps/&quot;&gt;ajouter des Progressive Web Apps sur le Windows Store&lt;/a&gt;. Google a une longue liste d’&lt;a href=&quot;https://infrequently.org/2016/06/pwa-discovery-you-aint-seen-nothin-yet/&quot;&gt;idées pour la découverte d’application&lt;/a&gt; qu’ils sont en train de creuser.&lt;/p&gt;

&lt;p&gt;Et il semble inévitable que les moteurs de recherche réservent un traitement spécial pour les Progressive Web Apps dans le futur. Vous pouvez donc considérer les Progressive Web Apps comme une préinscription pour le référencement du futur.&lt;/p&gt;

&lt;h2 id=&quot;quels-sont-les-problmes-rsolus-par-les-progressive-web-apps-&quot;&gt;Quels sont les problèmes résolus par les Progressive Web Apps ?&lt;/h2&gt;

&lt;p&gt;Les Progressive Web Apps ne font pas qu’apporter des fonctionnalités issues du natif au web. Elles règlent de vrais problèmes auxquels sont confrontés les entreprises. Des problèmes qui ont amené Recode à déclarer récemment que &lt;a href=&quot;http://www.recode.net/2016/6/8/11883518/app-boom-over-snapchat-uber&quot;&gt;le boom des apps est terminé&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;la-dcouverte-dapplication&quot;&gt;La découverte d’application&lt;/h3&gt;

&lt;p&gt;Se démarquer des plus de &lt;a href=&quot;http://www.statista.com/statistics/276623/number-of-apps-available-in-leading-app-stores/&quot;&gt;deux millions d’applications présentes&lt;/a&gt; sur l’App Store iOS ou le Google Play Store est une tâche difficile. La possibilité de convertir du référencement payant ou naturel en installations de Progressive Web App offre une meilleure perspective que la concurrence à l’attention sur les App Stores.&lt;/p&gt;

&lt;h3 id=&quot;le-ras-le-bol-de-linstallation-dapplication&quot;&gt;Le ras-le-bol de l’installation d’application&lt;/h3&gt;

&lt;p&gt;Comscore a publié il y a quelques temps &lt;a href=&quot;https://www.comscore.com/Insights/Press-Releases/2014/8/comScore-s-US-Mobile-App-Report-Available-for-Download&quot;&gt;un rapport&lt;/a&gt; qui indique que la plupart des utilisateurs de smartphones téléchargent zéro application par mois.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2016/07/us-smartphone-users-number-of-app-downloads-per-month-of-smartphone-users-new_chartbuilder-1.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Graphique du nombre de téléchargement d'applications par utilisateur par mois aux Etats-Unis&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Dan Frommer, &lt;a href=&quot;http://qz.com/253618/most-smartphone-users-download-zero-apps-per-month/&quot;&gt;résumant le rapport&lt;/a&gt; pour &lt;em&gt;Quartz&lt;/em&gt;, écrit:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Seulement environ un tiers des possesseurs de smartphone téléchargent des applications chaque mois et la majorité d’entre eux téléchargent entre une et trois applications.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bien que ce soit encore un peu tôt, les Progressive Web Apps sont conçues pour contourner cet épuisement du téléchargement d’applications pour les raisons suivantes :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Les gens découvrent les applications naturellement via des liens sur les réseaux sociaux ou en surfant sur le web,&lt;/li&gt;
  &lt;li&gt;les invitations à l’installation d’application n’apparaissent que lorsque l’application web répond à un critère défini et que la personne a montré un intérêt à travers des visites répétées,&lt;/li&gt;
  &lt;li&gt;l’installation d’application est instantanée. Le gros du travail est fait en arrière-plan la première fois que la personne visite un site,&lt;/li&gt;
  &lt;li&gt;les applications sont de taille bien plus légères car elles s’appuient sur les possibilités du navigateur,&lt;/li&gt;
  &lt;li&gt;les notifications Push, le mode déconnecté et toutes les autres fonctionnalités continuent de marcher même si la personne n’installe jamais l’application.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;la-fidlit--lapplication&quot;&gt;La fidélité à l’application&lt;/h2&gt;

&lt;p&gt;L’abandon des applications est un problème depuis les premiers jours de l’App Store et le pourcentage de personnes qui arrêtent d’utiliser des applications continue de &lt;a href=&quot;http://www.recode.net/2015/6/13/11563532/one-in-four-mobile-apps-are-abandoned-after-a-single-use&quot;&gt;croître&lt;/a&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2016/07/retention_graph_average.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Courbe de rétention moyenne pour les applications Androïd&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Andrew Chen a travaillé avec la société d’intelligence mobile Quettra pour &lt;a href=&quot;http://andrewchen.co/new-data-shows-why-losing-80-of-your-mobile-users-is-normal-and-that-the-best-apps-do-much-better/&quot;&gt;analyser les données sur la fidélité envers les applications&lt;/a&gt; :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Si on se base sur les données de Quettra, on peut voir que l’application moyenne perd 77% de ces U.A.Q (Utilisateurs Actifs Quotidien) dans les 3 premiers jours après l’installation. En l’espace de 30 jours, ella a perdu 90% de ces utilisateurs actifs. Après 90 jours, c’est plus de 95%.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Les notifications poussées aident à promouvoir l’engagement des utilisateurs et incitent les gens à revenir à l’application. &lt;a href=&quot;https://developers.google.com/web/showcase/2016/extra&quot;&gt;United eXtra Electronic&lt;/a&gt; et &lt;a href=&quot;https://developers.google.com/web/showcase/2016/jumia&quot;&gt;Jumia&lt;/a&gt; ont toutes deux vu des augmentations significatives dans la conversion et l’engagement après avoir implémenté les notifications web Push.&lt;/p&gt;

&lt;p&gt;Les notifications Push ne sont pas la panacée pour garantir la fidélité à une application. Andrew Chen met en garde contre les notifications de SPAM :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Selon moi, c’est une validation supplémentaire que le meilleur moyen d’infléchir la courbe de rétention est de viser les tous premiers jours d’utilisation et en particulier la première visite. De cette manières, les utilisateurs construisent eux-mêmes leur succès.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;C’est pour cette raison que la combinaison des notifications Push avec la re-découverte du web à travers la recherche et les réseaux sociaux est une aubaine.&lt;/p&gt;

&lt;p&gt;Les responsables produit doivent faire tout ce qu’il peuvent pour favoriser l’engagement de l’utilisateur, mais si quelqu’un abandonne, les Progressive Web Apps mettent plus d’outils à notre disposition pour les ramener via des méthodes web traditionnelles.&lt;/p&gt;

&lt;h3 id=&quot;la-porte-de-lapplication&quot;&gt;La portée de l’application&lt;/h3&gt;

&lt;p&gt;Les applications natives ne peuvent être utilisées que sur la plateforme pour laquelle elles ont été créées. Vous ne pouvez pas plus faire tourner une application iOS sur votre Mac que sur une appareil Androïd. De plus les applications natives n’avantagent que ceux qui les installent.&lt;/p&gt;

&lt;p&gt;Les Progressive Web Apps fonctionneront partout sur le web, qu’elles soient installées ou pas. Elles fonctionneront même sur des plateformes qui ne supportent pas encore toutes les fonctionnalités des Progressive Web Apps de la même manière que les vieux ordinateurs peuvent accéder aux sites web les plus récents - avec quelques technologies en moins.&lt;/p&gt;

&lt;h3 id=&quot;la-maintenance-de-lapplication&quot;&gt;La maintenance de l’application&lt;/h3&gt;

&lt;p&gt;La maintenance d’applications pour de multiples plateformes est coûteuse. Dans le futur, les Progressive Web Apps pourraient réduire ce coût en proposant une application unique qui marche sur n’importe quelle plateforme.&lt;/p&gt;

&lt;h3 id=&quot;la-libert-du-modle-conomique&quot;&gt;La liberté du modèle économique&lt;/h3&gt;

&lt;p&gt;Quand vous n’êtes pas sur l’App Store, vous n’êtes pas limités par les règles de l’App Store et vous n’avez pas à reverser 30% de vos ventes à l’App Store.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2016/07/app-store.jpg&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Photo de &lt;a href=&quot;https://www.pexels.com/photo/apple-office-internet-ipad-38544/&quot;&gt;Pixaboy&lt;/a&gt;&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;inconvnients-des-progressive-web-apps&quot;&gt;Inconvénients des Progressive Web Apps&lt;/h2&gt;

&lt;p&gt;Il existe deux inconvénients majeurs aux Progressive Web Apps :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Les Progressive Web Apps sont une nouvelle technologie donc il y a moins d’exemples à suivre,&lt;/li&gt;
  &lt;li&gt;Les Progressive Web Apps ne sont pas encore disponibles partout.&lt;sup id=&quot;fnref:4&quot;&gt;&lt;a href=&quot;#fn:4&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Pourtant, aucun d’eux n’est un frein pour aller de l’avant aujourd’hui avec une Progressive Web App.&lt;/p&gt;

&lt;h3 id=&quot;le-progressif-dans-les-progressive-web-apps&quot;&gt;Le progressif dans les Progressive Web Apps&lt;/h3&gt;

&lt;p&gt;L’expression &lt;em&gt;amélioration progressive&lt;/em&gt; renvoie à l’idée que vous pouvez concevoir une expérience qui marche partout et ensuite améliorer l’expérience pour les appareils qui supportent davantage de fonctionnalités plus avancées.&lt;/p&gt;

&lt;p&gt;Les Progressive Web Apps partagent cette même philosophie. Les appareils qui ne supportent pas toutes les fonctionnalités des Progressive Web Apps bénéficieront toujours des améliorations faites pour les supporter.&lt;/p&gt;

&lt;p&gt;C’est pour cette raison qu’AliExpress a vu &lt;a href=&quot;https://developers.google.com/web/showcase/2016/aliexpress&quot;&gt;une augmentation de 82% sur iOS&lt;/a&gt; après avoir développé une Progressive Web App en dépit du fait qu’iOS ne supporte pas encore les Progressive Web Apps.&lt;/p&gt;

&lt;p&gt;Les mesures que vous prenez pour développer une Progressive Web App bénéficient à toute personne qui visite votre site indépendamment de l’appareil qu’elle choisit d’utiliser.&lt;/p&gt;

&lt;h2 id=&quot;pourquoi-dvelopper-une-progressive-web-app-aujourdhui-&quot;&gt;Pourquoi développer une Progressive Web App aujourd’hui ?&lt;/h2&gt;

&lt;p&gt;Si les Progressive Web Apps sont toutes récentes et pas encore supportées partout, pourquoi est-ce que les entreprises devraient commencer à les développer dès maintenant ? Pourquoi ne pas attendre ?&lt;/p&gt;

&lt;h3 id=&quot;les-premiers-retours-sont-encourageants&quot;&gt;Les premiers retours sont encourageants&lt;/h3&gt;

&lt;p&gt;Google a publié des études de cas de sociétés qui ont adopté les Progressive Web Apps et leurs résultats sont encourageants.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/showcase/2016/aliexpress&quot;&gt;AliExpress&lt;/a&gt; a augmenté ses taux de conversion de nouveaux utilisateurs de 104%.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/showcase/2016/extra&quot;&gt;United eXtra Electronics&lt;/a&gt; a constaté une augmentation de 400% du réengagement et 100% de vente en plus, de la part de personnes arrivées via les notifications web Push.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/showcase/2016/5miles&quot;&gt;5miles&lt;/a&gt; a fait baisser son taux de rebond de 50% et a augmenté ses conversions de 30%.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/web/showcase/2016/konga&quot;&gt;Konga&lt;/a&gt; utilise 92% de données en moins pour le chargement initial comparativement à leur application native.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Le Washington Post a développé une Progressive Web App qui s’installe en arrière-plan pendant que les personnes regardent ses pages AMP&lt;sup id=&quot;fnref:5&quot;&gt;&lt;a href=&quot;#fn:5&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt; dans les résultats de recherche de Google. Le Washington Post a vu une augmentation de 12% de visites en provenance des résultats de recherche de Google grâce à AMP.&lt;/p&gt;

&lt;p&gt;Il reste encore à voir comment la Progressive Web App du Washington Post se comportera - ils n’ont lancé la version beta qu’en Mai - mais les gains en performance sont impressionnants. Ils sont passés d’articles qui mettaient 8 secondes à se charger en 2013 à 80 millisecondes dans la Progressive Web App.&lt;/p&gt;

&lt;h3 id=&quot;les-amliorations-progressives-que-vous-devez-de-toute-faon-faire&quot;&gt;Les améliorations progressives que vous devez de toute façon faire&lt;/h3&gt;

&lt;p&gt;Presque chaque fonctionnalité d’une Progressive Web App est quelque chose que vous devriez de toute façon envisager pour votre site web.&lt;/p&gt;

&lt;p&gt;Les gains de performance sont une raison suffisante pour tendre vers une Progressive Web App. De meilleures performances signifient plus de revenus. En fonction du site, il y a une chance que les améliorations de performance justifient à elles seules l’investissement dans une Progressive Web app.&lt;/p&gt;

&lt;p&gt;Chaque amélioration incrémentale que vous faites en direction d’une Progressive Web App est une amélioration qui sera tout de suite bénéfique à vos visiteurs.&lt;/p&gt;

&lt;h2 id=&quot;prenez-une-longueur-davance-dveloppez-une-progressive-web-app-ds--prsent&quot;&gt;Prenez une longueur d’avance. Développez une Progressive Web App dès à présent.&lt;/h2&gt;

&lt;p&gt;L’année prochaine ou l’année d’après au plus tard, tout le monde dira à quel point il a besoin de faire une Progressive Web App. Les bénéfices sont évidents et les motivations seront grandissantes.&lt;/p&gt;

&lt;p&gt;Mais quand plus d’entreprises vont développer des Progressive Web Apps, ça va devenir plus difficile de se faire remarquer.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2016/07/greenfield.jpg&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Photo de Gratisography&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Actuellement, cela ne prend que deux visites sur votre site pour qu’une personne soit invitée à installer une Progressive Web App, mais au fur et à mesure que l’espace se remplira, ce critère va être vraisemblablement être modifié, rendant ainsi plus difficile l’acquisition d’installations d’application.&lt;/p&gt;

&lt;p&gt;Les Progressive Web Apps sont encore un terrain vierge. C’est maintenant qu’il faut s’y mettre.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;En vérité, la plupart de ces fonctionnalités existaient sur le web dans le passé, mais elle n’étaient pas aussi riches et si largement distribuées. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;La &lt;a href=&quot;https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/&quot;&gt;définition complète des Progressive Web Apps&lt;/a&gt; de Frances Berriman et Alex Russell comporte neuf caractéristiques. J’ai sélectionné les quatre qui à mon sens intéresseront le plus les entreprises, mais elles sont toutes importantes et méritent qu’on les lise. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:3&quot;&gt;
      &lt;p&gt;Il faut qu’il s’écoule cinq minutes ou plus entre les deux visites pour que la bannière d’installation apparaisse. &lt;a href=&quot;#fnref:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:4&quot;&gt;
      &lt;p&gt;Au moment de la publication, Chrome and Opera supportent déjà les Progressive Web Apps. Firefox et Microsoft se sont engagés à les supporter. Apple l’envisage si vraiment il y a de la demande dans les années qui viennent. &lt;a href=&quot;#fnref:4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:5&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.ampproject.org/&quot;&gt;Accelerated Mobile Pages&lt;/a&gt; &lt;a href=&quot;#fnref:5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">Vous savez peut-être ce que sont les applications web progressives, mais outre les diverses techniques mises en œuvre pour délivrer une meilleure expérience utilisateur aux personnes qui consultent votre site web sur mobile, c’est également un enjeu commercial de taille qui va bouleverser le secteur dans les années les mois qui viennent. Et même si vous doutez à juste titre de la maturité de ces technologies, vous verrez à la lecture de cet article qu’il ne faudra pas trop tarder à améliorer votre site web si vous voulez rester dans la course. Le coût est minime si votre site est déjà responsive.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2016/07/app-store.jpg" /></entry><entry><title type="html">Que sont les Progressive Web Apps ?</title><link href="http://frank.taillandier.me/2016/06/28/que-sont-les-progressive-web-apps/" rel="alternate" type="text/html" title="Que sont les Progressive Web Apps&amp;nbsp;?" /><published>2016-06-28T00:00:00+02:00</published><updated>2016-06-28T00:00:00+02:00</updated><id>http://frank.taillandier.me/2016/06/28/que-sont-les-progressive-web-apps</id><content type="html" xml:base="http://frank.taillandier.me/2016/06/28/que-sont-les-progressive-web-apps/">&lt;p&gt;Le Web mobile essaie de combler depuis quelques années son retard en termes d’expérience utilisateur par rapport au natif. Face à l’utilisation majoritaire du mobile pour accéder au Web pour une grande partie de la population mondiale et aux problèmes de connectivité que nous connaissons tous, il était important d’apporter une réponse à ces problèmes, c’est désormais chose faite avec les &lt;em&gt;Progressive Web Apps&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Récemment s’est tenu le &lt;a href=&quot;https://events.withgoogle.com/progressive-web-app-dev-summit/&quot;&gt;Progressive Web Apps Dev Summit&lt;/a&gt; qui a réuni les principaux acteurs du web, Google en tête, les vidéos sont dispos, je vous invite à aller en regarder quelques-unes pour en apprendre plus sur le sujet.&lt;/p&gt;

&lt;p&gt;Le mois dernier est paru &lt;a href=&quot;http://blog.ionic.io/what-is-a-progressive-web-app/&quot;&gt;une bonne introduction aux PWA sur le blog d’Ionic&lt;/a&gt;, un framework qui permet de développer des applications web mobile hybride.&lt;/p&gt;

&lt;p&gt;Avec l’ami &lt;a href=&quot;https://blog.ticabri.com/2016/06/28/le-web-progresse-grace-aux-progressive-web-apps/&quot;&gt;Enguerran Colson&lt;/a&gt; nous vous proposons ci-dessous une traduction en français afin de vous inciter à vous intéresser de plus près à cet ensemble de technologies qui permettent au web mobile de rivaliser enfin pour de bon avec le natif.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;hr /&gt;

&lt;p&gt;Vous avez du sûrement déjà entendre parler des &lt;em&gt;Progressive Web Apps&lt;/em&gt; (ou applications Web progressives), elles représentent le futur de l’humanité. Elles vont amener la paix sur Terre, mettre un terme à la famine, sauver les arcs-en-ciel et les licornes, restaurer l’équilibre de la force et bien d’autres choses encore. Chemin faisant, elles pourraient même faire avancer le Web, ramener un peu de parité entre le Web et les applications natives et aider les développeurs mobile à atteindre plus d’utilisateurs en dehors du confinement des &lt;em&gt;App Stores&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Ça a l’air bien beau tout ça… mais que sont exactement les &lt;em&gt;Progressive Web Apps&lt;/em&gt; ?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Une &lt;em&gt;Progressive Web App&lt;/em&gt; utilise les possibilités du web moderne pour délivrer une expérience utilisateur similaire à une application native. – &lt;a href=&quot;https://developers.google.com/web/progressive-web-apps&quot;&gt;Progressive Web Apps&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Les applications natives d’un &lt;em&gt;App Store&lt;/em&gt; font des trucs comme envoyer des notifications, travailler en mode déconnecté, ressemblent à tout point de vue à une application (telle qu’imaginée par Apple et Google), se chargent depuis l’écran d’accueil, etc. En comparaison, les applications mobiles Web auxquelles nous accédons via un navigateur n’ont historiquement pas permis tout cela. Les &lt;em&gt;Progressive Web Apps&lt;/em&gt; corrigent cela grâce de nouvelles API Web, de nouveaux concepts d’architecture et de nouveaux &lt;em&gt;buzzwords&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pour être tout à fait clair, je parle des applications Web mobiles dans les &lt;em&gt;navigateurs&lt;/em&gt;. Les applications hybrides comme Ionic et Cordova tournent sans restrictions dans un environnement natif avec toutes les fonctionnalités attendues de la part de n’importe quelle application. Mais prenez le contenu Web d’une application hybride et chargez-le dans un navigateur mobile et vous allez alors être contraint par les fonctionnalités du navigateur (de part à cause du niveau sécurité requis et d’autre part à cause des problèmes de standardisation d’API).&lt;/p&gt;

&lt;p&gt;Les &lt;em&gt;Progressive Web Apps&lt;/em&gt; apportent les fonctionnalités attendues des applications natives à l’expérience de navigation Web sur un mobile en utilisant des technologies basées sur les standards et en tournant dans un conteneur sécurisé accessible à tous sur le Web.&lt;/p&gt;

&lt;p&gt;En somme, les &lt;em&gt;Progressive Web Apps&lt;/em&gt; décrivent toute une série de technologies, de concepts d’architecture et d’API Web qui travaillent de concert pour proposer une expérience similaire aux applications natives sur le Web mobile.
Voyons ensemble les quelques tenants de base des &lt;em&gt;Progressive Web Apps&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&quot;les-service-workers&quot;&gt;Les &lt;em&gt;Service Workers&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Les &lt;em&gt;Service Workers&lt;/em&gt; sont un outil à la fois incroyablement puissant et déroutant, qui se cache derrière une &lt;em&gt;Progressive Web App&lt;/em&gt;. Il permet de passer en mode hors-ligne, d’envoyer des notifications, de mettre à jour les contenus en arrière-plan, de mettre en cache du ontenu et tout un tas d’autres trucs.&lt;/p&gt;

&lt;p&gt;Dit de manière simple, un &lt;em&gt;Service Worker&lt;/em&gt; est un script qui tourne en arrière-plan, indépendamment de votre application et qui s’exécute en réponse à des événements comme des requêtes réseau, des notifications push, des changements de connectivité et bien d’autres choses.&lt;/p&gt;

&lt;p&gt;J’ai déjà entendu parler d’un &lt;em&gt;Service Worker&lt;/em&gt; comme d’un « proxy », et je pense que c’est une description plutôt fidèle. On peut écouter les événements comme par exemple un &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; qui se produisent à chaque fois qu’une requête réseau est émise. On peut prendre en considération cet événement avec un contrôle très fin : vérifier la présence des données en cache et les rendre directement ou permettre à la requête de poursuivre sa route jusqu’au serveur. Notre script agit alors comme un proxy, un &lt;em&gt;middleware&lt;/em&gt;, pour une requête.&lt;/p&gt;

&lt;p&gt;Le grand pouvoir et la flexibilité d’un &lt;em&gt;Service Worker&lt;/em&gt; peut le rendre très complexe et en général les développeurs vont vouloir utiliser des recettes prêtes à l’emploi pour des cas d’utilisation classique tel que le mode hors-ligne. &lt;a href=&quot;https://serviceworke.rs/&quot;&gt;Mozilla dispose d’une très bonne documentation de référence&lt;/a&gt; avec des recettes avec un &lt;em&gt;Service Worker&lt;/em&gt; qui démontre la myriade d’applications possibles avec des exemples de code. Par exemple &lt;a href=&quot;https://serviceworke.rs/offline-fallback_service-worker_doc.html&quot;&gt;comment faire un mode hors-ligne simple&lt;/a&gt; qui intercepte les événements &lt;code class=&quot;highlighter-rouge&quot;&gt;fetch&lt;/code&gt; et retourne les données depuis le cache si la requête réseau a échoué. Google propose également &lt;a href=&quot;https://github.com/GoogleChrome/samples/tree/gh-pages/service-worker&quot;&gt;quelques bons exemples d’utilisation de Service Workers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Ce qu’il faut surtout retenir : un &lt;em&gt;Service Worker&lt;/em&gt; est simplement un fichier JavaScript comme un autre, tournant en tâche de fond et qui se déclenche via des événements et c’est à vous de décider ce qu’il faut coder pour prendre en charge le cache, les notifications push, la récupération des données serveur, etc. Puisque les développeurs finissent par utiliser les mêmes “recettes” pour effectuer les tâches les plus communes (comme le support hors-ligne), nous allons vraisemblablement réutliser du code existant pour nous simplifier la vie. Les &lt;em&gt;Service Workers&lt;/em&gt; sont &lt;a href=&quot;http://caniuse.com/#feat=serviceworkers&quot;&gt;supportés sur Android avec Chrome 50 et Firefox 46, mais pas encore sur iOS Safari et IE Mobile&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;app-shell&quot;&gt;App Shell&lt;/h2&gt;

&lt;p&gt;Le modèle &lt;em&gt;App Shell&lt;/em&gt; (littéralement Coquille d’Application) est un principe simple de conception dans lequel l’application Web mobile charge initialement une coquille basique de l’interface utilisateur de l’application, avant de charger ensuite le contenu de l’application. &lt;em&gt;App Shell&lt;/em&gt; n’est pas une API Web ou un framework mais plutôt une approche de conception que les développeurs peuvent adopter pour adhérer à ce qui est permis par les capacités de mise en cache d’un &lt;em&gt;Service Worker&lt;/em&gt;. Vous pourriez trouver que c’est assez évident, que c’est une approche logique, rendue plus sérieuse par un &lt;em&gt;buzzword&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Avec le modèle &lt;em&gt;App Shell&lt;/em&gt;, nous faisons en sorte de bien conserver séparément la coquille de l’interface de notre application et son contenu puis nous les mettons en cache de manière séparée également. Idéalement notre App Shell est mise en cache pour être disponible très rapidement lorsque l’utilisateur reviendra sur notre Web App. Avoir la coquille et le contenu chargés séparément donne théoriquement à l’utilisateur une impression  de performance et d’utilisabilité de l’application.&lt;/p&gt;

&lt;p&gt;Et dans le cadre d’une application Ionic, nous pouvons charger l’agencement de l’application Ionic immédiatement (les onglets, la navigation, le menu, etc.), le mettre en cache via un &lt;em&gt;Service Worker&lt;/em&gt;, et puis récupérer et mettre à jour le contenu avec du JavaScript après que l’App Shell se soit chargée.&lt;/p&gt;

&lt;p&gt;Nous sommes en train d’ajouter un meilleur support des concepts PWA dans Ionic, vous pouvez vous attendre à voir apparaître une approche &lt;em&gt;App Shell&lt;/em&gt; pour toutes les applications Ionic qui seront déployées en tant que Web App mobile, avec un &lt;em&gt;Service Worker&lt;/em&gt; prêt à l’emploi pour les recettes habituelles telles que la mise en cache, le support hors-ligne, le rafraichissement du contenu en arrière-plan.&lt;/p&gt;

&lt;h2 id=&quot;installabilit-et-manifeste-dapplication&quot;&gt;Installabilité et manifeste d’application&lt;/h2&gt;

&lt;p&gt;Historiquement les applications Web mobiles ne s’installaient pas comme une application sur l’écran d’accueil. Bien sûr un utilisateur pouvait ajouter un raccourci vers son site mobile sur son écran iOS ou Android (non y’a vraiment des gens qui font ça ?) et l’expérience n’était pas aussi concluante car l’application ne bénéficiait pas des fonctionnalités locales qu’on peut attendre des applications natives.&lt;/p&gt;

&lt;p&gt;C’est en train de changer. Récemment Chrome et Firefox sur Android ont ajouté &lt;a href=&quot;https://developers.google.com/web/updates/2014/11/Support-for-installable-web-apps-with-webapp-manifest-in-chrome-38-for-Android?hl=en&quot;&gt;le support de l’installation d’applications Web sur l’écran d’accueil&lt;/a&gt; avec une bannière d’installation native, tout comme les bannières d’applications natives auxquelles nous sommes habitués. Pour dire au navigateur que notre site web mobile peut s’installer comme une application, nous écrivons un fichier &lt;a href=&quot;https://github.com/GoogleChrome/samples/blob/gh-pages/web-application-manifest/manifest.json&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;manifest.json&lt;/code&gt;&lt;/a&gt; et nous créons un lien dans notre page web principale (voir le deuxième lien ci-dessus pour un exemple complet).&lt;/p&gt;

&lt;p&gt;iOS ne propose pas encore cette fonctionnalité, simplement la possibilité de créer un raccourci sur l’écran d’accueil, donc l’expérience ne sera pas aussi fluide, mais nous pouvons espérer recevoir de bonnes nouvelles de la part d’Apple cette année 🍪.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Les &lt;em&gt;Progressive Web Apps&lt;/em&gt; sont à la fois de nouvelles API, des modèles de conception et du jargon marketing. Le Web mobile arrive à égalité avec les applications installables depuis un &lt;em&gt;App Store&lt;/em&gt; grâce au fichier &lt;code class=&quot;highlighter-rouge&quot;&gt;manifest&lt;/code&gt; pour les applications, le support de l’installation sur l’écran d’accueil, la possibilité de faire tourner des tâches de fond avec les &lt;em&gt;Services Workers&lt;/em&gt;, d’améliorer le temps de chargement avec un App Shell et la croyance renouvelée que les développeurs Web peuvent aussi proposer une excellente expérience d’application mobile.&lt;/p&gt;

&lt;p&gt;Chez Ionic, nous pensons que le web est le futur des applications. Il tourne partout, c’est la pile technologique la plus connue et il fait tourner un nombre croissant d’applications. Aujourd’hui les technologies Web sont utilisées par des millions d’applications dans les &lt;em&gt;App Stores&lt;/em&gt;, mais jusqu’à présent le Web mobile avait proposé une expérience dégradée, obligeant les gens à se diriger vers des &lt;em&gt;App Stores&lt;/em&gt; pour avoir la totale. Les &lt;em&gt;Progressive Web Apps&lt;/em&gt; changent la donne.&lt;/p&gt;

&lt;p&gt;Dans les prochains mois, nous allons livrer de nouvelles fonctionnalités pour les applications Ionic qui permettent aux développeurs de bénéficier du meilleur des deux mondes : un déploiement d’application &lt;em&gt;cross-plateform&lt;/em&gt; pour iOS, Android et Windows, ainsi qu’un déploiement vers le Web mobile en tant que &lt;em&gt;Progressive Web App&lt;/em&gt; avec le même code. Bientôt les développeurs Ionic pourront bénéficier à la fois de la distribution dans les &lt;em&gt;App Stores&lt;/em&gt; ainsi que de l’accès instantané pour des milliards d’utilisateurs du Web mobile et des recherches Google. Fini les interstitiels des &lt;em&gt;App Stores&lt;/em&gt; et la compilation séparée des applications natives et Web mobile. Restez à l’écoute ! 🤘&lt;/p&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">Le Web mobile essaie de combler depuis quelques années son retard en termes d’expérience utilisateur par rapport au natif. Face à l’utilisation majoritaire du mobile pour accéder au Web pour une grande partie de la population mondiale et aux problèmes de connectivité que nous connaissons tous, il était important d’apporter une réponse à ces problèmes, c’est désormais chose faite avec les Progressive Web Apps.

Récemment s’est tenu le Progressive Web Apps Dev Summit qui a réuni les principaux acteurs du web, Google en tête, les vidéos sont dispos, je vous invite à aller en regarder quelques-unes pour en apprendre plus sur le sujet.

Le mois dernier est paru une bonne introduction aux PWA sur le blog d’Ionic, un framework qui permet de développer des applications web mobile hybride.

Avec l’ami Enguerran Colson nous vous proposons ci-dessous une traduction en français afin de vous inciter à vous intéresser de plus près à cet ensemble de technologies qui permettent au web mobile de rivaliser enfin pour de bon avec le natif.</summary></entry><entry><title type="html">La JAMStack</title><link href="http://frank.taillandier.me/2016/05/21/la-JAMStack/" rel="alternate" type="text/html" title="La JAMStack" /><published>2016-05-21T00:00:00+02:00</published><updated>2016-05-21T00:00:00+02:00</updated><id>http://frank.taillandier.me/2016/05/21/la-JAMStack</id><content type="html" xml:base="http://frank.taillandier.me/2016/05/21/la-JAMStack/">&lt;p&gt;Dans la &lt;a href=&quot;/2016/03/08/les-gestionnaires-de-contenu-statique/&quot;&gt;mouvance statique&lt;/a&gt;, l’idée sous-jacente n’était pas tant de se focaliser les outils qui permettent de génèrer une version statique, que d’expliquer qu’il y avait désormais tout un contexte technologique à prendre en compte et que de les processus de travail actuels découlent de cet écosystéme.&lt;/p&gt;

&lt;p&gt;Lors de la dernière &lt;em&gt;Smashing Conference&lt;/em&gt; à San Francisco, &lt;a href=&quot;http://mathias-biilmann.net/&quot;&gt;Mathias Biilmann&lt;/a&gt;
le fondateur de Netlify, un service de déploiement de sites maladroitement appelés &lt;em&gt;statiques&lt;/em&gt; a présenté ce qui pour lui représente la &lt;em&gt;stack&lt;/em&gt; front-end du moment, à savoir l’association de différentes technologies qui permettent de bâtir des sites et des applications web entièrement côté client en se reposant sur JavaScript, des APIs et du Markup (Markdown, YAML, JSON), ce que Matthias appelle la &lt;em&gt;JAMStack&lt;/em&gt;.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;p&gt;Pour mieux comprendre le propos de Mathias, je vous invite à aller &lt;a href=&quot;https://vimeo.com/163522126&quot;&gt;regarder la vidéo de la conférence&lt;/a&gt; ou à défaut de &lt;a href=&quot;https://speakerdeck.com/biilmann/the-jam-stack&quot;&gt;consulter les slides de la conférence&lt;/a&gt; qui décrit très bien comment nous en sommes arrivés à cet état de l’art, parce qu’en fait c’est un peu ça que ça désigne.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;12e277868f5941d1ae08ee37ed08fd5b&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;On retiendra une séparation stricte des problématiques : génération du site, hébergement, code client et code serveur. Les bonnes pratiques à respecter : héberger sur un CDN pour la performance, des déploiements unitaires, une invalidation instantanée du cache, un code source versionné dans git et des process automatisés — bonnes pratiques qui restent valables même si vous utilisez encore une bonne vieille base de données.&lt;/p&gt;

&lt;p&gt;Afin de préciser son propos Matthias a mis en ligne &lt;a href=&quot;http://jamstack.org/&quot;&gt;JAMStack.org&lt;/a&gt; qui présente rapidement les concepts et la philosophie derrière cet acronyme un peu abscon.&lt;/p&gt;

&lt;p&gt;Je relaie ici son message à l’aide d’une traduction en français car d’une part ce texte permet d’avoir une bonne vision des architectures et des technologies web modernes et de l’autre il permet de comprendre que tout cela va bien au délà de la simple génération de la version &lt;em&gt;statique&lt;/em&gt; d’un site.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mise à jour : La traduction est maintenant publiée sur &lt;a href=&quot;http://jamstack.org/fr/&quot;&gt;http://jamstack.org/fr/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2016/05/jamstack.png&quot; alt=&quot;JAMStack&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;La JAMStack est une façon idéale de bâtir des sites et des applications web performants, sécurisés et simples à mettre à jour.&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;JAM signifie &lt;em&gt;JavaScript, APIs and Markup&lt;/em&gt;. C’est l’ensemble des technologies qui progresse le plus rapidement lorsqu’il s’agit de bâtir des sites et des applications web : plus de serveurs, hébergez tout votre partie cliente sur des CDNs et utilisez des APIs pour les parties dynamiques.&lt;/p&gt;

  &lt;p&gt;Lorsque la plateforme LAMP (Linux Apache MySQL PHP) a commencé à devenir proéminente à la fin des années 90, elle s’est développée suite à un ensemble de contraintes qui ne sont plus d’actualité. À l’époque les navigateurs étaient de simples lecteurs de documents et tout ce qui était dynamique, social ou interactif devait obligatoirement se passer côté serveur. La seule forme d’hébergement accessible était l’hébergement mutualisé. Les déploiements consistaient à envoyer des fichiers par FTP. Le versionnement était la plupart du temps absent des habitudes quotidiennes des développeurs web.&lt;/p&gt;

  &lt;p&gt;De nos jours les navigateurs sont les systèmes d’exploitation du web et sont capables de faire tourner des applications complexes entièrement côté client. Il sont capables de faire appel et d’interagir avec un nombre sans cesse croissant d’APIs et de services à travers différents domaines et infrastructures. Les CDNs (Content Delivery Network ou Réseau de diffusion de contenu) ne sont plus un luxe que seules les grandes entreprises peuvent se permettre, ils sont maintenant devenus courants afin de réduire la vitesse d’accès au serveur (le &lt;em&gt;Time to First Byte&lt;/em&gt;) pour les sites et les applications de toutes tailles. Les modèles de déploiement ont évolué : les transferts manuels et fastidieux ont cédé la place à des processus automatisés déclenchés par des systèmes de gestion de version de plus en plus présents.&lt;/p&gt;

  &lt;p&gt;La &lt;em&gt;JAMStack&lt;/em&gt; décrit ce nouvel état de fait. Au lieu d’envoyer par FTP du code serveur sur un serveur mutualisé, nous poussons avec Git et notre code est immédiatement assemblé et distribué sur des réseaux de CDNs un peu partout dans le monde. Au lieu de dépendre d’une base de donnée pour chaque requête que nous devons effectuer, nous utilisons des outils d’assemblage pour mettre en production des sites et des applications prêts à tourner directement dans le navigateur. Au lieu de mélanger ensemble la persistance, la génération du HTML, les transactions bancaires, l’authentification, etc. nous séparons ces problématiques et faisons appel à des APIs bien précises depuis le côté client.&lt;/p&gt;

  &lt;p&gt;La &lt;em&gt;JAMStack&lt;/em&gt; utilise des langages de balisage comme HTML, CSS et Markdown pour formater et mettre en forme notre contenu, du JavaScript côté client pour rendre le tout interactif et engageant, des APIs pour ajouter de la persistence, de la synchronisation en temps réel, des interactions concrêtes, des commentaires, des paniers d’achat et ainsi de suite.&lt;/p&gt;

  &lt;p&gt;Les navigateurs sont le nouveau système d’exploitation. Les serveurs sont absorbés par les CDns et les APIs. Les sites sont ou dépourvus de base de données et générés en amont ou font appel à de services de bases de données hébergées  et servies directement depuis le navigateur. JavaScript est en charge de toute programmation dynamique pendant le cycle requête/réponse et tourne entièrement côte client.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Comme à chaque fois qu’il y a changement, les réactions sont mitigées sur cette manière de bâtir des sites et c’est normal, elle ne saurait constituer &lt;em&gt;la&lt;/em&gt; solution pour tous les cas de figure, comme d’habitude c’est le contexte qui prime. De plus l’opinion d’une personne directement impliquée dans cet écosystème peut être à juste titre considérée comme biaisée mais il serait vain de nier que cette &lt;em&gt;stack&lt;/em&gt; est de plus en plus utilisée et ce pour de bonnes raisons. Peu importe le nom qu’on lui donne, en publiant ce texte mon objectif est avant tout de souligner que le dynamique est bien présent dans ce qui encore trop souvent désigné par la seule appellation &lt;em&gt;statique&lt;/em&gt;. Ces évolutions ont beaucoup d’impacts, notamment sur les compétences à privilégier dans les équipes.&lt;/p&gt;

&lt;p&gt;C’est une évolution et non pas une nouvelle mode, le résultat de l’évolution de tout un écosystème dont JavaScript est plus que jamais la pierre angulaire. Ce n’est pas un hasard si Hexo, Brunch, Metalsmith, Harp ou Assemble font partie des &lt;a href=&quot;https://www.staticgen.com/&quot;&gt;générateurs les plus populaires&lt;/a&gt; et si ceux basés sur la bibliothèque JavaScript &lt;a href=&quot;http://facebook.github.io/react/&quot;&gt;React&lt;/a&gt; comme &lt;a href=&quot;https://www.staticgen.com/gatsby&quot;&gt;Gatsby&lt;/a&gt; ou &lt;a href=&quot;https://www.staticgen.com/phenomic&quot;&gt;Phenomic&lt;/a&gt; connaissent une popularité croissante.&lt;/p&gt;

&lt;p&gt;Comme toute chose dans l’univers, le web est en perpetuelle évolution. La sagesse et les arts martiaux nous enseignent qu’il est toujours plus fluide d’accompagner un mouvement que de tenter de lui résister, alors laissez vous simplement porter par la vague.&lt;/p&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">Dans la mouvance statique, l’idée sous-jacente n’était pas tant de se focaliser les outils qui permettent de génèrer une version statique, que d’expliquer qu’il y avait désormais tout un contexte technologique à prendre en compte et que de les processus de travail actuels découlent de cet écosystéme.

Lors de la dernière Smashing Conference à San Francisco, Mathias Biilmann
le fondateur de Netlify, un service de déploiement de sites maladroitement appelés statiques a présenté ce qui pour lui représente la stack front-end du moment, à savoir l’association de différentes technologies qui permettent de bâtir des sites et des applications web entièrement côté client en se reposant sur JavaScript, des APIs et du Markup (Markdown, YAML, JSON), ce que Matthias appelle la JAMStack.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://frank.taillandier.me/assets/img/2016/05/a-new-stack.png" /></entry><entry><title type="html">La mouvance statique</title><link href="http://frank.taillandier.me/2016/03/08/les-gestionnaires-de-contenu-statique/" rel="alternate" type="text/html" title="La mouvance statique" /><published>2016-03-08T00:00:00+01:00</published><updated>2016-03-08T00:00:00+01:00</updated><id>http://frank.taillandier.me/2016/03/08/les-gestionnaires-de-contenu-statique</id><content type="html" xml:base="http://frank.taillandier.me/2016/03/08/les-gestionnaires-de-contenu-statique/">&lt;p&gt;En quelques années, les gestionnaires de contenu statique, Jekyll en tête sont devenus très populaires, de Google à Netflix en passant par Mailchimp, Mapbox ou NodeJS, ils sont partout et sont devenus le choix de la raison pour les sites de contenus à fort trafic. Leurs usages évoluent et de nouveaux services dédiés viennent enrichir et faciliter l’expérience utilisateur des contributeurs et des développeurs.&lt;/p&gt;

&lt;p&gt;Cette stack permet aux différents intervenants de se concentrer sur l’essentiel. Les rédacteurs peuvent ainsi rédiger leurs articles au format Markdown, un format texte très simple et très lisible, qui facilité la portabilité.&lt;/p&gt;

&lt;p&gt;L’article que vous êtes en train de lire est écrit dans une &lt;a href=&quot;https://ia.net/writer&quot;&gt;application de bureau à l’interface minimale&lt;/a&gt; spécialement conçue pour offrir une bonne expérience de rédaction. Comme le dit Golden Krishna dans son livre, &lt;a href=&quot;http://www.nointerface.com/book/&quot;&gt;la meilleure interface c’est encore de ne pas en avoir&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Performance, sécurité, décentralisation, portabilité, autant d’excellentes raisons derrière l’adoption croissante de cette stack qui combine souvent &lt;a href=&quot;/2016/05/21/la-JAMStack/&quot;&gt;JavaScript, des APis et du Markup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Essayons de comprendre ce qui pourrait passer pour un retour en arrière aux yeux de certains, alors qu’il faut simplement y voir une évolution logique d’un processus de publication parfaitement adapté à notre manière asynchrone de travailler et aux ressources technologiques actuelles.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;h2 id=&quot;la-fatigue-du-dynamique&quot;&gt;La fatigue du dynamique&lt;/h2&gt;

&lt;p&gt;La plupart des CMS datent de l’ère LAMP et ont vu le jour au début des années 2000, encore aujourd’hui les CMS dynamiques, Wordpress et Drupal en tête, font tourner une bonne partie des sites web de la planète. Ces logiciels sont alimentés en temps réel par des bases de données et demandent un certain niveau de maintenance ne serait-ce que pour garantir la sécurité des contenus et assurer de bonnes performances aux utilisateurs. L’interface d’administration est hébergée avec le site web, cela implique que l’expérience du contributeur est fonction des performances du site. Je ne souhaite à personne de ne plus avoir accès à son interface d’administration en ligne, pour cause de fort trafic.&lt;/p&gt;

&lt;p&gt;Malheureusement la majorité de ces sites ne sont pas bien maintenus et sont donc &lt;a href=&quot;http://codex.wordpress.org/FAQ_My_site_was_hacked&quot;&gt;vulnérables&lt;/a&gt; à de potentielles attaques. Ils sont souvent inutilement lents car leur contenu n’est pas mis à jour en permanence, mais à chaque clic, c’est une requête vers la base de données qui est déclenchée pour servir le même contenu aux utilisateurs.&lt;/p&gt;

&lt;p&gt;Les plus experts argumenteront qu’on peut toujours mettre en place des stratégies de cache et de serveur proxy comme Varnish, mais une telle architecture a un coût non négligeable. Et l’invalidation de cache est une des choses les plus complexes en informatique. Si vous ne le saviez pas, &lt;a href=&quot;http://martinfowler.com/bliki/TwoHardThings.html&quot;&gt;Martin Fowler se chargera de vous le rappeler&lt;/a&gt; :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;There are only two hard things in Computer Science: cache invalidation and naming things — Phil Karlton&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ces problèmes sont déjà beaucoup plus simples à résoudre si on se contente de servir du contenu dit &lt;em&gt;statique&lt;/em&gt; - rassurez-vous on sait très bien faire du dynamique côté client en JavaScript de nos jours.&lt;/p&gt;

&lt;p&gt;Revenir à des choses simples et performantes, c’est la philosophie du générateurs de site statique. Déployés sur des CDNs à moindre coût, ils sont plus rapides, plus sécurisés et donc beaucoup moins onéreux. Les sites statiques connaissent une popularité grandissante de par leur efficacité et la facilité avec laquelle il est possible de nos jours de faire du déploiement continu, à savoir plusieurs dizaines de mises en production par jour.&lt;/p&gt;

&lt;p&gt;Ils sont fidèles en cela à la philosophie qui a toujours animé la communauté open-source et qui anime aujourd’hui les startups et les organisation agiles.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Release early, release often — Eric S. Raymond, la Cathédrale et le Bazaar, 1999.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Et si vous n’êtes pas capables de déployer sans crainte en permanence, vous avez sûrement contracté une bonne &lt;a href=&quot;/2014/11/06/intro-dette-technique/&quot;&gt;dette technique&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;la-simplicit-du-statique&quot;&gt;La simplicité du statique&lt;/h2&gt;

&lt;p&gt;Des blogueurs comme le webdesigner Dan Cederholm, fondateur de Dribbble, &lt;a href=&quot;http://simplebits.com/2015/01/03/static.html&quot;&gt;confessent&lt;/a&gt; le plaisir de revenir à de l’hypertexte. Fort logiquement &lt;a href=&quot;https://dribbble.com/stories&quot;&gt;le blog de Dribbble&lt;/a&gt; est lui aussi géré en statique. Si des webdesigners l’adoptent, c’est que la courbe d’apprentissage est très rapide quand vous faites du développement web front-end. Vous ressentez ce plaisir de reprendre la main sur vos contenus et de les organiser comme bon vous semble, sans être contraints par les choix imposés par un CMS.&lt;/p&gt;

&lt;p&gt;Pour la petite histoire, &lt;a href=&quot;http://ben.balter.com/about/&quot;&gt;Ben Balter&lt;/a&gt; était un ancien contributeur Wordpress, quand il a découvert Jekyll. Il a eu une révélation et s’est empressé de développer un outil de &lt;a href=&quot;https://github.com/benbalter/wordpress-to-jekyll-exporter&quot;&gt;migration de Wordpress à Jekyll&lt;/a&gt;. Ben travaille aujourd’hui pour Github, où il est chargé de &lt;a href=&quot;https://government.github.com/&quot;&gt;sensibiliser les gouvernements à l’open-source&lt;/a&gt; et c’est un des principaux contributeurs à Jekyll et Github Pages. Il est vraiment tombé amoureux de cette stack.&lt;/p&gt;

&lt;p&gt;On recense à ce jour plus de &lt;a href=&quot;https://staticsitegenerators.net/&quot;&gt;430 gestionnaires de contenu statique&lt;/a&gt;, écrits dans différents langages et différents formats pour concevoir les modèles de page, certains entièrement basés sur JavaScript et les standards web. Il y en a bien un qui sera le bon outil pour vous. Tout dépend de votre besoin, de votre stack actuelle et des compétences de votre équipe.&lt;/p&gt;

&lt;p&gt;Jekyll, écrit en Ruby par un cofondateur de GitHub, reste le plus populaire, car il bénéficie d’une large communauté et d’un riche écosystème. Lorsqu’en 2008 Tom Preston-Werner explique &lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;comment bloguer comme un hacker&lt;/a&gt;, il pose les bases d’une architecture volontairement simple qui place le format des contenus, le versionnement, le déploiement, la sécurité et la performance au cœur de la philosophie de son logiciel.&lt;/p&gt;

&lt;p&gt;Dans Jekyll&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; ou &lt;a href=&quot;https://middlemanapp.com/&quot;&gt;Middelman&lt;/a&gt;, c’est &lt;a href=&quot;https://docs.shopify.com/themes/liquid&quot;&gt;Liquid&lt;/a&gt;, un langage
de templating conçu par Shopify, qui permet d’insérer des données et de la logique dans
les modèles de pages. Sa &lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;syntaxe&lt;/a&gt; composée d’une douzaine de balises et d’une série
de filtres très utiles pour manipuler les données est très accessible aux designers web.
Si vous préférez utiliser Swig, Handlebars ou React, regardez plutôt du côté d’&lt;a href=&quot;https://hexo.io&quot;&gt;Hexo&lt;/a&gt;,
d’&lt;a href=&quot;http://assemble.io/&quot;&gt;Assemble&lt;/a&gt;, de &lt;a href=&quot;http://www.metalsmith.io/&quot;&gt;Metalsmith&lt;/a&gt; ou de &lt;a href=&quot;https://github.com/gatsbyjs/gatsby&quot;&gt;Gatsby&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Comme dans des frameworks comme Rails, Ember ou Meteor, les conventions priment sur la configuration&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;. Vous devrez souvent respecter quelques conventions, comme stocker vos articles dans un dossier &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; ou vos données dans un dossier &lt;code class=&quot;highlighter-rouge&quot;&gt;_data&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Ce qui est chouette, c’est que vous pouvez apprendre à votre rythme et commencer avec des fichiers HTML et CSS standards puis transformer vos fichiers HTML en modèles, les séparer en composants réutilisables et en extraire petit à petit les données.&lt;/p&gt;

&lt;p&gt;Vous pouvez aussi créer facilement &lt;a href=&quot;https://www.smashingmagazine.com/2016/02/content-modeling-with-jekyll/&quot;&gt;vos propres structures de données&lt;/a&gt; et définir autant de &lt;a href=&quot;https://github.com/planetjekyll/quickrefs/blob/master/YAML.md&quot;&gt;variables dont vous avez besoin via les entêtes Front Matter au format YAML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Point important, à l’inverse des flat CMS comme &lt;a href=&quot;https://getkirby.com/&quot;&gt;Kirby&lt;/a&gt; ou &lt;a href=&quot;https://getgrav.org/&quot;&gt;Grav&lt;/a&gt;, il n’y a pas d’interface graphique fournie par défaut, même si elles commencent à arriver via l’ajout de plugins ou en faisant appel à des services dédiés&lt;sup id=&quot;fnref:headless-cms&quot;&gt;&lt;a href=&quot;#fn:headless-cms&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/img/2016/03/cloudcannon-editor.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;L'éditeur de contenu de Cloudcannon&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Fidèle à la philosophie UNIX, les générateurs se contentent de faire une seule chose à la fois : transformer des contenus en site statique. C’est surement pour cette raison qu’il y en a autant. Certains vont plus loin que d’autres en intégrant notamment des commandes pour le déploiement. Comme dans les CMS l’enrichissement en fonctionnalités se fait à l’aide d’extensions et autres plugins.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/img/2016/03/jekyll-terminal.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Jekyll en action dans le terminal&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Plus vous aurez de fichiers à générer, plus l’étape de &lt;em&gt;build&lt;/em&gt; prendra du temps. Il vous faudra donc faire en sorte de limiter ce temps au minimum si vous souhaitez que vos mises en production ne prennent que quelques secondes. Si des gestionnaires de contenu statiques plus récents comme &lt;a href=&quot;http://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; écrit en Go sont très performants, il sera parfois plus judicieux de &lt;a href=&quot;https://www.smashingmagazine.com/2016/08/using-a-static-site-generator-at-scale-lessons-learned/&quot;&gt;découper vos contenus en plusieurs parties et ne générer que le strict nécessaire&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Le gros avantage de cette stack c’est de pouvoir l’adapter à vos besoins et comme avec des LEGO™ vous pouvez créer votre propre système de publication.&lt;/p&gt;

&lt;h2 id=&quot;des-contenus-accessibles-et-rutilisables&quot;&gt;Des contenus accessibles et réutilisables&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;the problem with WYSIWYG is that we are giving content creators an antiquated metaphor from the desktop publishing era to communicate to them what it means to publish on the web — Karen Mc Grane&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Il n’y a pas que les développeurs et les designers web qui trouvent cette approche intéressante, Karen McGrane, la papesse de la stratégie de contenu, explique qu’il est important que les &lt;a href=&quot;//karenmcgrane.com/2014/10/15/content-in-a-zombie-apocalypse/&quot;&gt;contenus puissent être stockés indépendamment de tout système de publication&lt;/a&gt; dans des formats lisibles et débarrassés de toute présentation. De plus le fameux WYSIWYG (What You See Is What You Get) est une fausse promesse de par la nature imprévisible du web car vous ne pouvez pas savoir sur quel périphérique sera affiché votre contenu : un ordinateur portable, un téléphone, une montre, une télé, des lunettes connectées ?&lt;/p&gt;

&lt;p&gt;Des formats textes comme &lt;a href=&quot;https://guides.github.com/features/mastering-markdown/&quot;&gt;Markdown&lt;/a&gt;, au balisage minimal offrent à la fois une bonne expérience pour la rédaction et peuvent être ensuite facilement transformés en HTML, mis en forme &lt;em&gt;via&lt;/em&gt; CSS et enrichis &lt;em&gt;via&lt;/em&gt; JavaScript.&lt;/p&gt;

&lt;p&gt;Le format Markdown est de plus en plus populaire chez les rédacteurs et &lt;a href=&quot;http://blogs.getty.edu/iris/an-editors-view-of-digital-publishing/&quot;&gt;les éditeurs&lt;/a&gt; et a été adopté comme format par défaut par des logiciels comme &lt;a href=&quot;https://blog.ghost.org/markdown/&quot;&gt;Ghost&lt;/a&gt;, un logiciel de blog écrit en NodeJS qui se focalise lui aussi sur l’expérience de rédaction de contenu.&lt;/p&gt;

&lt;p&gt;Beaucoup d’applications comme &lt;a href=&quot;http://macdown.uranusjr.com/&quot;&gt;MacDown&lt;/a&gt;, &lt;a href=&quot;https://ia.net/writer&quot;&gt;IA Writer&lt;/a&gt; ou &lt;a href=&quot;http://www.ulyssesapp.com/&quot;&gt;Ulysses&lt;/a&gt; sous Mac, &lt;em&gt;insérez votre application open-source préférée ici&lt;/em&gt; ou de services en ligne permettent aujourd’hui d‘&lt;a href=&quot;https://stackedit.io/editor&quot;&gt;éditer du Markdown&lt;/a&gt; de manière simple.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/img/2016/03/macdown.png&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Aperçu de cet article dans MacDown&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Les contenus ne sont donc plus enfermés dans une base de données, ils sont stockées dans des formats texte comme Markdown, YAML ou JSON. Il est dès lors possible d’exposer vos contenus au format JSON et de proposer une &lt;a href=&quot;https://codeplanet.io/principles-good-restful-api-design/&quot;&gt;API RESTful&lt;/a&gt; pour que vos données puissent être réutilisées par d’autres sites.&lt;/p&gt;

&lt;p&gt;En privilégiant ces formats, les gestionnaires de contenu statiques vous garantissent l’accessibilité, la réutilisation et des migrations grandement facilitées.&lt;/p&gt;

&lt;h2 id=&quot;une-adoption-croissante&quot;&gt;Une adoption croissante&lt;/h2&gt;

&lt;p&gt;Si le besoin de départ était de simplement versionner et servir son blog sous forme de contenu statique, les avantages mentionnés plus haut ont vite intéressés les sites de contenu à fort trafic. Ainsi en 2011 Mailchimp annonçait &lt;a href=&quot;https://blog.mailchimp.com/building-the-new-mailchimp/&quot;&gt;la refonte de son site&lt;/a&gt; avec un gestionnaire de contenu statique.&lt;/p&gt;

&lt;p&gt;En 2012, c’est &lt;a href=&quot;//kylerush.net/blog/meet-the-obama-campaigns-250-million-fundraising-platform/&quot;&gt;l’équipe de Barack Obama qui choisit Jekyll&lt;/a&gt;, pour recueillir les dons pour le financement de sa campagne. Les objectifs sont dépassés, le site est &lt;strong&gt;60% plus rapide&lt;/strong&gt; et grâce à une démarche UX agile et au déploiement continu, l’objectif de départ est dépassé, et c’est 250 millions de dollars qui seront récoltés.&lt;/p&gt;

&lt;p&gt;Un code source ouvert, des données accessibles à d’autres services, le geste est fort de la part d’une administration publique.&lt;/p&gt;

&lt;p&gt;En 2016, les leçons ont bien été apprises et on ne s’étonne plus de voir que le site d’&lt;a href=&quot;https://www.hillaryclinton.com/&quot;&gt;Hillary Clinton&lt;/a&gt; soit servi en statique. Il existe même un service dédié pour &lt;a href=&quot;https://federalist.18f.gov/&quot;&gt;publier les sites gouvernementaux américains en statique&lt;/a&gt;. Si la France pouvait s’inspirer de cette démarche ouverte…&lt;/p&gt;

&lt;p&gt;De son côté, le trio &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;GitHub Pages, Jekyll et CDN&lt;/a&gt; continue d’être très utilisé que ce soit par les administrations, des sociétés privées ou des associations.&lt;/p&gt;

&lt;p&gt;Afin de faciliter les contributions et ajouter une couche d’abstraction du versionnement pour les rédacteurs, on peut utiliser le service &lt;a href=&quot;http://prose.io/#about&quot;&gt;prose.io&lt;/a&gt;, qui propose une interface graphique pour éditer des fichiers Markdown reliée avec votre dépôt Github.&lt;/p&gt;

&lt;h2 id=&quot;un-workflow-naturel&quot;&gt;Un workflow naturel&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Jekyll transitions smoothly between prototyping, content authoring, and deployment tasks — &lt;a href=&quot;https://developmentseed.org/blog/2011/09/09/jekyll-github-pages/&quot;&gt;Young Hahn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Le gestionnaire de contenu statique peut être utilisé dès la phase de prototypage, les contenus peuvent être ajoutés au fur et à mesure et après avoir itéré jusqu’à parvenir à un premier résultat assez satisfaisant, le déploiement en production en devient anecdotique.&lt;/p&gt;

&lt;p&gt;La documentation et le &lt;a href=&quot;http://styleguides.io/&quot;&gt;styleguide&lt;/a&gt; peuvent également être générés lors de l’étape de &lt;em&gt;build&lt;/em&gt;, ce qui assure qu’ils soient tout le temps à jour. Grâce à Git, les développeurs, les designers et les rédacteurs partagent un processus de travail commun.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unless it’s part of your build, your styleguide is just more documentation to maintain — &lt;a href=&quot;https://speakerdeck.com/philhawksworth/static-sites-go-all-hollywood?slide=56&quot;&gt;Phil Hawksworth&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;des-services-gratuits&quot;&gt;Des services gratuits&lt;/h2&gt;

&lt;p&gt;Tous les jours les webdesigners et les développeurs front-end du monde entier consultent des sites de documentation servis en statique : &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&quot;http://foundation.zurb.com/&quot;&gt;Foundation&lt;/a&gt;, &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;NodeJS&lt;/a&gt; ou &lt;a href=&quot;https://developers.google.com/web/fundamentals/&quot;&gt;Google Web fundamentals&lt;/a&gt; pour n’en citer que quelques uns.&lt;/p&gt;

&lt;p&gt;Beaucoup sont hébergés sur Github pour faciliter les contributions et à ce jour le service &lt;a href=&quot;https://github.com/blog/1992-eight-lessons-learned-hacking-on-github-pages-for-six-months&quot;&gt;GitHub Pages héberge près d’un million de sites statiques&lt;/a&gt;, qui sont tous stockés sur des CDN. Le service étant gratuit pour les projets open-source, il serait dommage de s’en priver. C’est d’ailleurs ce que nous avons fait pour le site de &lt;a href=&quot;http://sudweb.fr/2016/&quot;&gt;Sud Web&lt;/a&gt;. D’autres services similaires ont depuis vu le jour comme &lt;a href=&quot;https://pages.gitlab.io/&quot;&gt;Gitlab Pages&lt;/a&gt; ou &lt;a href=&quot;https://www.netlify.com/pricing&quot;&gt;Netlify&lt;/a&gt;, qui proposent des formules gratuites pour les projets en open-source.&lt;/p&gt;

&lt;p&gt;Cela ne vous coûte donc rien d’essayer !&lt;/p&gt;

&lt;h2 id=&quot;un-web-de-services&quot;&gt;Un web de services&lt;/h2&gt;

&lt;p&gt;Les générateurs de site statique ne font qu’une chose et le font bien et si vous avez besoin de fonctionnalités supplémentaires comme du paiement en ligne, vous passez par des services tiers comme en dynamique. On s’éloigne du monolithique pour se rapprocher de la philosophie des &lt;a href=&quot;/2015/02/09/applications-monolithiques-contre-microservices/&quot;&gt;microservices&lt;/a&gt;, votre application interagit avec plusieurs services, chacun est interchangeable et vous permet de choisir le plus adapté à vos besoins.&lt;/p&gt;

&lt;p&gt;Comme &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; ou &lt;a href=&quot;http://prose.io/#about&quot;&gt;prose.io&lt;/a&gt;, de nouveaux services permettent de faciliter le déploiement ou d’améliorer l’expérience utilisateur :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://cloudcannon.com/&quot;&gt;Cloudcannon&lt;/a&gt; propose une interface graphique pour gérer Jekyll et ses contenus. Parmi ses clients, Netflix l’utilise pour présenter la &lt;a href=&quot;https://devices.netflix.com&quot;&gt;diversité d’appareils&lt;/a&gt; avec lesquels il est possible de consulter leurs contenus.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.contentful.com/&quot;&gt;Contenful&lt;/a&gt; est un service de modélisation et d’édition de contenus et propose ensuite des APIs pouvoir les diffuser sur différentes plateformes. Vos contenus peuvent être récupérés de différents endroits et assemblés avant d’être importés dans Jekyll, &lt;a href=&quot;https://middlemanapp.com/&quot;&gt;Middleman&lt;/a&gt; ou &lt;a href=&quot;http://roots.cx/&quot;&gt;roots&lt;/a&gt; par exemple.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.netlify.com/&quot;&gt;Netlify&lt;/a&gt; se propose d’optimiser la performance et l’hébergement de vos sites statiques sur leurs CDN et d’automatiser vos assets et le déploiement en y connectant directement votre dépôt Github ou Bitbucket. NodeJS est dispo par défaut, à vous les web apps performantes !&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://eager.io/&quot;&gt;Eager.io&lt;/a&gt; se propose de faciliter l’intégration &lt;a href=&quot;https://eager.io/apps&quot;&gt;de services tiers&lt;/a&gt; à votre site statique.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ces différents services permettent de mettre en place des architectures décentralisées comme l’a fait l’agence &lt;a href=&quot;http://carrot.is/coding/static_cms&quot;&gt;Carrot&lt;/a&gt;, éditrice du gestionnaire de contenu roots :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://netlify.scdn4.secure.raxcdn.com/cf89f31c56172ed6da0e895513d16fbb717b01a2/b3215/img/coding/contentful_netlify_workflow.svg&quot; alt=&quot;Exemple d'architecture de services pour servir du statique&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Bien sur on peut se poser la question de la dépendance à des services, mais rien ne vous empêche d’héberger ou de sauvegarder vos sites statiques sur vos propres serveurs.&lt;/p&gt;

&lt;p&gt;Tom Preston-Werner &lt;a href=&quot;https://youtu.be/BMve1OCKj6M?t=39m55s&quot;&gt;expliquait&lt;/a&gt; lors de la première &lt;a href=&quot;http://jekyllconf.com/&quot;&gt;JekyllConf&lt;/a&gt;, que &lt;strong&gt;si certains sites redeviennent statiques, c’est qu’ils auraient toujours du le rester&lt;/strong&gt;, mais que nous ne disposions pas il y a dix ans de tous les outils actuels. Lorsque le dynamique est arrivé c’est devenu la solution par défaut. Sauf que vous ne pouvez pas servir du dynamique à des millions de personnes en même temps. Vous vous heurtez à un moment à des problèmes d’échelle. Générer le même contenu pour tous vos visiteurs est souvent préférable, c’est ce que fait Github la plupart du temps. Les lignes entre le statique et le dynamique sont floues car ces derniers peuvent aussi générer du statique, le mettre en cache et le servir sur des CDNs.&lt;/p&gt;

&lt;p&gt;Il existe en effet des extensions pour générer du statique à partir de Drupal ou de Wordpress si vos contenus ne changent pas en permanence.  Si vous préférez y aller en douceur, sachez que &lt;a href=&quot;https://www.netlify.com/blog/2016/03/10/go-static-without-losing-your-server&quot;&gt;le statique cohabite très bien avec le dynamique&lt;/a&gt;, vous pouvez donc tirer le meilleur parti des deux mondes.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Penser statique par défaut, n’est pas du tout une mode destinée à rester confidentielle parmi les hackers, c’est une réponse simple à des problématiques complexes. Gardez en tête que 78% des sites sous Wordpress souffrent de vulnérabilités et que quand une faille de sécurité impacte Drupal, des millions de sites sont concernés.&lt;/p&gt;

&lt;p&gt;C’est donc une solution que vous devriez sérieusement considérer si vous souhaitez réduire vos coûts d’infrastructure sur des sites à fort trafic. &lt;strong&gt;Sur des sites très fréquentés le coût peut être divisé par 15&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Le statique est idéal pour des sites de contenus : présentation produit, documentation, blog ou application web (&lt;a href=&quot;/2016/06/28/que-sont-les-progressive-web-apps/&quot;&gt;progressive&lt;/a&gt;) en JavaScript, en revanche il n’est pas adapté pour des sites où le contenu est majoritairement généré par les utilisateurs.&lt;/p&gt;

&lt;p&gt;L’écosystème autour est en plein essor et va fort logiquement continuer de se développer. Une des priorité est maintenant de rendre ces outils encore plus accessibles aux rédacteurs. Github continue de soutenir le développement de Jekyll et développe actuellemnt &lt;a href=&quot;https://github.com/jekyll/jekyll-admin&quot;&gt;une interface utilisateur pour la rédaction et l’administration&lt;/a&gt; à l’instar de ce que propose différentes plateformes de &lt;em&gt;Content as a Service&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Vous l’aurez compris, la mouvance statique ne fait que commencer et l’engouement devrait continuer de croître dans les années qui viennent.&lt;/p&gt;

&lt;p&gt;J’espère surtout que cet article vous fera réfléchir à deux fois avant de partir les yeux fermés sur un bon vieux gros CMS dynamique pour votre prochain projet. Vous connaissez maintenant les nouveaux paradigmes qui laissent présager une &lt;a href=&quot;http://www.meetup.com/fr-FR/The-New-Dynamic/&quot;&gt;ère post-CMS&lt;/a&gt; comme certains l’appellent déjà.&lt;/p&gt;

&lt;p&gt;Cet article a été rédigé suite à une &lt;a href=&quot;https://speakerdeck.com/dirtyf/keep-it-static-stupid&quot;&gt;présentation&lt;/a&gt; faite lors d’un apéroweb dont voici les slides.&lt;/p&gt;

&lt;p&gt;&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;03e3e66c6d2845158240a3aa50f50b11&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;/2016/10/02/ne-passons-pas-a-cote-des-choses-simples/&quot;&gt;Ne passez pas à côté des choses simples&lt;/a&gt;&lt;/strong&gt;, c’est le message que vous avons voulu faire passer avec l’ami Bertrand Keller lors de &lt;a href=&quot;https://www.paris-web.fr/2016/conferences/ne-passons-pas-a-cote-des-choses-simples.php&quot;&gt;Paris Web 2016&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jekyll-fr.org/&quot;&gt;Jekyll-fr&lt;/a&gt; regroupe quelques utilisateurs francophones de générateurs de site statique. Nous publions des liens d’&lt;a href=&quot;https://twitter.com/jekyll_fr&quot;&gt;actualité autour des générateurs sur Twitter&lt;/a&gt;. Nous échangeons et nous nous entraidons sur le &lt;a href=&quot;https://jekyll-fr.herokuapp.com/&quot;&gt;channel Slack&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jeyll&lt;/a&gt; est le gestionnaire de contenu statique le plus populaire, en partie car il est supporté nativement par &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt;. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;Quand les conventions priment, le développeur a moins de choix à faire, mais ne perd pas pour autant en flexibilité - source &lt;a href=&quot;https://en.wikipedia.org/wiki/Convention_over_configuration&quot;&gt;Wikipedia&lt;/a&gt;. &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:headless-cms&quot;&gt;
      &lt;p&gt;Quelques services d’édition de contenu en ligne :  &lt;a href=&quot;http://cloudcannon.com/&quot;&gt;Cloudcannon&lt;/a&gt; et  &lt;a href=&quot;http://www.siteleaf.com/&quot;&gt;Siteleaf&lt;/a&gt; pour Jekyll, &lt;a href=&quot;https://forestry.io/&quot;&gt;Forestry.io&lt;/a&gt; pour Jekyll et Hugo, ou &lt;a href=&quot;https://bowtie.io&quot;&gt;Bowtie&lt;/a&gt; pour n’importe quel générateur de site statique. &lt;a href=&quot;#fnref:headless-cms&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">En quelques années, les gestionnaires de contenu statique, Jekyll en tête sont devenus très populaires, de Google à Netflix en passant par Mailchimp, Mapbox ou NodeJS, ils sont partout et sont devenus le choix de la raison pour les sites de contenus à fort trafic. Leurs usages évoluent et de nouveaux services dédiés viennent enrichir et faciliter l’expérience utilisateur des contributeurs et des développeurs.

Cette stack permet aux différents intervenants de se concentrer sur l’essentiel. Les rédacteurs peuvent ainsi rédiger leurs articles au format Markdown, un format texte très simple et très lisible, qui facilité la portabilité.

L’article que vous êtes en train de lire est écrit dans une application de bureau à l’interface minimale spécialement conçue pour offrir une bonne expérience de rédaction. Comme le dit Golden Krishna dans son livre, la meilleure interface c’est encore de ne pas en avoir.

Performance, sécurité, décentralisation, portabilité, autant d’excellentes raisons derrière l’adoption croissante de cette stack qui combine souvent JavaScript, des APis et du Markup.

Essayons de comprendre ce qui pourrait passer pour un retour en arrière aux yeux de certains, alors qu’il faut simplement y voir une évolution logique d’un processus de publication parfaitement adapté à notre manière asynchrone de travailler et aux ressources technologiques actuelles.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://frank.taillandier.me/assets/img/2016/03/jekyll-terminal.png" /></entry><entry><title type="html">Comprendre le MVP (Produit Minimal Valable ) - et pourquoi je lui préfère un produit rapidement testable, utilisable et adorable</title><link href="http://frank.taillandier.me/agile/2016/01/28/comprendre-le-mvp/" rel="alternate" type="text/html" title="Comprendre le MVP (Produit Minimal Valable ) - et pourquoi je lui préfère un produit rapidement testable, utilisable et adorable" /><published>2016-01-28T00:00:00+01:00</published><updated>2016-01-28T00:00:00+01:00</updated><id>http://frank.taillandier.me/agile/2016/01/28/comprendre-le-mvp</id><content type="html" xml:base="http://frank.taillandier.me/agile/2016/01/28/comprendre-le-mvp/">&lt;p&gt;Si vous vous intéressez à l’agilité, vous êtes peut-être déjà tombé sur le fameux dessin d’Henrik Kniberg qui compare deux façons d’arriver à construire une voiture. En informatique les métaphores sont toujours un peu casse-gueule et mènent parfois à des incompréhensions. Du coup Henrik, coach agile connu pour son accompagnement des équipes de Spotify, de Lego et ses ouvrages de référence, s’est senti obligé de préciser la sémiologie de son dessin.&lt;/p&gt;

&lt;p&gt;Grâce à des exemples concrets, son article devrait vous aider à mieux comprendre l’état d’esprit, qu’on retrouve dans le Lean Startup ou dans la démarche UX : tout repose sur une implication forte des utilisateurs dans la phase de conception afin de minimiser les risques dans un environnement de plus en plus concurrentiel, avec des exigences de plus en plus élevées.&lt;/p&gt;

&lt;p&gt;On pourrait résumer cette philosophie par “Adaptez ou échouez”.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;p&gt;&lt;em&gt;Traduction de l’&lt;a href=&quot;http://blog.crisp.se/2016/01/25/henrikkniberg/making-sense-of-mvp&quot;&gt;article&lt;/a&gt; d’Henrik Kniberg&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Il y a quelques années, j’ai fait ce dessin et j’ai commencé à l’utiliser dans diverses présentations à propos du développement agile et lean.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-.jpg&quot; alt=&quot;Pas comme ça… comme ça!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Depuis le dessin est devenu viral ! On le retrouve un peu partout, dans des articles, des présentations et même dans un livre (&lt;em&gt;&lt;a href=&quot;http://www.amazon.com/User-Story-Mapping-Discover-Product/dp/1491904909&quot;&gt;User Story Mapping&lt;/a&gt;&lt;/em&gt; de Jeff Patton - excellent au passage). Beaucoup me disent que le dessin capture vraiment ce qui représente l’essence du développement itératif et incrémental, le lean startup, le MVP (Produit Minimum Valable) et son contraire. Toutefois beaucoup de personnes l’interprètent mal, ce qui est bien naturel quand vous montrez un dessin hors de son contexte d’origine. D’autres lui reprochent de trop simplifier les choses, ce qui est vrai. Cette image est une métaphore. Elle ne représente pas le véritable développement d’une voiture, elle parle du développement de produit en général en ayant recours à la voiture comme métaphore.&lt;/p&gt;

&lt;p&gt;Bref, avec tout ce raffut, je me suis dit qu’il était temps d’expliquer le raisonnement qui se cache derrière.&lt;/p&gt;

&lt;h2 id=&quot;premier-exemple--pas-comme-a&quot;&gt;Premier exemple – Pas comme ça&lt;/h2&gt;

&lt;p&gt;La ligne du haut illustre une idée fausse très répandue à propos de développement itératif et incrémental de produit (communément appelé Agile).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-1.jpg&quot; alt=&quot;exemple d'étapes d'un développement incrémental &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Beaucoup de projets échouent méchamment car ils cherchent à livrer façon &lt;em&gt;Big Bang&lt;/em&gt; (on construit le truc jusqu’à ce ce soit terminé à 100% et on livre à la fin). J’ai perdu le compte du nombre de projets que j’ai vu échouer pour cette raison (nous verrons quelques exemples plus bas).&lt;/p&gt;

&lt;p&gt;Maintenant, quand l’Agile est présenté comme une alternative, les gens rechignent à l’idée de livrer un produit inachevé - qui voudrait de la moitié d’une voiture ? Imaginez ceci :&lt;/p&gt;

&lt;p&gt;« Hé Monsieur, voici notre première itération, un pneu avant. Qu’en pensez-vous ? »&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-2.jpg&quot; alt=&quot;Première étape, le client n'est pas content du produit livré&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le client réagit de la sorte : « Mais qu’est-ce que vous fichez à me livrer un pneu ? J’ai commandé une VOITURE ! Qu’est-ce que je suis supposé faire avec ça ?&lt;/p&gt;

&lt;p&gt;(Au fait ici j’utile le terme &lt;em&gt;client&lt;/em&gt; aussi comme un terme générique pour parler de gens comme les managers produit, les responsables produit ainsi que les premiers utilisateurs de votre produit.)&lt;/p&gt;

&lt;p&gt;À chaque livraison, le produit se rapproche du produit fini, mais le client est toujours frustré car il ne peut pas vraiment utiliser le produit. C’est toujours une voiture partielle.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-3.jpg&quot; alt=&quot;Étapes 2 et 3, le client est toujours mécontent devant un produit pas encore utilisable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Au final, lorsque le produit est terminé, le client vous dit « Merci, Enfin ! Pourquoi n’avez vous pas simplement livré ça directement en sautant toutes les autres livraisons inutiles ? »&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-4.jpg&quot; alt=&quot;Étape 4 le client est content devant le produit fini&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans cet exemple il est content du produit final car c’est ce qu’il a commandé. Dans les faits, ce n’est pas vraiment vrai. Beaucoup de temps s’est écoulé sans véritable test utilisateur, donc le produit est probablement rongé par des défauts de conception, dus à des hypothèses incorrectes sur les besoins des utilisateurs. Donc cette tête de smiley à la fin est très idéaliste.&lt;/p&gt;

&lt;p&gt;Quoi qu’il en soit, la première rangée représente l’&lt;em&gt;agile dévoyé&lt;/em&gt;. Techniquement cela a beau être une livraison incrémentale et itérative, l’absence d’une véritable boucle de retours la rend très risquée - et tout sauf agile.&lt;/p&gt;

&lt;p&gt;D’où le titre « Pas comme ça ».&lt;/p&gt;

&lt;h2 id=&quot;deuxieme-exemple--comme-a-&quot;&gt;Deuxieme exemple – Comme ça !&lt;/h2&gt;

&lt;p&gt;Passons maintenant à la deuxième ligne.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-5.jpg&quot; alt=&quot;Exemple d'étapes d'un développement itératif &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ici nous adoptons une démarche très différente. Nous partons du même contexte - le client a commandé une voiture. Mais cette fois nous n’allons pas juste construire une voiture. Nous allons plutôt &lt;strong&gt;nous focaliser sur le besoin sous-jacent que le client veut remplir&lt;/strong&gt;. Il s’avère que ce besoin sous-jacent est « j’ai besoin de pouvoir me rendre plus vite d’un point A à un point B » et la voiture n’est qu’une des solutions envisageables pour cela. Rappelez-vous, la voiture n’est qu’une métaphore, pensez à n’importe quelle situation de développement de produit sur mesure.&lt;/p&gt;

&lt;p&gt;Donc l’équipe livre la plus petite chose à laquelle elle peut penser qui permettra au client de tester des choses et de faire des retours. Certains appeleront cela un MVP (Produit Minimum Valable) mais je préfère l’appeler Produit Rapidement Testable (nous reparlerons de tout ça plus bas).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-6.jpg&quot; alt=&quot;Première étape, le client n'est pas vraiment emballé&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Appelez cela comme vous voulez (certains appellent même leur première release la « version skateboard » du produit, à cause de ce dessin).&lt;/p&gt;

&lt;p&gt;Il est peu probable que le client se contente de cela. Cela n’a rien à voir avec la voiture qu’il a commandée. Mais c’est OK ! Le truc c’est que &lt;strong&gt;nous ne visons pas la satisfaction client à ce stade&lt;/strong&gt;. Nous pourrions rendre quelques uns des premiers utilisateurs heureux (ou faire souffrir des &lt;a href=&quot;http://ericsink.com/Act_Your_Age.html&quot;&gt;pragmatistes&lt;/a&gt;) mais &lt;strong&gt;notre objectif principal à ce stade est juste d’apprendre&lt;/strong&gt;. Idéalement, l’équipe explique cela de façon très claire au client dès le début, pour pas qu’il ne soit trop déçu.&lt;/p&gt;

&lt;p&gt;En revanche, contrairement au volant dans le premier scénario le skateboard est en l’occurence un produit utilisable qui aide le client à aller plus vite de A à B. Pas génial, mais toujours mieux que rien. Nous disons alors au client « Ne vous inquiétez pas le projet n’est pas fini, ce n’est que la première d’une série d’itérations. &lt;strong&gt;Nous visons toujours la construction d’une voiture, mais en attendant merci d’essayer ceci et de nous faire  vos retours&lt;/strong&gt;. Pensez grand, mais livrez de petits incréments fonctionnels valables.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Nous pourrions apprendre des choses vraiment surprenantes. Supposons que le client dise qu’il déteste le skateboard, nous lui demandons pourquoi et il répond : « Je déteste la couleur. »  Nous disons quelques chose comme : « euh… la couleur ? C’est tout ? ». Et le client répond « Ouais, faites le en bleu ! À part ça, c’est parfait ! ». Vous venez d’économiser &lt;strong&gt;beaucoup&lt;/strong&gt; d’argent en ne construisant pas la voiture ! Peu probable, mais qui sait ?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;La question clef c’est « &lt;strong&gt;Quelle est la manière la plus rapide et la moins chère de pouvoir commencer à apprendre&lt;/strong&gt; ? » Pouvons nous livrer quelque chose encore plus vite qu’un skateboard ? ET pourquoi pas un ticket de bus ?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-7.jpg&quot; alt=&quot;Ticket de bus&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Est-ce que cela aidera à résoudre le problème de l’utilisateur ? Peut-être, peut-être pas, mais nous allons surement apprendre quelque chose en mettant cela entre les mains de vrais utilisateurs. Le &lt;a href=&quot;http://theleanstartup.com/book&quot;&gt;Lean Startup&lt;/a&gt; offre un excellent modèle qui propose de lister toutes vos hypothèses actuelles à propos des utilisateurs et ensuite de travailler systématiquement à les valider ou les invalider.&lt;/p&gt;

&lt;p&gt;Vous n’avez pas besoin de faire tester le produit à tous les utilisateurs et vous n’avez pas besoin de contruire un produit pour tester quelque chose. &lt;strong&gt;Tester un prototype ne serait-ce que sur un seul utilisateur vous apprendra toujours quelque chose&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Bon OK, revenons à l’exemple du skateboard.&lt;/p&gt;

&lt;p&gt;Après avoir joué avec dans le bureau, le client dit «  OK, c’est marrant et ça me fait aller plus vite à la machine à café. Mais c’est instable. Je tombe trop facilement. »&lt;/p&gt;

&lt;p&gt;Donc à la prochaine itération, nous essayons de résoudre ce problème, ou au moins d’en apprendre plus là dessus.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-8.jpg&quot; alt=&quot;Deuxième étape, le client commencer à apprécier le produit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le client peut maintenant se balader dans les bureaux sans tomber !&lt;/p&gt;

&lt;p&gt;Satisfait ? Pas vraiment, il aimerait quand même bien cette voiture. Mais en attendant il utilise ce produit et nous fait des retours. Ce dont il se plaint le plus c’est que c’est difficile de parcourir de plus longues distances, entre deux bâtiments, à cause des petites roues et de l’abscence de freins. Du coup, pour la prochaine version le produit se transforme en quelque chose qui ressemble à un vélo.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-9.jpg&quot; alt=&quot;Troisième étape, le client apprécie le produit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Maintenant le client peut se déplacer à tout vitesse autour du campus. Youpi !&lt;/p&gt;

&lt;p&gt;Nous avons appris des choses en cours de route : le client aime le contact de l’air frais sur son visage. Le client est sur un campus et se déplace surtout entre les bâtiments.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Le vélo pourrait se révéler être un bien meilleur produit que la voiture envisagée à l’origine&lt;/strong&gt;. En fait, en testant ce produit nous pourrions apprendre que les chemins sont de toute façon trop étroits pour une voiture. Nous avons juste fait économiser au client beaucoup de temps et d’argent, et nous lui avons fourni un produit plus adapté en moins de temps !&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Maintenant vous pourriez penser «  Mais n’aurions nous pas dû déjà savoir cela à l’aide de données issues du contexte de l’utilisateur et de ces besoins ? ». Bonne remarque. Mais dans la plupart des scénarii de développement de produit que j’ai pu observer dans la vraie vie, &lt;strong&gt;peu importe le nombre d’analyses préparatoires que vous faites, vous serez toujours surpris quand vous mettrez la première version de votre produit dans les mains de l’utilisateur&lt;/strong&gt;, et beaucoup de vos hypothèses se révèleront être à côté de la plaque.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Alors &lt;strong&gt;oui, faites des recherches préparatoires, découvrez en autant que vous pouvez avant de commencer le développement, mais ne passez pas trop de temps dessus et ne vous fiez pas trop aux analyses&lt;/strong&gt; - commencez plutôt à prototyper et à publier, c’est là qu’a lieu le véritable apprentissage.&lt;/p&gt;

&lt;p&gt;Bien, revenons en à notre histoire. Peut-être que le client en veut plus. Parfois il a besoin de se rendre dans une autre ville, et la balade à vélo est trop lente et fait suer. Nous ajouterons un moteur à la prochaine itération.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-10.jpg&quot; alt=&quot;Quatrième étape, le client aime bien son produit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Ce modèle convient particulièrement bien au logiciel — le &lt;em&gt;soft&lt;/em&gt;ware est souple par définition. Vous pouvez &lt;em&gt;transformer&lt;/em&gt; le produit au fur et à mesure, contrairement au matériel où vous aurez essentiellement à reconstruire à chaque fois. Mais, même dans les projets matériels, il y a d’énormes bénéfices à livrer des prototypes pour observer et apprendre comment les clients utilisent votre produit. C’est simplement que les itérations tendent à être un peu plus longues (des mois plutôt que des semaines). Même de vraies entreprises automobiles comme Toyota et Tesla font beaucoup de prototypage (croquis, modèles 3D, &lt;a href=&quot;http://www.toyota-global.com/showroom/toyota_design/voice_of_design/03.html&quot;&gt;modèle à l’échelle en argile&lt;/a&gt;, etc.) avant de développer un nouveau modèle de voiture.&lt;/p&gt;

&lt;p&gt;Et maintenant ? Encore une fois, peut-être le client est-il satisfait de la moto. Nous pourrions mettre un terme au projet plus tôt que prévu. La plupart des produits fourmillent de trucs compliqués et de fonctionnalités que personne n’utilise. L’approche itérative est vraiment une manière de livrer moins, ou de &lt;strong&gt;trouver la façon la plus simple et la moins couteuse de répondre au besoin du client&lt;/strong&gt;. Rapprochez vous de l’extraodinaire. C’est très Zen.&lt;/p&gt;

&lt;p&gt;Ou, encore une fois, le client peut choisir de continuer, avec ou sans modifications des spécifications. Nous pourrions en fait  en arriver exactement à la même voiture que celle imaginée au départ. Toutefois, il est beaucoup plus probable que nous aurons récolté des points de vue déterminants en cours et que nous arriverons à quelque chose de légèrement différent. Comme cela :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-11.jpg&quot; alt=&quot;Cinquième étape, le client est emballé par son produit&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le client est fou de joie ! Pourquoi ? Parce que nous avons appris en cours de route qu’il apprécie l’air frais sur son visage, donc nous avons fini avec une décapotable. Il a eu une voiture au final, mais une meilleure voiture que ce qui était prévu à l’origine.&lt;/p&gt;

&lt;p&gt;Maintenant, prenons un peu de recul.&lt;/p&gt;

&lt;h2 id=&quot;cest-quoi-votre-skateboard-&quot;&gt;C’est quoi votre skateboard ?&lt;/h2&gt;

&lt;p&gt;Le scénario du haut (livrer un pneu avant) est nul car nous continuons de livrer des trucs que le client ne peut pas du tout utiliser. Si vous savez ce que vous faites - votre produit ne comporte que peu de complexité et de risque, peut-être avez vous fait ce genre de choses des centaines de fois auparavant - alors continuez à juste faire du &lt;em&gt;Big Bang&lt;/em&gt;. Construisez votre truc et livrez quand c’est terminé.&lt;/p&gt;

&lt;p&gt;Maintenant, la majorité des efforts pour produire du logiciel que j’ai pu observer sont bien trop complexes et risqués pour cela et l’approche &lt;em&gt;Big Bang&lt;/em&gt; mène trop souvent à d’énormes et coûteux échecs. Donc la question à se poser c’est : &lt;strong&gt;C’est quoi votre skateboard&lt;/strong&gt; ?.&lt;/p&gt;

&lt;p&gt;Dans le développement de produit, une des premières choses à faire (après décrire le problème que vous essayez de résoudre et pour qui) c’est d’identifier votre équivalent du skateboard.&lt;/p&gt;

&lt;p&gt;Pensez au skateboard comme à &lt;strong&gt;une métaphore comme la plus petite chose que vous pouvez mettre dans les mains des utilisateurs et obtenir de vrais retours&lt;/strong&gt;. Ou utilisez le « ticket de bus » si cette métaphore marche mieux.&lt;/p&gt;

&lt;p&gt;Cela vous donnera la boucle de retour nécessaire et vous donnera à vous et à votre client plus de contrôle sur le projet — vous pouvez apprendre et faire des changements, plutôt que de suivre le plan et prier pour le meilleur.&lt;/p&gt;

&lt;p&gt;Prenons quelques exemples issus de la vraie vie.&lt;/p&gt;

&lt;h2 id=&quot;exemple-1--le-lecteur-de-musique-spotify&quot;&gt;Exemple 1 : le lecteur de musique Spotify&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;« Avec plus de 75 millions d’utilisateurs, c’est difficile d’imaginer une époque sans Spotify. Mais elle a existé. Un temps où nous encombrions tous les allées de la FNAC pour acheter de nouveaux CDs. Une époque où nous sommes tous devenus des voleurs sur Napster. Une époque où iTunes nous obligeait à débourser 2 EUR par chanson. Et puis Spotify est arrivé. » — &lt;a href=&quot;http://techcrunch.com/gallery/a-brief-history-of-spotify/&quot;&gt;Techcrunch&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.spotify.com/&quot;&gt;Spotify&lt;/a&gt; est un produit plutôt chouette maintenant. Mais ça n’a pas démarré ainsi. J’ai eu la chance d’être impliqué très tôt dans cette fantastique aventure (et je le suis toujours).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-12.jpg&quot; alt=&quot;Interface mobile des premières versions de Spotify&quot; /&gt;&lt;/p&gt;

&lt;p&gt;En tant que startup en 2006, Spotify a été fondée sur quelques hypothèses clés : les gens sont contents de streamer (plutôt que de posséder) de la musique, les labels et les artistes veulent bien laisser les gens faire cela légalement, et du streaming stable et rapide est techniquement faisable. Souvenez-vous en 2006 lorsque streamer de la musique (avec Real Player par exemple) était une expérience assez horrible, et que la musique piratée était plutôt la norme. La partie technique du challenge était : « Est-il vraiment possible de construire un logiciel qui diffuse de la musique instantanément quand on appuie sur le bouton lecture ? Est-il possible de se débarasser de cette ennuyeuse barre de progression de « mise en tampon ? »&lt;/p&gt;

&lt;p&gt;Commencer petit ne signifie pas que nous ne pouvez pas penser grand. Voici l’un des premiers croquis de ce qu’ils avaient en tête :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-13.jpg&quot; alt=&quot;Croquis basse-définition de la première interface de Spotify &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Mais plutôt que de passer des années à construire le produit en intégralité et ensuite vérifier que les hypothèses sont valides, les développeurs se sont assis et ont monté un prototype technique, en y mettant la musique extraite qu’ils avaient sur leurs ordinateurs portables et ils ont commencé à expérimenter dans tous les sens pour trouver des façons de faire en sorte que la lecture soit stable et rapide. La métrique de référence était « Combien de millisecondes s’écoulent entre le moment où j’appuie sur le bouton lecture et lorsque j’entends la musique ? ». Cela devrait jouer presque instantanément et continuer de jouer de façon uniforme et sans aucun saut de lecture ! Une fois qu’il sont arrivés à quelque chose de décent, ils ont commencé à le tester eux-mêmes, et l’ont fait tester à leur famille et à leurs amis.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-14.jpg&quot; alt=&quot;Première version de l'interface de Spotify&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La version initiale ne pouvait pas être diffusée à une audience plus large, ce n’était pas du tout fini, il n’y avait aucune fonctionnalité si ce n’est la possibilité de jouer quelques chansons codées en dur, il n’y avait aucune autorisation légale ou de modèle économique. C’était leur skateboard.&lt;/p&gt;

&lt;p&gt;Mais &lt;strong&gt;ils ont mis sans avoir honte le skateboard dans les mains de vrais utilisateurs&lt;/strong&gt; - les amis et la famille - et ils ont rapidement eu les réponses dont ils avaient besoin. Oui c’était possible techniquement. Et oui les gens ont vraiment adoré le produit (ou plutôt ce que le produit pouvait devenir) ! &lt;strong&gt;Les hypothèses ont été validées&lt;/strong&gt; ! Le prototype fonctionnel aida à convaincre les labels de musique et les investisseurs et le reste, et bien cela appartient désormais à l’histoire.&lt;/p&gt;

&lt;h2 id=&quot;exemple-2--minecraft&quot;&gt;Exemple 2 : Minecraft&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-15.jpg&quot; alt=&quot;Écran d'accueil du jeu Minecraft&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://minecraft.net/&quot;&gt;Minecraft&lt;/a&gt; est l’un des jeux qui a rencontré le plus de succès dans l’histoire de développement des jeux, surtout si on prend en considération le coût de développement. Minecraft est aussi un des exemples les plus extrêmes de l’état d’esprit publier-tôt-publier-souvent. La première version diffusée publiquement a été faite seulement après &lt;a href=&quot;http://minecraft.gamepedia.com/Version_history&quot;&gt;6 jours de développement&lt;/a&gt; par &lt;a href=&quot;https://en.wikipedia.org/wiki/Markus_Persson&quot;&gt;une seule personne&lt;/a&gt; ! Vous ne pouviez pas faire grand chose avec la première version - c’était tout compte fait un paysage en 3D avec des blocs moches où l’on pouvait récolter des blocs et les placer ailleurs pour bâtir des structures rudimentaires.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-16.jpg&quot; alt=&quot;Capture d'écran de la première version de Minecraft&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C’était le skateboard.&lt;/p&gt;

&lt;p&gt;Les utilisateurs furent tout de même très investis (c’est assez marrant que la communication entre le développeur et les utilisateurs ait eu lieu sur Twitter). Parmi les premiers utilisateurs, il y avait moi et mes quatre enfants. &lt;a href=&quot;http://minecraft.gamepedia.com/Version_history&quot;&gt;Plus de cent versions&lt;/a&gt; ont été diffusées la première année. Le développement de jeu consiste principalement à trouver ce qui procure du plaisir (certaines entreprises avec qui j’ai travaillé utilisent le terme « Définition de plaisir » à la place de « Définition de fini »), et le meilleur moyen d’y parvenir est d’avoir de vraies personnes qui jouent à ce jeu - et dans notre cas des milliers de personnes ont payé pour pouvoir essayer la première version en accès limité et ont donc eu une motivation personnelle pour aider à améliorer le jeu.&lt;/p&gt;

&lt;p&gt;Petit à petit, une petite équipe de développement s’est formée autour du jeu (principalement deux gars en fait), et le jeu a connu un succès fulgurant partout dans le monde. Je pense que nulle part je n’ai croisé un enfant qui ne jouait pas à Minecraft. Et l’année dernière le jeu (enfin la &lt;a href=&quot;https://mojang.com/&quot;&gt;société&lt;/a&gt; qui s’est formée autour du jeu) a été vendu à Microsoft pour 2.5 milliards de dollars. C’est assez incroyable.&lt;/p&gt;

&lt;h2 id=&quot;exemple-3-un-grand-projet-gouvernemental&quot;&gt;Exemple 3: Un grand projet gouvernemental&lt;/h2&gt;

&lt;p&gt;Vers 2010 &lt;a href=&quot;https://polisen.se/&quot;&gt;la police suédoise&lt;/a&gt; a démarré une grande initiative pour permettre à la police de passer plus de temps sur le terrain et moins au poste - PUST (Soutien aux Enquêtes de Police en français). Un projet fascinant, j’ai été impliqué en tant que coach et j’ai écrit un livre sur ce que nous avons fait et ce que nous avons appris (&lt;a href=&quot;https://pragprog.com/book/hklean/lean-from-the-trenches&quot;&gt;Lean from the Trenches&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-17.jpg&quot; alt=&quot;Policiers avec un ordinateur portable sur le terrain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;L’idée était d’équiper les voitures d’ordinateurs portables et de logiciel sur mesure pour permettre à la police d’avoir accès aux systèmes dont ils ont besoin en temps réel, par exemple lorsqu’ils interrogent un suspect (c’était avant l’arrivée des tablettes).&lt;/p&gt;

&lt;p&gt;Ils avaient essayé de mettre en place ce genre de système par le passé et avaient misérablement échoué, principalement à cause de la pensée &lt;em&gt;Big Bang&lt;/em&gt;. Ils me confièrent que pour l’un de leurs précédents essais, il s’était écoulé sept ans entre le début et la diffusion de la première version. SEPT ANS ! Entre temps bien sur tout avait changé et le projet était une échec complet. Donc cette fois ils voulaient faire ça autrement.&lt;/p&gt;

&lt;p&gt;Le projet de 60 personnes (connu plus tard sous le nom de « PUST Java ») a étonnamment bien fonctionné, surtout pour un important projet gouvernemental (il a été élu deuxième &lt;a href=&quot;http://cio.event.idg.se/event/awards2011/&quot;&gt;projet de l’année&lt;/a&gt; lors des CIO Awards). Une des principaux facteurs de réussite a été qu’&lt;strong&gt;ils n’ont pas essayé de tout faire d’un seul coup&lt;/strong&gt;) ils ont découpé l’éléphant en deux dimensions :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Par région. Nous n’avon pas besoin de diffuser à TOUTE la Suède d’un coup, nous pouvons commencer à diffuser à une une seule région.&lt;/li&gt;
  &lt;li&gt;Par type de crime. Nous n’avons pas besoin de prendre en charge tous les types de crimes dès le début, nous pouvons commencer en ne prenant en charge qu’un ou deux types de crime.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-18.jpg&quot; alt=&quot;tableau de release du logiciel pour la police suédoise&quot; /&gt;&lt;/p&gt;

&lt;p&gt;La première version, la 1.0, était leur skateboard.&lt;/p&gt;

&lt;p&gt;C’était un petit système, qui ne prenait en charge que quelques types de crimes et qui a été testé sur le terrain par une poignée de policiers à Östergötland (une région de la Suède). Les autres types de crime devaient être gérés à l’ancienne - retourner au poste et remplir la paperasse. &lt;strong&gt;Ils savaient qu’ils étaient des cobayes et que le produit était loin d’être terminé&lt;/strong&gt;. Mais ils étaient contents de le tester, parce qu’ils connaissait l’alternative. Ils avaient vu de quel genre de système merdique pouvait accoucher les process qui manquent de retours des premiers utilisateurs, et maintenant &lt;strong&gt;ils avaient enfin la possibilité d’avoir leur mot à dire sur un système pendant sa conception&lt;/strong&gt; !.&lt;/p&gt;

&lt;p&gt;Leurs retours furent durs et honnêtes. Beaucoup de nos hypothèses passèrent par la fenêtre et un des plus grands dilemmes était de savoir quoi faire des spécifications des études de cas élaborées avec soin qui s’avéraient de moins en moins utiles au fur et à mesure que les retours arrivaient (c’était une entité avec un passif d’organisation en cascade, habituée à faire beaucoup d’analyses en amont).&lt;/p&gt;

&lt;p&gt;Bref, pour faire court, &lt;strong&gt;les premiers retours étaient intégrés pour améliorer le produit&lt;/strong&gt; et petit à petit, comme les policiers d’Östergötland commençaient à apprécier le produit, nous avons pu ajouter d’autres types de crimes et déployer dans d’autres régions. Au moment où nous sommes arrivés à la grande diffusion (1.4), avec déploiement national et formation de 12000 policiers, nous n’étions pas si inquiets que ça. &lt;strong&gt;Nous avions publiés tellement de version, fait tant de tests utilisateurs, que nous avons bien dormi la nuit de la diffusion nationale&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Malheureusement la victoire fut de courte durée. Le projet suivant (PUST Siebel) l’a enterré et est revenu à une pensée en cascade, surement à cause des vieilles habitudes. Deux ans d’analyses et de tests sans aucune diffusion ni test utilisateur, suivi d’une publication à la « Big Bang » de la « prochaine génération » du produit aux 12000 policiers à la fois. Ce fut un désastre absolu, et après six mois d’hémorragie, ils ont mis un terme à tout cela. Le coût de développement s’est élevé à environ 20 millions d’euros, mais les études internes estiment que le coût pour la société Suédoise (car la police était handicapée par cet horrible système) était de l’ordre d’1 milliard !&lt;/p&gt;

&lt;p&gt;Une façon pour le moins coûteuse d’apprendre !&lt;/p&gt;

&lt;h2 id=&quot;exemple-4--lego&quot;&gt;Exemple 4 : Lego&lt;/h2&gt;

&lt;p&gt;Je travaille en ce moment pour &lt;a href=&quot;http://www.lego.com/&quot;&gt;Lego&lt;/a&gt;, et je suis bluffé par leur capacité à toujours sortir de grands succès, année après année, sans se planter. J’ai entendu beaucoup d’histoires intéressantes sur comment ils s’y prennent, et le point commun, c’est le prototypage et le test utilisateur au plus tôt ! Je vois souvent des groupes d’enfants dans les bureaux, et des designers collaborer avec des maternelles du coin, des écoles, des familles pour tester sur le terrain leurs dernières idées de produits.&lt;/p&gt;

&lt;p&gt;Voici un exemple récent. Les &lt;a href=&quot;http://www.lego.com/fr-fr/nexoknights/&quot;&gt;Nexo Knights&lt;/a&gt; (sortis en janvier 2016) :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-19.jpg&quot; alt=&quot;Figurines des Lego Nexo Knights&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lorsqu’ils ont commencé à explorer le concept, ils ont fait des prototypes papier et les ont montrés à de jeunes enfants. La première réaction des enfants fut « Hé, mais où sont les méchants ? Je vois pas qui est bon et qui est mauvais ! » Oups. Donc les designers ont continué à itérer et à tester  jusqu’à ce qu’ils trouvent un design qui marche pour les enfants. Je parie que même vous, vous ne devinez pas qui est bon et qui est méchant sur l’image précédente.&lt;/p&gt;

&lt;p&gt;Je ne sais pas vraiment où est le skateboard dans cette histoire, mais vous avez compris l’idée - &lt;strong&gt;récolter très tôt des retours de vrais utilisateurs&lt;/strong&gt;. Ne vous contentez pas de concevoir le produit et de le construire en intégralité. Imaginez s’ils avaient construit le produit basé sur leurs hypothèses de design d’origine, et avaient constaté le problème &lt;em&gt;après&lt;/em&gt; avoir distribué des milliers de boîtes dans les magasins du monde entier !&lt;/p&gt;

&lt;p&gt;Lego a également connu sa part d’échecs durement appris. Un exemple est &lt;a href=&quot;https://en.wikipedia.org/wiki/Lego_Universe&quot;&gt;Lego Universe&lt;/a&gt;, un monde Lego en ligne massivement multijoueur. Ça a l’air marrant hein ? Le problème c’est qu’ils ont été trop ambitieux et ont fini par essayer de construire tout le truc à la perfection avant de le monter au monde entier.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-20.jpg&quot; alt=&quot;Capture d'écran du jeu Lego Universe&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Environ &lt;strong&gt;250 personnes ont travaillé pendant 4 à 5 ans&lt;/strong&gt; (à cause d’un périmètre constamment en évolution causé par le perfectionnisme, et lors de la sortie du jeu, la réception a été… peu enthousiaste. Le jeu fini était beau mais pas aussi drôle que l’on aurait pu s’y attendre, en conséquence le produit fût arrêté au bout de deux ans.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Il n’y avait pas de skateboard&lt;/strong&gt; !&lt;/p&gt;

&lt;p&gt;Et pourquoi ça ? Parce que les skateboards ne sont pas géniaux (en tout cas pas si vous vous attendez à une voiture) et que la culture de Lego est avant tout de procurer des expériences géniales ! Si vous travailler au QG de Lego à Billand au Danemark, vous passerez devant cette énorme fresque murale tous les jours :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-21.jpg&quot; alt=&quot;Det Bedsten Er Ikke For Godt &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cela peut se traduire par « Seul le meilleur est assez bon ». Cela a été le principe directeur depuis la création de l’entreprise il y a plus de 80 ans et cela lui a permis d’être une des entreprises ayant rencontré le plus de succès dans le monde. Mais dans ce cas le principe a été mal appliqué. &lt;strong&gt;La recherche de la perfection a retardé le feedback vital&lt;/strong&gt;, ce qui signifie des erreurs sur les hypothèses de ce que les utilisateurs aiment ou n’aiment pas. L’exact opposé de Minecraft.&lt;/p&gt;

&lt;p&gt;Il est assez intéressant de noter que les équipes de Lego Universe utilisaient en fait Scrum et itéraient beaucoup - comme les gens de chez Minecraft. Mais les publications ne se firent qu’en interne. Donc il y a surement eu un skateboard, une bicyclette, et ainsi de suite, mais ces produits n’ont jamais atteint de vrais utilisateurs. Ce n’est pas comme ça que Scrum est prévu d’être utilisé.&lt;/p&gt;

&lt;p&gt;Ce fut un échec coûteux, mais  Lego a appris grâce à lui, et ils sont constamment en train de s’améliorer sur les tests en amont et les retours utilisateurs.&lt;/p&gt;

&lt;h2 id=&quot;amliorer-le-mvp&quot;&gt;Améliorer le MVP&lt;/h2&gt;

&lt;p&gt;Et cela (on respire un grand coup…) m’amène à la thématique du MVP - le produit minimum valable.&lt;/p&gt;

&lt;p&gt;L’idée sous-jacente est super, mais le terme en lui-même sème beaucoup de confusion et de peur. J’ai rencontré beaucoup de clients qui réagissent ainsi : « Pas moyen que je veuille publier un MVP - c’est la dernière des livraisons que j’aurais. » Bien trop souvent, les équipes livrent le soi-disant Produit Minimum Valable et puis se font vite embarquer dans le projet suivant, laissant le client avec un produit buggué et inachevé.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Pour certains clients, MVP = MMP (Merde Minimum Publiable&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-22.jpg&quot; alt=&quot;You will give me the Minimum Releasable Crap and I will move on to the next project!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Je sais, je sais, cela est davantage dû à un mauvais management qu’au terme MVP, mais quand même… le terme prête à confusion. « Minimum » et « Valable » ne signifient pas la même chose pour tout le monde et cela cause des problèmes.&lt;/p&gt;

&lt;p&gt;Donc voici une alternative.&lt;/p&gt;

&lt;p&gt;Tout d’abord, remplaçons le mot « Minimum » par « Rapide ». L’idée principale derrière la publication d’un MVP est d’avoir rapidement des retours - en livrant un produit minimum plutôt qu’un produit complet, nous pouvons avoir des retours au plus tôt.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Peu de clients veulent le « minimum » mais beaucoup veulent « rapidement »&lt;/strong&gt;. Donc c’est notre premier changement :&lt;/p&gt;

&lt;p&gt;Minimal =&amp;gt; Rapide&lt;/p&gt;

&lt;p&gt;Ensuite supprimons le mot « Valable » car il est trop vague. &lt;strong&gt;Ton « valable » est mon « horrible&lt;/strong&gt; ». Certaines personnes pensent que Valable veut dire «  quelque chose que je peux tester et qui peut générer des retours », d’autres pense que cela veut dire « quelque chose que le client peut vraiment utiliser ». Donc soyons plus explicites et découpons le en trois choses différentes :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-23.jpg&quot; alt=&quot;Aim for the clouds... but deliver in small steps &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Le &lt;strong&gt;Produit Testable Rapidement&lt;/strong&gt; est le skateboard ou le ticket de bus, &lt;strong&gt;la première version dont les clients pourront vraiment faire quelque chose&lt;/strong&gt;. Cela ne résoudra peut-être pas leur problème mais aura au moins le mérite de générer des retours. Nous disons très clairement que l’apprentissage est le but principal de cette version et que toute véritable valeur ajoutée pour le client sera un bonus.&lt;/p&gt;

&lt;p&gt;Le &lt;strong&gt;Produit Utilisable Rapidement&lt;/strong&gt; est peut-être la bicyclette. &lt;strong&gt;La première version que les premiers utilisateurs vont aimer utiliser&lt;/strong&gt;. C’est loin d’être terminé et ce sera peut être pas très agréable. Mais cela met vos clients dans une meilleure position que précédemment.&lt;/p&gt;

&lt;p&gt;Le &lt;strong&gt;Produit Adorable Rapidement&lt;/strong&gt; est peut-être la moto. &lt;strong&gt;La première version que les utilisateurs vont aimer, donc ils vont parler à leurs amis et qu’ils seront prêts à payer&lt;/strong&gt;. Il y a encore beaucoup de choses à améliorer et nous avons toujours la possibilité de finir avec une décapotable ou un avion, ou autre chose. Mais nous avons atteint le point où nous avons un produit  vraiment vendable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;J’ai considéré ajouté une étape de plus au début « &lt;strong&gt;Le produit à impressions rapide&lt;/strong&gt; » qui est à la base le prototype papier ou son équivalent que vous allez utiliser pour recueillir les premières impressions des utilisateurs. Mais quatre étapes ça semble trop. Mais quoi qu’il en soit, c’est aussi une étape importante. Certains appeleraient un prototype papier un Produit Testable Rapidement, mais j’imagine que tout dépend de ce que vous appelez Testable. Jetez un coup d’œsil au &lt;a href=&quot;https://www.crisp.se/mvpguide&quot;&gt;Guide MVP&lt;/a&gt; pour en savoir plus - il est plein de super exemples concrets sur comment avoir rapidement des retours avec un minimum d’investissement&lt;/em&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bien sûr les gens peuvent toujours mal interpréter Rapidement Testable/ Utilisable / Adorable mais c’est au moins un peu plus explicite que le nébuleux Produit Valable Minimum.&lt;/p&gt;

&lt;h2 id=&quot;les-points--retenir&quot;&gt;Les points à retenir&lt;/h2&gt;

&lt;p&gt;OK, il est temps de résumer. Je n’aurais jamais cru que ce serait si long, merci de m’avoir lu jusque ici ! Les points clefs à retenir :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Eviter les versions « Big Bang&lt;/strong&gt; » pour les développements produits complexes et innovants. Faites le de manière itérative et incrémentale. Vous le saviez déjà. Mais le faites-vous vraiment ?&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Commencez par identifier votre skateboard&lt;/strong&gt; - le produit testable rapidement. Visez la lune, mais ravalez votre orgueil et commencez par livrer le skateboard.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Evitez le terme MVP&lt;/strong&gt;. Soyez plus explicite sur ce dont vous parlez véritablement. Rapidement testable/Utilisable/Adorable est juste un exemple, utilisez n’importe quels termes du moment qu’ils sont moins confus pour vos investisseurs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Et rappelez vous - le dessin du skateboard et de la voiture est juste une métaphore, ne le prenez pas au pied de lettre :o)&lt;/p&gt;

&lt;p&gt;PS: Voici une histoire marrante qui raconte comment mes enfants et moi avons utilisé ces principes pour &lt;a href=&quot;http://blog.crisp.se/2015/10/06/henrikkniberg/how-2-kids-and-adult-rookies-won-a-robot-sumo-competition&quot;&gt;gagner une compétition de Robot Sumo&lt;/a&gt; :o)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Merci à Mary Poppendieck, Jeff Patton, Alistair Cockburn, Anders Haugeto, Sophia, mes collègue de chez Crisp, Spotify et Lego, and tous ceux qui m’ont fait plein de retours utiles&lt;/em&gt;.&lt;/p&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><category term="agile" /><summary type="html">Si vous vous intéressez à l’agilité, vous êtes peut-être déjà tombé sur le fameux dessin d’Henrik Kniberg qui compare deux façons d’arriver à construire une voiture. En informatique les métaphores sont toujours un peu casse-gueule et mènent parfois à des incompréhensions. Du coup Henrik, coach agile connu pour son accompagnement des équipes de Spotify, de Lego et ses ouvrages de référence, s’est senti obligé de préciser la sémiologie de son dessin.

Grâce à des exemples concrets, son article devrait vous aider à mieux comprendre l’état d’esprit, qu’on retrouve dans le Lean Startup ou dans la démarche UX : tout repose sur une implication forte des utilisateurs dans la phase de conception afin de minimiser les risques dans un environnement de plus en plus concurrentiel, avec des exigences de plus en plus élevées.

On pourrait résumer cette philosophie par “Adaptez ou échouez”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://blog.crisp.se/wp-content/uploads/2016/01/Making-sense-of-MVP-.jpg" /></entry><entry><title type="html">Applications monolithiques contre microservices</title><link href="http://frank.taillandier.me/2015/02/09/applications-monolithiques-contre-microservices/" rel="alternate" type="text/html" title="Applications monolithiques contre microservices" /><published>2015-02-09T00:00:00+01:00</published><updated>2015-02-09T00:00:00+01:00</updated><id>http://frank.taillandier.me/2015/02/09/applications-monolithiques-contre-microservices</id><content type="html" xml:base="http://frank.taillandier.me/2015/02/09/applications-monolithiques-contre-microservices/">&lt;p&gt;&lt;em&gt;Traduction de &lt;a href=&quot;http://technologyconversations.com/2015/01/07/monolithic-servers-vs-microservices/&quot;&gt;l‘article &lt;/a&gt; de Victor Farcic&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ces dernières années les microservices sont devenus de plus en plus populaires. Pourquoi ? Devriez-vous les utiliser ? Comment les mettre en place ? Autant de questions auxquelles cet article de &lt;a href=&quot;https://twitter.com/vfarcic&quot;&gt;Victor Farcic&lt;/a&gt; apporte un début de réponse pour vous aider dans vos choix d’architecture logicielle.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Au début les applications étaient petites et simples et ne comportaient que peu d’exigences. Avec le temps, les exigences et les besoins ont grandi et nos applications avec elles pour devenir plus grosses et plus complexes. Cela s’est traduit par des serveurs monolithiques développés et déployés d’une seul traite. Les Microservices sont, en un sens, un retour aux sources avec des applications simples qui remplissent les besoins de complexité d’aujourd’hui en fonctionnant ensemble à travers l’utilisation des APIs de chacune des autres.&lt;/p&gt;

&lt;h2 id=&quot;cest-quoi-un-serveur-monolithique-&quot;&gt;C’est quoi un serveur monolithique ?&lt;/h2&gt;

&lt;p&gt;La meilleure façon d’expliquer ce que sont les microservices; c’est encore de les comparer avec l’inverse : les serveurs monolithiques. Ils sont développés et déployés de manière unitaire. Dans le cas de Java, le résultat est souvent un fichier WAR ou JAR. C’est aussi vrai pour C++, .Net, Scala et beaucoup d’autres langages de programmation.&lt;/p&gt;

&lt;p&gt;Une grande partie de l’histoire du développement logiciel est marqué pour l’augmentation continue de la taille des applications que nous développons. Au fur et à mesure que nous ajoutons de plus en plus de choses dans nos applications nous augmentons leur complexité et leur taille et cela ralentit le développement, et la vitesse à laquelle nous pouvons tester et déployer.&lt;/p&gt;

&lt;p&gt;Avec le temps nous avons commencé à diviser nos applications en couches : la couche de présentation, la couche métier, la couche d’accès aux données, etc. Cette séparation est plus logique que physique. Même si le développement est devenu un peu plus simple, nous avons toujours besoin de tout tester et de tout déployer à chaque changement ou à chaque version. Il n’est pas rare dans certains environnements professionnels d’avoir des applications qui prennent des heures à compiler et à déployer. Tester, en particulier les régressions, peut virer au cauchemar et prendre et certains cas des mois. Avec le temps, notre capacité à faire des changements qui n’affectent qu’un seul module est réduite. Le principal objectif des couches est de faire en sorte qu’elles puissent être aisément remplacées ou mises à jour. Cette promesse n’a jamais vraiment été tenue. Remplacer quelque chose dans de grosses applications monolithiques c’est jamais vraiment facile et sans risques.&lt;/p&gt;

&lt;p&gt;Dimensionner de tels serveurs signifie dimensionner l’application entière et obtenir une utilisation très inégale des ressources. Si nous avons besoin de plus de ressources, nous sommes forcés de tout dupliquer sur un nouveau serveur, même si le goulot d’étranglement ne concerne qu’un seul module.&lt;/p&gt;

&lt;h2 id=&quot;que-sont-les-microservices-&quot;&gt;Que sont les microservices ?&lt;/h2&gt;

&lt;figure&gt;
  &lt;img src=&quot;https://technologyconversations.files.wordpress.com/2014/11/deployment_03_immutable_microservices_05.gif&quot; alt=&quot;&quot; /&gt;
  &lt;figcaption&gt;&lt;small&gt;Exemple d'architecture avec des microservices&lt;/small&gt;&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Les microservices sont une approche d’architecture et de développement d’une seule application composées de petits services. Ce qu’il faut bien comprendre dans les microservices, c’est leur indépendance. Chacun est développé, testé et déployé séparément des autres. Chaque service tourne dans un processus séparé. La seule relation entre les différents microservices est l’échange de données effectué à travers les différentes APIs qu’ils exposent. Ils reprennent, en un sens, l’idée de petits programmes et de tuyaux utilisés dans Unix/Linux. La majorité des programmes Linux sont petits et génèrent une sortie. Cette sortie peut-être utilisée comme entrée par d’autres programmes. Lorsqu’on les enchaîne, ces programmes peuvent réaliser des opérations très complexes. C’est une complexité né de la combinaison de quelques petites unités simples.&lt;/p&gt;

&lt;p&gt;Les aspects clef des microservices sont :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ils ne font qu’une seule chose et sont responsables d’une fonctionnalité,&lt;/li&gt;
  &lt;li&gt;chaque microservices peut être conçu à l’aide de n’importe quel outil ou langage puis que chaque microservice est indépendant des autres,&lt;/li&gt;
  &lt;li&gt;Ils sont vraiment faiblement couplés puisque chaque microservice est physiquement séparé des autres,&lt;/li&gt;
  &lt;li&gt;Indépendance relative entre les différentes équipes qui développement les différents microservices (en partant du principe que les APIs qu’ils exposent sont définis à l’avance).&lt;/li&gt;
  &lt;li&gt;Facilité des tests et du &lt;a href=&quot;http://technologyconversations.com/2014/11/27/continuous-deployment-introduction/&quot;&gt;déploiement ou de la livraison continue&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Un des problèmes avec les microservices est de décider quand les  utiliser. Au début, lorsque l’application est encore petite, les problèmes que tentent de résoudre les microservices n’existent pas encore. Toutefois, une fois que l’application a grossi et qu’on peut préconiser des microservices, le coût de migration vers une architecture différente peut s’avérer trop important. Les équipes expérimentées peuvent décider d’utiliser des microservices dès le départ en sachant que &lt;a href=&quot;/2014/11/06/intro-dette-technique/&quot;&gt;la dette technique&lt;/a&gt; qu’ils auraient à payer plus tard serait plus coûteuse que de commencer à travailler dès le début avec des microservices.&lt;/p&gt;

&lt;p&gt;Souvent, comme c’est le cas pour Netflix, eBay et Amazon, les applications monolithiques commencent à évoluer vers des microservices de façon graduelle. De nouveaux modules sont développés en tant que microservices et intégrés au reste du système. Une fois leur valeur prouvée, des parties de l’application monolithique existante sont refactorisées en microservices.&lt;/p&gt;

&lt;p&gt;Une des chose que critique les plus les développeurs d’applications professionnelles est la décentralisation du stockage de données.
Alors que les microservices peuvent fonctionner (avec quelques ajustements) en stockant les données de manière centralisée, la possibilité de décentraliser également cette partie devrait, à minima, être étudiée.&lt;/p&gt;

&lt;p&gt;Le choix de stocker séparément (de façon décentralisée) les données relatives à un service et d’emballer tout ça dans le même conteneur pourra souvent se révéler être une meilleure option que de stocker les données dans une base de données centralisée. Nous ne proposons pas d’utiliser systématiquement le stockage décentralisé mais de prendre cette option en considérant pendant la conception de microservices.&lt;/p&gt;

&lt;h2 id=&quot;inconvnients&quot;&gt;Inconvénients&lt;/h2&gt;

&lt;h3 id=&quot;accroissement-de-la-complexit-oprationnelle-et-du-dploiement&quot;&gt;Accroissement de la complexité opérationnelle et du déploiement&lt;/h3&gt;

&lt;p&gt;Un des principaux arguments contre les microservices est qu’il accroit la complexité opérationnelle et celle du déploiement. Cet argument est vrai mais grâce à à des outils relativement nouveaux, il peut être nuancé. Les outils de gestion de configuration (CM) peuvent gérer des configurations d’environnement et de déploiement relativement facilement. L’utilisation de conteneurs avec &lt;a href=&quot;//docker.com&quot;&gt;Docker&lt;/a&gt; réduit grandement les difficultés de déploiement que peuvent causer les microservices.
Les outils de &lt;abbr&gt;GC&lt;/abbr&gt; et Docker nous permettent de déployer et de dimensionner facilement. Un exemple est présent dans l’article &lt;a href=&quot;http://technologyconversations.com/2014/12/29/continuous-deployment-implementation-with-ansible-and-docker/&quot;&gt;Continuous Deployment: Implementation with Ansible and Docker&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;À mon avis, l’argument de l’accroissement constant de la complexité du déploiement ne prend généralement pas en compte les avancées que nous avons pu voir depuis quelques années dans le domaine et est donc grandement exagéré. Cela ne veut pas dire qu’une partie du travail n’a pas été transférée du développement vers DevOps. C’est définitivement le cas. Néanmoins, les bénéfices sont dans de nombreux cas bien plus importants que les inconvénients que produisent ce changement.&lt;/p&gt;

&lt;h3 id=&quot;les-appels-de-processus-distants&quot;&gt;Les appels de processus distants&lt;/h3&gt;

&lt;p&gt;Un autre contre-argument est la baisse de la performance causée par les appels de processus distants. Les appels internes des classes et des méthodes sont plus rapides et ce problème ne peut être omis. La manière dont la perte de performance va impacter un système est à analyser au cas par cas. Un facteur important est la façon dont nous allons segmenter notre système. Si nous adoptons une approche extrême avec de tous petits microservices (certains proposent qu’ils fassent entre 10 et 100 lignes de code) cet impact pourrait être considérable. J’aime créer des microservices organisés autour des fonctionnalités comme les utilisateurs, le panier d’achat, les produits, etc.
Cela réduit le nombre d’appel à des processus distants. Il est également important de noter que si les appels d’un microservices à un autre se sont à travers un LAN interne rapide, l’impact négatif est relativement faible.&lt;/p&gt;

&lt;h2 id=&quot;avantages&quot;&gt;Avantages&lt;/h2&gt;

&lt;p&gt;Les avantages qui suivent ne représentent qu’une partie de ce que les microservices peuvent apporter. Cela ne veut pas dire que le même avantage n’existe pas dans d’autres types d’architecture mais avec les microservices ils peuvent être un poil plus visibles qu’avec d’autres options.&lt;/p&gt;

&lt;h3 id=&quot;dimensionnement&quot;&gt;Dimensionnement&lt;/h3&gt;

&lt;p&gt;Dimensionner les microservices est plus facile qu’avec des applications monolithiques. Alors que dans le deuxième cas nous dupliquons toute l’application sur une nouvelle machine, avec les microservices nous ne dupliquons que ce qui a besoin d’être redimensionné. Non seulement nous ne pouvons dimensionner que ce qui a besoin de l’être mais nous pouvons mieux distribuer les choses. Nous pouvons par exemple, mettre un service qui fait une utilisation intensive du CPU avec un autre qui consomme beaucoup  de RAM pendant que nous déplaçons un deuxième service gourmand en CPU sur un matériel différent.&lt;/p&gt;

&lt;h3 id=&quot;innovation&quot;&gt;Innovation&lt;/h3&gt;

&lt;p&gt;Les serveurs monolithiques, une fois l’architecture initiale mise en place, ne laisse pas trop de place à l’innovation. De par leur nature, changer les choses prend du temps et l’expérimentation est très risquée puisque cela peut potentiellement affecter l’ensemble. On ne peut pas par exemple changer Apache Tomcat pour NodeJS simplement parce que ce serait plus adapté pour un module en particulier.&lt;/p&gt;

&lt;p&gt;Je ne suggère pas que nous devrions changer de langage de programmation, de serveur, de persistance, etc. pour chaque module. Mais, les serveurs monolithiques tendent à l’opposé et les changements sont risqués voire malvenus. Avec les microservices, nous pouvons choisir séparément ce que nous pensons être la meilleure solution pour chaque service. Un pourrait utiliser Apache Tomcat alors que l’autre utiliserait NodeJS. Un pourrait être écrit en Java et l’autre en Scala. Je ne suis pas en train de défendre le fait que chaque service devrait être différent du reste des autres mais chacun peut être conçu de la manière dont nous pensons qu’elle répond le mieux à l’objectif fixé.&lt;/p&gt;

&lt;p&gt;De plus, les modifications et les expériences sont plus faciles à faire. Après tout, quoi que l’on fasse, cela n’affecte qu’un des nombreux microservices et pas le système dans son ensemble du moment que l’API est respectée.&lt;/p&gt;

&lt;h3 id=&quot;la-taille&quot;&gt;La taille&lt;/h3&gt;

&lt;p&gt;Puisque les microservices sont petits, ils sont plus faciles à comprendre. Il y a beaucoup moins de code à parcourir pour comprendre ce qu’un micro service fait. Cela simplifie grandement en soi le développement, particulièrement lorsqu’un nouveau rejoint le projet. En plus de cela, tout le reste a tendance à être plus rapide. Les IDE fonctionnent plus vite avec un petit projet, comparé à ceux utilisés pour les applications monolithiques. Ils démarrent plus vite, puisque il n’y a pas d’énormes serveurs ou un grand nombre de bibliothèques à charger.&lt;/p&gt;

&lt;h3 id=&quot;dploiement-marche-arrire-et-isolation-dune-erreur&quot;&gt;Déploiement, marche arrière et isolation d’une erreur&lt;/h3&gt;

&lt;p&gt;Le déploiement est plus rapide et plus simple. Déployer quelque chose de simple est plus rapide (voire plus facile) que déployer quelque chose de gros. Dans le cas où nous réalisons qu’il y a un problème, ce problème a potentiellement un impact limité et peut être annulé bien plus facilement.
Avant que nous ne fassions marche arrière, l’erreur est isolée dans une petite partie du système. La livraison ou déploiement continu peut être fait à une vitesse et une fréquence qui ne serait pas possible avec de gros serveurs.&lt;/p&gt;

&lt;h3 id=&quot;pas-besoin-dengagement-sur-le-long-terme&quot;&gt;Pas besoin d’engagement sur le long terme&lt;/h3&gt;

&lt;p&gt;Un des problèmes fréquents avec les applications monolithiques est l’engagement. Nous sommes souvent obligés de choisir dès le  début l’architecture et les technologies qui devront durer un long moment. Après tout, nous construisons quelque chose de gros qui devra durer longtemps. Avec les microservices, cet besoin d’un engagement sur le long terme n’est pas si important. Changez de langage de programmation dans un microservice et s’il s’avère que c’est un bon choix, appliquez le à d’êtres. Si l’expérience échoue ou n’est pas optimale, il n’y a qu’une toute petite partie du système qui a besoin d’être refaite. C’est aussi valable pour les frameworks, les bibliothèques, les serveurs, etc. Nous pouvons même utiliser différentes base de données. Si une pincée de NoSQL semble être le meilleur choix pour un microservice en particulier, pourquoi ne pas l’utiliser et l’intégrer à l’intérieur du conteneur ?&lt;/p&gt;

&lt;h2 id=&quot;bonnes-pratiques&quot;&gt;Bonnes pratiques&lt;/h2&gt;

&lt;p&gt;La plupart des bonnes pratiques suivantes peuvent être généralement appliquées aux architectures orientées service. Maintenant, avec les microservices, elles deviennent encore plus importantes et bénéfiques.&lt;/p&gt;

&lt;h3 id=&quot;conteneurs&quot;&gt;Conteneurs&lt;/h3&gt;

&lt;p&gt;Gérer beaucoup de microservices peut facilement devenir une tâche très complexe. Chacun peut être écrit dans un langage de programmation différent, peut demander un type différent de serveur (léger si possible) ou peut avoir recours à différents jeux de bibliothèques. Si chacun de ces services est livré sous forme de conteneur, alors la plupart de ces problèmes disparaîtront. Tout ce que nous avons à faire est de lancer le conteneur avec par exemple Docker et espérer que tout ce dont nous avons besoin est dedans.&lt;/p&gt;

&lt;h3 id=&quot;microservices-proxy-ou-passerelle-dapi&quot;&gt;Microservices proxy ou Passerelle d’API&lt;/h3&gt;

&lt;p&gt;Les interfaces client de grandes entreprises peuvent avoir besoin d’appeler des dizaines voire des centaines de requêtes HTTP (comme c’est le cas pour &lt;a href=&quot;http://www.amazon.com/&quot;&gt;Amazon.com&lt;/a&gt;). Souvent les requêtes mettent plus de temps à être appelées qu’à recevoir la réponse.
Les microservices proxy peuvent aider dans ce genre de cas.
Leur objectif est d’appeler différents microservices et de retourner un service agrégé. Ils ne devraient contenir aucune logique mais simplement regrouper ensemble plusieurs réponses et répondre avec des données agrégées à l’utilisateur.&lt;/p&gt;

&lt;h3 id=&quot;reverse-proxy&quot;&gt;Reverse proxy&lt;/h3&gt;

&lt;p&gt;N’exposez jamais directement l’API d’un microservice. S’il n’y a pas un quelconque type d’orchestration, la dépendance entre l’utilisateur et le microservice peut devenir si importante qu’elle peut nous priver de la liberté que les microservices sont censés nous donner. Des serveurs légers comme Apache Tomcat ou &lt;a href=&quot;http://nginx.org/&quot;&gt;nginx&lt;/a&gt; sont très bons dans l’exécution de tâches de reverse proxy et peuvent aisément être utilisés avec peu d’effort supplémentaire. Merci de consulter l’article Continuous Deployment: Implementation pour voir une implémentation possible d’utiliser un reverse proxy avec Docker and quelques autres outils.&lt;/p&gt;

&lt;h3 id=&quot;approche-minimaliste&quot;&gt;Approche minimaliste&lt;/h3&gt;

&lt;p&gt;Les microservices ne devraient contenir que des paquets, des bibliothèques et des frameworks dont ils ont vraiment besoin. Plus ils sont petits, mieux c’est. C’est tout l’inverse de l’approche adoptée par les applications monolithiques. Alors qu’auparavant nous aurions eu recours à des serveurs JEE comme JBoss qui regroupent tous les outils sont nous aurions pu avoir besoin ou pas, les microservices fonctionnent mieux avec des solutions beaucoup plus minimalistes. Avoir des centaines de microservices qui embarquent tous un serveur JBoss est totalement disproportionné. Apache Tomcat, par exemple, est une bien meilleure option. J’ai tendance à choisir des solutions encore plus petites comme par exemple &lt;a href=&quot;http://spray.io/&quot;&gt;Spray&lt;/a&gt;, un serveur pour API Restful très léger. Ne prenez que ce dont vous avez besoin.&lt;/p&gt;

&lt;p&gt;La même approche devrait aussi être utilisée au niveau du système d’exploitation. Si nous devons déployer des microservices sous forme de conteneurs Docker, &lt;a href=&quot;https://coreos.com/&quot;&gt;CoreOS&lt;/a&gt; pourra être une meilleure solution que par exemple Red Hat ou Ubuntu.
Déjà débarrassé des choses dont nous n’avons pas besoin, il nous permet de mieux exploiter les ressources.&lt;/p&gt;

&lt;h3 id=&quot;la-gestion-de-la-configuration-est-un-must&quot;&gt;La gestion de la configuration est un must&lt;/h3&gt;

&lt;p&gt;Plus le nombre de microservices augmente, plus nous avons besoin de gestion de configuration (&amp;lt;abbr title=Configuration Management&amp;gt;CM&amp;lt;/a&amp;gt;). Déployer plusieurs microservices sans des outils comme &lt;a href=&quot;http://puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt;, &lt;a href=&quot;https://www.chef.io/&quot;&gt;Chef&lt;/a&gt; ou &lt;a href=&quot;http://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; (pour n’en citer que quelques uns) vire très vite au cauchemar. En fait, mis à part pour des solutions extrêmement simples, ne pas utiliser d’outils de gestion de configuration est une perte de temps, qu’il y ait des microservices ou non.&lt;/p&gt;

&lt;h3 id=&quot;des-quipes-transversales-fonctionnelles&quot;&gt;Des équipes transversales fonctionnelles&lt;/h3&gt;

&lt;p&gt;Bien qu’il n’y ait pas de règles qui dictent la manière dont les équipes doivent être structurées, les microservices sont mieux conçus lorsque l’équipe qui travaille sur un est pluri-disciplinaires. Une seule équipe devrait en être responsable du début (conception) à la fin (déploiement et maintenance). Les microservices sont trop petits pour être gérer d’une équipe à l’autre (équipes d’architecture/conception, de développement, de tests, de déploiement et de maintenance). Il est préférable d’avoir une seule équipe entièrement responsable du cycle de vie d’un microservice. Dans certains cas une équipe pourra être responsable de plusieurs microservices, mais la responsabilité d’un microservice ne devrait pas être répartie entre plusieurs équipes.&lt;/p&gt;

&lt;h3 id=&quot;versionnement-dapi&quot;&gt;Versionnement d’API&lt;/h3&gt;

&lt;p&gt;Toute API devrait être &lt;em&gt;versionnée&lt;/em&gt; et c’est aussi vrai pour les microservices. Si certaines changements cassent le format de l’API, cette modification devrait être livrée dans une version à part. Dans le cas des APIs publiques ou des microservices, nous ne savons pas avec certitude qui les utilise et donc devons assurer une retro-compatibilité ou à défaut donner le temps aux utilisateurs de pouvoir s’adapter. Il y a une partie sur la gestion des versions d’API publier dans l’article &lt;a href=&quot;http://technologyconversations.com/2014/08/12/rest-api-with-json/&quot;&gt;API REST avec JSON&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;en-rsum&quot;&gt;En résumé&lt;/h2&gt;

&lt;p&gt;Les microservices ne sont pas la réponse à tous nos problèmes. Rien ne l’est. Ils ne sont pas la façon dont toutes les applications devraient être créées. Il n’y a aucune solution qui adresse tous les cas de figures.&lt;/p&gt;

&lt;p&gt;Les microservices existent depuis longtemps et ont connu un regain de popularité depuis quelques années. Il y a plusieurs facteurs responsables de cette tendance, le dimensionnement étant probablement le plus important d’entre eux.&lt;/p&gt;

&lt;p&gt;L’émergence de nouveaux outils et en particulier de Docker nous permettent de voir les microservices sous un nouveau jour et suppriment une partie des problèmes que leur développement et leur déploiement avaient crées.&lt;/p&gt;

&lt;p&gt;L’utilisation des microservices par les « grands » comme Amazon, Netflix, eBay et d’autres, donne assez de confiance pour que ce style d’architecture soit prêt à être évalué (si ce n’est utilisé) par les développeurs d’applications professionnelles.&lt;/p&gt;

&lt;p&gt;Pour plus d’informations sur les microservices, vous pouvez lire : &lt;a href=&quot;http://technologyconversations.com/2015/01/26/microservices-development-with-scala-spray-mongodb-docker-and-ansible/&quot;&gt;Microservices Development with Scala, Spray, MongoDB, Docker and Ansible&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Crédit photo: &lt;a href=&quot;https://www.flickr.com/photos/zamito44/5252421562/&quot;&gt;zamito44&lt;/a&gt; via &lt;a href=&quot;http://photopin.com/&quot;&gt;photopin CC&lt;/a&gt;&lt;/p&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">Traduction de l‘article  de Victor Farcic

Ces dernières années les microservices sont devenus de plus en plus populaires. Pourquoi ? Devriez-vous les utiliser ? Comment les mettre en place ? Autant de questions auxquelles cet article de Victor Farcic apporte un début de réponse pour vous aider dans vos choix d’architecture logicielle.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://technologyconversations.files.wordpress.com/2014/11/deployment_03_immutable_microservices_05.gif" /></entry><entry><title type="html">Un modèle de branches Git efficace</title><link href="http://frank.taillandier.me/2014/12/14/un-modele-de-branches-git-efficace/" rel="alternate" type="text/html" title="Un modèle de branches Git efficace" /><published>2014-12-14T00:00:00+01:00</published><updated>2014-12-14T00:00:00+01:00</updated><id>http://frank.taillandier.me/2014/12/14/un-modele-de-branches-git-efficace</id><content type="html" xml:base="http://frank.taillandier.me/2014/12/14/un-modele-de-branches-git-efficace/">&lt;p&gt;&lt;em&gt;Traduction de &lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;l’article &lt;/a&gt; de Vincent Driessen.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Dans cet article je présente le modèle de développement que j’ai  commencé à utiliser pour tous mes projets (professionnels et personnels) depuis 1 an, et qui s’est avéré être très efficace. Cela fait un moment que je voulais écrire à son propos, mais je n’avais pas vraiment tout à fait pris le temps de le faire, jusqu’à maintenant. Je ne vais pas parler des détails des projets, simplement de la stratégie de ramification et la gestion des versions.&lt;/p&gt;

&lt;!-- excerpt --&gt;

&lt;p&gt;&lt;img src=&quot;http://nvie.com/img/git-model@2x.png&quot; alt=&quot;modèle de branches Git&quot; /&gt;&lt;/p&gt;

&lt;p&gt;C’est axé autour de Git comme outil de versionnement pour tout le code source.&lt;/p&gt;

&lt;h2 id=&quot;pourquoi-git-&quot;&gt;Pourquoi Git ?&lt;/h2&gt;

&lt;p&gt;Pour une discussion en détails sur les avantages et les inconvénients de Git comparé à des systèmes centralisés de contrôle du code source, &lt;a href=&quot;http://www.whygitisbetterthanx.com&quot;&gt;regardez&lt;/a&gt; sur le &lt;a href=&quot;https://git.wiki.kernel.org/index.php/GitSvnComparsion&quot;&gt;web&lt;/a&gt;. Il y a plein d’échanges de points de vue qui continuent sur le web.
En tant que développeur, je préfère Git à tous les autres outils qui existent aujourd’hui. Git a vraiment changé la manière dont les développeurs pensent la fusion et la bifurcation. Dans le monde des classiques CVS/ Subversion d’où je viens, fusionner/ramifier a toujours été considéré comme quelque chose d’un peu effrayant (attention aux conflits après une fusion, ils mordent !) et c’est une opération qu’on ne fait que de temps à autre.&lt;/p&gt;

&lt;p&gt;Mais avec Git, ces opérations sont très peu couteuses et très simples et elles sont vraiment considérées comme partie intégrante de votre manière de travailler au quotidien. Par examples dans les &lt;a href=&quot;http://svnbook.red-bean.com&quot;&gt;livres&lt;/a&gt; sur CVS/Subversion, la création de branche et la fusion ne sont évoquées que dans les derniers chapitres (pour les utilisateurs avancés), alors que dans &lt;a href=&quot;https://pragprog.com/book/tsgit/pragmatic-version-control-using-git&quot;&gt;n’importe quel livre sur Git&lt;/a&gt;, c’est un sujet couvert dès le chapitre 3 (les bases).&lt;/p&gt;

&lt;p&gt;Grâce à sa simplicité et à sa nature répétitive, la bifurcation et la fusion ne sont plus quelque chose à redouter. Les outils de contrôle de version sont avant tout supposés aider dans la bifurcation/fusion.&lt;/p&gt;

&lt;p&gt;Assez parlé des outils, voyons maintenant le modèle de développement. Le modèle que je présente ici n’est rien d’autre qu’un ensemble de procédures que chaque membre de l’équipe doit respecter pour parvenir à un processus de gestion de développement logiciel.&lt;/p&gt;

&lt;h2 id=&quot;dcentralis-mais-centralis&quot;&gt;Décentralisé mais centralisé&lt;/h2&gt;

&lt;p&gt;La configuration de dépôt que nous utilisons et qui marche bien avec ce modèle de développement, est celle avec un « vrai » dépôt central. Notez que ce dépôt est simplement &lt;em&gt;considéré&lt;/em&gt; comme étant le dépôt central (puisque Git est une système de version décentralisé, techniquement il n’existe pas de dépôt central en tant que tel.). Nous ferons référence à ce dépôt comme &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;, puisque tous les utilisateurs de Git sont familiers avec ce nom.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nvie.com/img/centr-decentr@2x.png&quot; alt=&quot;Des dépôts centralisés et un dépôt central&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Chaque développeur &lt;code class=&quot;highlighter-rouge&quot;&gt;pull&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; sur &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;. Mais au delà de la relation centralisée push-pull, chaque développeur peut aussi récupérer des changements d’autres équipiers pour former des sous-équipes. Par exemple, cela peut s’avérer utile quand deux ou plusieurs développeurs travaillent ensemble sur une fonctionnalité, plutôt que de pousser prématurément le travail en cours sur &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;. Dans l’illustration ci-dessus,  il y a des sous-équipes d’Alice et Bob, Alice et David et Claire et David.&lt;/p&gt;

&lt;p&gt;Techniquement, cela veut simplement dire qu’Alice a défini un dépôt disant, nommé &lt;code class=&quot;highlighter-rouge&quot;&gt;bob&lt;/code&gt;, qui point vers le dépôt de Bobo et inversement.&lt;/p&gt;

&lt;h2 id=&quot;les-branches-principales&quot;&gt;Les branches principales&lt;/h2&gt;

&lt;p&gt;A la base, ce modèle de développement s’inspire fortement de modèles existants. Le dépôt central héberge les deux branches principales qui ont une durée de vie infinie :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Les branches &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt; devraient être familières pour tout utilisateur de Git. Parallèlement à la branch &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, une autre branche appelée &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; est présente.&lt;/p&gt;

&lt;p&gt;Nous considérons &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/master&lt;/code&gt; comme étant la branche principale où le code source de &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; reflète l’état de &lt;em&gt;prêt pour la production&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Nous considérons &lt;code class=&quot;highlighter-rouge&quot;&gt;origin/develop&lt;/code&gt; comme étant la branche principale où le code source de &lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt; reflète les derniers changements livrés pour la prochaine version. Certains l’appelleraient « branche d’intégration ». C’est à partir de cet emplacement que sont compilées les versions quotidiennes.&lt;/p&gt;

&lt;p&gt;Quand le code source dans la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; est considéré stable et prête à être livré, tous les changements doivent être fusionnés dans &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; puis se voient assignés d’un numéro de version. Nous verrons comment faire cela en détails plus loin.&lt;/p&gt;

&lt;p&gt;En conséquence, à chaque fois que des changements sont reportés dans &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, &lt;em&gt;par définition&lt;/em&gt; c’est une nouvelle version de production. Nous devons être très strict avec ceci, pour qu’hypothétiquement nous puissions utilise un hook script Git pour automatiquement compiler et déployer notre logiciel sur nos serveurs de production à chaque fois qu’il y a un commit sur &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;les-branches-de-support&quot;&gt;Les branches de support&lt;/h2&gt;

&lt;p&gt;A côté des branches principales &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; et &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, notre modèle de développement utilise une variété de branches de support pour aider le développement en parallèle entre les membres de l’équipe, faciliter le suivi des fonctionnalités, préparer les versions de productions et nous aider à réparer rapidement les problèmes survenus en production.
Contrairement aux branches principales, ces branches ont toujours une durée de vie limitée, puisqu’elles seront effacées au final.&lt;/p&gt;

&lt;p&gt;Les différents types de branches que nous pouvons utiliser sont :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;les branches pour les fonctionnalités&lt;/li&gt;
  &lt;li&gt;les branches pour les versions&lt;/li&gt;
  &lt;li&gt;les branches de correctifs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Chacune de ces branches a un but précis et elles obéissent à  des règles strictes comme de quelles branches elles peuvent provenir et dans quelles branches elles peuvent être fusionnées. Nous allons voir comment dans quelques minutes.&lt;/p&gt;

&lt;p&gt;Ce ne sont en aucun cas des branches « spéciales » d’un point de vue technique. Les types de branche sont catégorisés par la façon dont nous les &lt;em&gt;utilisons&lt;/em&gt;. Ce sont bien sur de bonnes vieilles branches Git.&lt;/p&gt;

&lt;h2 id=&quot;les-branches-de-fonctionnalit&quot;&gt;Les branches de fonctionnalité&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;Peuvent provenir de :&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Doivent être fusionnées dans :&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Convention de nommage de la branche :&lt;/dt&gt;
&lt;dd&gt;Tout sauf &lt;code&gt;master&lt;/code&gt;, &lt;code&gt;develop&lt;/code&gt;, &lt;code&gt;release-*&lt;/code&gt; ou &lt;code&gt;hotfix-*&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Les branches de fonctionnalités (parfois appelées branches de thème) sont utilisées pour développer de nouvelles fonctionnalités pour la prochaine version ou pour une future. Au début du développement d’une fonctionnalité, la version cible dans laquelle cette fonctionnalité sera ajoutée peut très bien être inconnue à cet instant. L’raison d’être d’une branche de fonctionnalité est qu’elle existe tant que la fonctionnalité est en cours de développement, mais sera finalement fusionnée dans &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; (pour ajouter la fonctionnalité à la prochaine version) ou abandonnée (dans le cas d’une expérience décevante).&lt;/p&gt;

&lt;p&gt;Les branches de fonctionnalités n’existent typiquement que dans les dépôts des développeurs, pas sur &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;crer-une-branche-de-fonctionnalit&quot;&gt;Créer une branche de fonctionnalité&lt;/h3&gt;

&lt;p&gt;Lorsqu’on commence à travailler sur une nouvelle fonctionnalité, partez de la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout -b myfeature develop
Switched to a new branch &lt;span class=&quot;s2&quot;&gt;&quot;myfeature&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;incorporer-une-fonctionnalit-termine-dans-develop&quot;&gt;Incorporer une fonctionnalité terminée dans develop&lt;/h3&gt;

&lt;p&gt;Les fonctionnalités terminées peuvent être fusionnées dans la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; pour être ajoutées à la prochaine version :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout develop
Switched to branch &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge --no-ff myfeature
Updating ea1b82a..05e9557
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Résumé des changements&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git branch -d myfeature
Deleted branch myfeature &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;was 05e9557&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git push origin develop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;L’option &lt;code class=&quot;highlighter-rouge&quot;&gt;—no-ff&lt;/code&gt; va créer un nouveau commit lors de la fusion, même si la fusion aurait pu se faire avec un fast-forward. Cela évite de perdre l’information de l’existence historique d’une branche de fonctionnalité et groupe ensemble tous les commits qui ont été ajoutés à la fonctionnalité.
Comparez :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://nvie.com/img/merge-without-ff@2x.png&quot; alt=&quot;Fusion avec et sans l’option fast-foward&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Dans le deuxième cas, il est impossible de voir à partir de l’historique de Git quel groupe de commits a implémenté une fonctionnalité - il faudrait lire manuellement tous les messages de logs. Supprimer une fonctionnalité ( c’est à dire un ensemble de commits) est un vrai casse-tête dans la deuxième situation, alors que c’est facilement à faire quand l’option &lt;code class=&quot;highlighter-rouge&quot;&gt;—no-ff&lt;/code&gt; a été utilisée.&lt;/p&gt;

&lt;p&gt;Oui, cela va créer quelques commits (vides) supplémentaires, mais le gain est tellement supérieur au coût.&lt;/p&gt;

&lt;p&gt;Malheureusement, je n’ai pas encore trouvé de manière de faire de —no-ff l’option par défaut de git merge, mais ça devrait vraiment l’être.&lt;/p&gt;

&lt;h2 id=&quot;les-branches-de-version&quot;&gt;Les branches de version&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;Peuvent provenir de :&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;develop&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Doivent être fusionnées dans :&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;develop&lt;/code&gt; et &lt;code&gt;master&lt;/code&gt;&lt;/dd&gt;
&lt;dt&gt;Convention de nommage de la branche :&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;release-*&lt;/code&gt;&amp;lt;/develop&amp;gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Les branches de version servent à préparer les nouvelles versions de production. Elles permettent les optimisations de dernière minute. De plus elles permettent la correction d’anomalies mineures et la préparation des méta-données pour une version (numéro, date de compilation, etc.). En faisant tout ce travail sur une branche de version, la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; peut incorporer des fonctionnalités pour la prochaine version majeure.&lt;/p&gt;

&lt;p&gt;Le bon moment pour créer une nouvelle branche de version depuis &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; est quand &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; reflète l’état désiré de la nouvelle version. A minima toutes les fonctionnalités visées pour la version à venir doivent être fusionnées dans &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; à ce moment-là. Toutes les fonctionnalités visées pour les prochaines versions ne le sont pas - elles doivent attendre jusqu’à ce que la branche de version bifurque.&lt;/p&gt;

&lt;p&gt;C’est précisément au début d’une branche de version que la prochaine version se voit assigné un numéro de version - et pas avant. Avant ce moment, la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; reflète les changements pour la « prochaine version » mais sans forcément savoir si cette « prochaine version » sera la 0.3 ou la 1.0, du moins pas avant que la branche de version soit créé. Cette décision est prise au début de la nouvelle branche de version et dépend des règles mise en place sur les changements de numéros de version.&lt;/p&gt;

&lt;h3 id=&quot;crer-une-branche-de-version&quot;&gt;Créer une branche de version&lt;/h3&gt;

&lt;p&gt;Les branches de version sont créées à partir de la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;. Par exemple, disons que la version 1.1.5 est la version courante de production et que nous avons une nouvelle version majeure qui arrive. L’état de &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; est prêt pour la « prochaine version » et nous avons décidé que cela deviendra la version 1.2 (plutôt que 1.1.6 ou 2.0). Donc nous bifurquons et donnons à la branche de version un nom qui reflète le nouveau numéro de version :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout -b release-1.2 develop
Switched to a new branch &lt;span class=&quot;s2&quot;&gt;&quot;release-1.2&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./bump-version.sh 1.2
Files modified successfully, version bumped to 1.2.
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&quot;Bumped version number to 1.2&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;release-1.2 74d9424] Bumped version number to 1.2
1 files changed, 1 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 1 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Après avoir crée une nouvelle branche, et nous être positionné dessus, nous incrémentons le numéro de version. Ici, &lt;code class=&quot;highlighter-rouge&quot;&gt;bump-version.sh&lt;/code&gt; est un script shell fictif qui change quelques fichiers dans notre dossier de travail pour refléter la nouvelle version. (Cela peut bien évidemment être un changement manuel - le propos étant que &lt;em&gt;certains&lt;/em&gt; fichiers changent.)Puis, le changement de numéro de version est enregistré.&lt;/p&gt;

&lt;p&gt;Cette nouvelle branche pourra exister pendant un moment, jusqu’à ce que la version soit déployée pour de bon. Pendant ce temps, des correctifs pourront être appliqués à cette branche (plutôt que sur la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, et par conséquent en attendant la prochaine version majeure.&lt;/p&gt;

&lt;h3 id=&quot;finaliser-une-branche-de-version&quot;&gt;Finaliser une branche de version&lt;/h3&gt;

&lt;p&gt;Quand l’état de la branche de version est prêt à deviner une vraie version, quelques actions doivent êtres effectuées. Premièrement, la branche de release est fusionnée dans &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; (puisque chaque commit sur &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; est une nouvelle version &lt;em&gt;par définition&lt;/em&gt;, souvenez-vous). Ensuite, ce commit sur &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; doit être targué pour  pouvoir faire simplement référence par la suite à cette version historique. Enfin, les changements fais sur la branche de version doivent être reversés dans &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, afin que les version futures contiennent aussi ces correctifs.&lt;/p&gt;

&lt;p&gt;Les deux premieres étapes dans Git :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout master
Switched to branch &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge --no-ff release-1.2
Merge made by recursive.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Résumé des changements&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git tag -a 1.2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La version est maintenant terminée et targuée pour toute référence future.&lt;/p&gt;

&lt;p&gt;Remarque : Vous pouvez tout aussi bien vouloir utiliser les options &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;clef&amp;gt;&lt;/code&gt; pour signer votre tag de manière chiffrée.&lt;/p&gt;

&lt;p&gt;Pour garder les changements effectués dans la branche de version, nous avons besoin de les fusionner dans &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;. Avec Git :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout develop
Switched to branch &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge --no-ff release-1.2
Merge made by recursive.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Résumé des changements&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Cette étape peut mener à une conflit de fusion (probablement même, puisque nous avons changé le numéro de version. Si c’est le cas, corrigez-le et comptez.&lt;/p&gt;

&lt;p&gt;Maintenant nous avons vraiment terminé et la branche de version peut être supprimée, puisque nous n’en avons plus besoin :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git branch -d release-1.2

Deleted branch release-1.2 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;was ff452fe&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;les-branches-de-correctifs&quot;&gt;Les branches de correctifs&lt;/h3&gt;

&lt;dl&gt;
&lt;dt&gt;Peuvent provenir de :&lt;/dt&gt;
&lt;dd&gt;`master`&lt;/dd&gt;
&lt;dt&gt;Doivent être fusionnées dans :&lt;/dt&gt;
&lt;dd&gt;`develop` et `master`&lt;/dd&gt;
&lt;dt&gt;Convention de nommage de la branche :&lt;/dt&gt;
&lt;dd&gt;`hotfix-*&amp;lt;/develop&amp;gt;&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;&lt;img src=&quot;http://nvie.com/img/hotfix-branches@2x.png&quot; alt=&quot;Une branche de correctif&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Les branches de correctifs ressemblent beaucoup aux branches de version, dans le sens où elles sont également destinées à préparer une nouvelle version de production, bien que non planifiées. Elles viennent de la nécessité d’agir immédiatement sur un état indésirable d’une version en production. Quand une anomalie critique doit être résolu immédiatement, une branche de  correctif peut être crée à partir du tag correspondant sur la branche master qui marque la version de production.&lt;/p&gt;

&lt;p&gt;L’objectif est que le travail des membres de l’équipe (sur la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;) puisse continuer, pendant qu’une autre personne prépare un correctif rapide pour la production.&lt;/p&gt;

&lt;h3 id=&quot;crer-une-branche-de-correctif&quot;&gt;Créer une branche de correctif&lt;/h3&gt;

&lt;p&gt;Les branches de correctif sont créées à partir de la branche &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;. Par exemple, disons que la version 1.2 est la version qui tourne actuellement en production et que plusieurs anomalies posent problème. Dans le même temps les modifications effectuées sur &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; sont encore instables. Nous pouvons alors créer une branche de correctif et commencer à corriger le problème :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout -b hotfix-1.2.1 master
Switched to a new branch &lt;span class=&quot;s2&quot;&gt;&quot;hotfix-1.2.1&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./bump-version.sh 1.2.1
Files modified successfully, version bumped to 1.2.1.
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -a -m &lt;span class=&quot;s2&quot;&gt;&quot;Bumped version number to 1.2.1&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hotfix-1.2.1 41e61bb] Bumped version number to 1.2.1
1 files changed, 1 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 1 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;N’oubliez pas de modifier le numéro de version après la création de la branche !&lt;/p&gt;

&lt;p&gt;Ensuite, corrigez le bug et enregistrez le correctif dans un ou plusieurs commits séparés.&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Fixed severe production problem&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;hotfix-1.2.1 abbe5d6] Fixed severe production problem
5 files changed, 32 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 17 deletions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;finalisation-dune-branche-de-correctif&quot;&gt;Finalisation d’une branche de correctif&lt;/h3&gt;

&lt;p&gt;Lorsque c’est terminé, le correctif a besoin d’être reporté dans  &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;, mais aussi dans &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;, de manière à garantir que le correctif sera également inclus dans la prochaine version. C’est en tout point similaire à la manière dont les branches de version sont finalisées.&lt;/p&gt;

&lt;p&gt;Premièrement, mettez à jour &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt; et tagguez la version :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout master
Switched to branch &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge --no-ff hotfix-1.2.1
Merge made by recursive.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Résumé des modifications&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git tag -a 1.2.1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Remarque : Vous pouvez tout aussi bien vouloir utiliser les options &lt;code class=&quot;highlighter-rouge&quot;&gt;-s&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;-u&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;clef&amp;gt;&lt;/code&gt; pour signer votre tag de manière chiffrée.&lt;/p&gt;

&lt;p&gt;Ensuite, déployez également le correctif dans &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt; :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout develop
Switched to branch &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge --no-ff hotfix-1.2.1
Merge made by recursive.
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Résumé des modifications&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;La seule exception à la règle ici est que, &lt;strong&gt;lorsqu’une branche de version en cours de developpement existe, le correctif a besoin d’être reporté dans cette branche de version, plutôt que dans &lt;code class=&quot;highlighter-rouge&quot;&gt;develop&lt;/code&gt;&lt;/strong&gt;. Le report de l’anomalie dans la branche de version finira par être reporté dans develop à son tour, lorsque la branche de version sera terminée. (Si le travail en cours sur develop nécessite que l’anomalie soit corrigée immédiatement sans attendre la fin de la branche de version, vous pouvez tout aussi bien reporter dès à présent le correctif également sur develop.)&lt;/p&gt;

&lt;p&gt;Enfin, supprimer la branche temporaire :&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git branch -d hotfix-1.2.1
Deleted branch hotfix-1.2.1 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;was abbe5d6&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;en-rsum&quot;&gt;En résumé&lt;/h2&gt;

&lt;p&gt;Bien qu’il n’y ait rien de bien révolutionnaire dans ce modèle de développement, l’illustration qui figure au début de cet article s’est révélée particulièrement utile dans nos projets. C’est un modèle mental facile à appréhender et il permet de développer une appropriation collective des processus de branches et de versions.&lt;/p&gt;

&lt;p&gt;Enfin, voici &lt;a href=&quot;http://nvie.com/files/Git-branching-model.pdf&quot;&gt;une version PDF en haute résolution du modèle&lt;/a&gt;. Imprimez-le et accrochez le au mur pour avoir une référence sous les yeux à tout moment.&lt;/p&gt;</content><author><name>Frank Taillandier</name><email>frank@taillandier.me</email></author><summary type="html">Traduction de l’article  de Vincent Driessen.

Dans cet article je présente le modèle de développement que j’ai  commencé à utiliser pour tous mes projets (professionnels et personnels) depuis 1 an, et qui s’est avéré être très efficace. Cela fait un moment que je voulais écrire à son propos, mais je n’avais pas vraiment tout à fait pris le temps de le faire, jusqu’à maintenant. Je ne vais pas parler des détails des projets, simplement de la stratégie de ramification et la gestion des versions.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://nvie.com/img/git-model@2x.png" /></entry></feed>
